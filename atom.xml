<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Themis_Sword's Blog]]></title>
  <link href="http://www.aprilzephyr.com/atom.xml" rel="self"/>
  <link href="http://www.aprilzephyr.com/"/>
  <updated>2014-04-12T12:42:54+08:00</updated>
  <id>http://www.aprilzephyr.com/</id>
  <author>
    <name><![CDATA[Themis_Sword]]></name>
    <email><![CDATA[licong0419@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stay Hungry, Stay Foolish]]></title>
    <link href="http://www.aprilzephyr.com/blog/04082014/stay-hungry/"/>
    <updated>2014-04-08T14:43:38+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04082014/stay-hungry</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/stayhsf.png"><br/>
<strong>&ldquo;Stay Hungry, Stay Foolish.&rdquo;</strong> Such resounding words delivered by Steve Jobs were in 2005 Stanford Commencement Address which, was actually not the topic today. The quote is just about some reflections of a movie <a href="http://www.imdb.com/title/tt0107048/"><em>Groundhog Day</em></a>.<!--more--></p>

<p><strong>&ldquo;What would you do if you were stuck in one place and every day was exactly the same, and nothing that you did mattered?&rdquo;</strong></p>

<p>Phil Connors, the hero in that movie, an arrogant and egocentric Pittsburgh TV weatherman who, during a disgusted assignment covering the annual Groundhog Day event in Punxsutawney, finds himself in a time loop, repeating the same day over and over and over again. After indulging in periods of hedonism, dismay, bitterness, despair then numerous suicide attempts, he begins to re-examine his life and tries to change &mdash; improving and enriching himself through learning new skills and helping people.</p>

<p>Some plots are interesting that when Phil tries harder and harder to cater to someone he is interested, either terrible consequences(such as slaps on his face) come or void&rsquo;s arising even he succeeds. It might be because Phil attempts to alter the original himself which he actually couldn&rsquo;t. Such alternation would not last long even though he makes it for a flash. Only when Phil accepts the circumstances calmly, patiently and ready to do some &ldquo;changes&rdquo; would he handle the &ldquo;magic&rdquo; to break such time loop and win his queen&rsquo;s heart.</p>

<p>And so is the story telling us.</p>

<p>In real life, things are so similar that few ones are satisfied with their presents living roughly the same days over and over and over again. Senses of helplessness and so far as abomination towards their own never vanish. Sorrowfully that only fewer ones would like or dare to make a change as to be sluggish, revolted and desperate dying finally.</p>

<p>Staying hungry and foolish, is only for adequate constant advances for the nature of oneself could not be changed but the substance. There would be one and the only way to get rid of such suck life rhythm is to get cultured. Never scared, even if looked like deserted weeds temporarily. Just endeavor, struggle, enrich oneself, waiting patiently for the moment handling that fabulous magic to break one&rsquo;s own &ldquo;time loop&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve Your Python: 'yield' and Generators Explained(Fw)]]></title>
    <link href="http://www.aprilzephyr.com/blog/04062014/improve-your-python-yield/"/>
    <updated>2014-04-06T18:07:35+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04062014/improve-your-python-yield</id>
    <content type="html"><![CDATA[<p>Prior to beginning tutoring sessions, I ask new students to fill out a brief self-assessment where they rate their understanding of various Python concepts. Some topics (&ldquo;control flow with if/else&rdquo; or &ldquo;defining and using functions&rdquo;) are understood by a majority of students before ever beginning tutoring. There are a handful of topics, however, that almost all students report having no knowledge or very limited understanding of. Of these, &ldquo;<code>generators</code> and the <code>yield</code> keyword&rdquo; is one of the biggest culprits. I&rsquo;m guessing this is the case for most novice Python programmers.<!--more--></p>

<p>Many report having difficulty understanding <code>generators</code> and the <code>yield</code> keyword even after making a concerted effort to teach themselves the topic. I want to change that. In this post, I&rsquo;ll explain what the <code>yield</code> keyword does, why it&rsquo;s useful, and how to use it.</p>

<p><em>Note: In recent years, generators have grown more powerful as features have been added through PEPs. In my next post, I&rsquo;ll explore the true power of <code>yield</code> with respect to coroutines, cooperative multitasking and asynchronous I/O (especially their use in the <a href="https://code.google.com/p/tulip/">&ldquo;tulip&rdquo;</a> prototype implementation GvR has been working on). Before we get there, however, we need a solid understanding of how the <code>yield</code> keyword and generators work.</em></p>

<p><strong>Coroutines and Subroutines</strong><br/>
When we call a normal Python function, execution starts at function&rsquo;s first line and continues until a <code>return</code> statement, <code>exception</code>, or the end of the function (which is seen as an implicit <code>return None</code>) is encountered. Once a function returns control to its caller, that&rsquo;s it. Any work done by the function and stored in local variables is lost. A new call to the function creates everything from scratch.</p>

<p>This is all very standard when discussing functions (more generally referred to as <a href="http://en.wikipedia.org/wiki/Subroutine">subroutines</a>) in computer programming. There are times, though, when it&rsquo;s beneficial to have the ability to create a &ldquo;function&rdquo; which, instead of simply returning a single value, is able to yield a series of values. To do so, such a function would need to be able to &ldquo;save its work,&rdquo; so to speak.</p>

<p>I said, &ldquo;yield a series of values&rdquo; because our hypothetical function doesn&rsquo;t &ldquo;return&rdquo; in the normal sense. <code>return</code> implies that the function is <em>returning control</em> of execution to the point where the function was called. &ldquo;Yield,&rdquo; however, implies that the transfer of control is temporary and voluntary, and our function expects to regain it in the future.</p>

<p>In Python, &ldquo;functions&rdquo; with these capabilities are called <code>generators</code>, and they&rsquo;re incredibly useful. <code>generators</code> (and the <code>yield</code> statement) were initially introduced to give programmers a more straightforward way to write code responsible for producing a series of values. Previously, creating something like a random number generator required a class or module that both generated values and kept track of state between calls. With the introduction of <code>generators</code>, this became much simpler.</p>

<p>To better understand the problem generators solve, let&rsquo;s take a look at an example. Throughout the example, keep in mind the core problem being solved: <strong>generating a series of values.</strong></p>

<p><em>Note: Outside of Python, all but the simplest <code>generators</code> would be referred to as <code>coroutines</code>. I&rsquo;ll use the latter term later in the post. The important thing to remember is, in Python, everything described here as a <code>coroutine</code> is still a <code>generator</code>. Python formally defines the term <code>generator</code>; <code>coroutine</code> is used in discussion but has no formal definition in the language.</em></p>

<p><strong>Example: Fun With Prime Numbers</strong><br/>
Suppose our boss asks us to write a function that takes a <code>list</code> of <code>ints</code> and returns some Iterable containing the elements which are prime1 numbers.</p>

<p><em>Remember, an <a href="http://en.wikipedia.org/wiki/Subroutine">Iterable</a> is just an object capable of returning its members one at a time.</em></p>

<p>&ldquo;Simple,&rdquo; we say, and we write the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">input_list</span><span class="p">):</span>
</span><span class='line'>    <span class="n">result_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">input_list</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">):</span>
</span><span class='line'>            <span class="n">result_list</span><span class="o">.</span><span class="n">append</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result_list</span>
</span><span class='line'>
</span><span class='line'><span class="c"># or better yet...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">input_list</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">element</span> <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">input_list</span> <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># not germane to the example, but here&#39;s a possible implementation of</span>
</span><span class='line'><span class="c"># is_prime...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">number</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">current</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">current</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
Either <code>get_primes</code> implementation above fulfills the requirements, so we tell our boss we&rsquo;re done. She reports our function works and is exactly what she wanted.</p>

<p>Dealing With Infinite Sequences</p>

<p>Well, not quite exactly. A few days later, our boss comes back and tells us she&rsquo;s run into a small problem: she wants to use our <code>get_primes</code> function on a very large list of numbers. In fact, the list is so large that merely creating it would consume all of the system&rsquo;s memory. To work around this, she wants to be able to call <code>get_primes</code> with a <code>start</code> value and get all the primes larger than <code>start</code> (perhaps she&rsquo;s solving <a href="http://projecteuler.net/problem=10">Project Euler problem 10</a>).</p>

<p>Once we think about this new requirement, it becomes clear that it requires more than a simple change to <code>get_primes</code>. Clearly, we can&rsquo;t return a list of all the prime numbers from <code>start</code> to infinity (<em>operating on infinite sequences, though, has a wide range of useful applications</em>). The chances of solving this problem using a normal function seem bleak.</p>

<p>Before we give up, let&rsquo;s determine the core obstacle preventing us from writing a function that satisfies our boss&rsquo;s new requirements. Thinking about it, we arrive at the following: <strong>functions only get one chance to return results, and thus must return all results at once.</strong> It seems pointless to make such an obvious statement; &ldquo;functions just work that way,&rdquo; we think. The real value lies in asking, &ldquo;but what if they didn&rsquo;t?&rdquo;</p>

<p>Imagine what we could do if <code>get_primes</code> could simply return the next value instead of all the values at once. It wouldn&rsquo;t need to create a list at all. No list, no memory issues. Since our boss told us she&rsquo;s just iterating over the results, she wouldn&rsquo;t know the difference.</p>

<p>Unfortunately, this doesn&rsquo;t seem possible. Even if we had a magical function that allowed us to iterate from n to <code>infinity</code>, we&rsquo;d get stuck after returning the first value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">magical_infinite_range</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">element</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Imagine <code>get_primes</code> is called like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">solve_number_10</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># She *is* working on Project Euler #10, I knew it!</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">next_prime</span> <span class="ow">in</span> <span class="n">get_primes</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">next_prime</span> <span class="o">&lt;</span> <span class="mi">2000000</span><span class="p">:</span>
</span><span class='line'>            <span class="n">total</span> <span class="o">+=</span> <span class="n">next_prime</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Clearly, in <code>get_primes</code>, we would immediately hit the case where <code>number = 3</code> and return at line 4. Instead of <code>return</code>, we need a way to generate a value and, when asked for the next one, pick up where we left off.</p>

<p>Functions, though, can&rsquo;t do this. When they <code>return</code>, they&rsquo;re done for good. Even if we could guarantee a function would be called again, we have no way of saying, &ldquo;OK, now, instead of starting at the first line like we normally do, start up where we left off at line 4.&rdquo; Functions have a single <code>entry point</code>: the first line.</p>

<p><strong>Enter the Generator</strong><br/>
This sort of problem is so common that a new construct was added to Python to solve it: the <code>generator</code>. A <code>generator</code> &ldquo;generates&rdquo; values. Creating <code>generators</code> was made as straightforward as possible through the concept of <code>generator functions</code>, introduced simultaneously.</p>

<p>A <code>generator function</code> is defined like a normal function, but whenever it needs to generate a value, it does so with the <code>yield</code> keyword rather than <code>return</code>. If the body of a <code>def</code> contains <code>yield</code>, the function automatically becomes a <code>generator function</code> (even if it also contains a return statement). There&rsquo;s nothing else we need to do to create one.</p>

<p><code>generator functions</code> create <code>generator iterators</code>. That&rsquo;s the last time you&rsquo;ll see the term <code>generator iterator</code>, though, since they&rsquo;re almost always referred to as &ldquo;<code>generators</code>&rdquo;. Just remember that a <code>generator</code> is a special type of <code>iterator</code>. To be considered an <code>iterator</code>, <code>generators</code> must define a few methods, one of which is <code>__next__()</code>. To get the next value from a <code>generator</code>, we use the same built-in function as for <code>iterators</code>: <code>next()</code>.</p>

<p>This point bears repeating: <strong>to get the next value from a</strong> <code>generator</code><strong>, </strong>we use the same built-in function as for<strong> <code>iterators</code> </strong>:** <code>next()</code>.</p>

<p>(<code>next()</code> takes care of calling the generator&rsquo;s <code>__next__()</code> method). Since a <code>generator</code> is a type of <code>iterator</code>, it can be used in a <code>for</code> loop.</p>

<p>So whenever <code>next()</code> is called on a <code>generator</code>, the <code>generator</code> is responsible for passing back a value to whomever called <code>next()</code>. It does so by calling yield along with the value to be passed back (e.g. <code>yield 7</code>). The easiest way to remember what <code>yield</code> does is to think of it as <code>return</code> (plus a little magic) for <code>generator functions</code>.</p>

<p>Again, this bears repeating: <code>yield</code> <strong>is just</strong> <code>return</code> <strong>(plus a little magic) for</strong> <code>generator functions</code>.</p>

<p>Here&rsquo;s a simple generator function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">simple_generator_function</span><span class="p">():</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>    <span class="k">yield</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>    <span class="k">yield</span> <span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>    <span class="k">yield</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>
And here are two simple ways to use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">simple_generator_function</span><span class="p">():</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>     <span class="k">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">our_generator</span> <span class="o">=</span> <span class="n">simple_generator_function</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>Magic?</strong><br/>
What&rsquo;s the magic part? Glad you asked! When a <code>generator function</code> calls <code>yield</code>, the &ldquo;state&rdquo; of the <code>generator function</code> is frozen; the values of all variables are saved and the next line of code to be executed is recorded until <code>next()</code> is called again. Once it is, the <code>generator function</code> simply resumes where it left off. If <code>next()</code> is never called again, the state recorded during the <code>yield</code> call is (eventually) discarded.</p>

<p>Let&rsquo;s rewrite <code>get_primes</code> as a <code>generator function</code>. Notice that we no longer need the <code>magical_infinite_range function</code>. Using a simple <code>while</code> loop, we can create our own infinite sequence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">number</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>
If a <code>generator function</code> calls <code>return</code> or reaches the end its definition, a <code>StopIteration</code> exception is raised. This signals to whoever was calling <code>next()</code> that the <code>generator</code> is exhausted (this is normal <code>iterator</code> behavior). It is also the reason the <code>while True:</code> loop is present in <code>get_primes</code>. If it weren&rsquo;t, the first time <code>next()</code> was called we would check if the number is prime and possibly yield it. If <code>next()</code> were called again, we would uselessly add <code>1</code> to <code>number</code> and hit the end of the <code>generator function</code> (causing <code>StopIteration</code> to be raised). Once a generator has been exhausted, calling <code>next()</code> on it will result in an error, so you can only consume all the values of a <code>generator</code> once. The following will not work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">our_generator</span> <span class="o">=</span> <span class="n">simple_generator_function</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">our_generator</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>     <span class="k">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># our_generator has been exhausted...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">))</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;ipython-input-13-7e48a609051a&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">)</span>
</span><span class='line'><span class="ne">StopIteration</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># however, we can always create a new generator</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># by calling the generator function again...</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">new_generator</span> <span class="o">=</span> <span class="n">simple_generator_function</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">new_generator</span><span class="p">))</span> <span class="c"># perfectly valid</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Thus, the <code>while</code> loop is there to make sure we never reach the end of <code>get_primes</code>. It allows us to generate a value for as long as <code>next()</code> is called on the generator. This is a common idiom when dealing with infinite series (and <code>generators</code> in general).</p>

<p><strong>Visualizing the flow</strong>
Let&rsquo;s go back to the code that was calling <code>get_primes</code>: <code>solve_number_10</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">solve_number_10</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># She *is* working on Project Euler #10, I knew it!</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">next_prime</span> <span class="ow">in</span> <span class="n">get_primes</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">next_prime</span> <span class="o">&lt;</span> <span class="mi">2000000</span><span class="p">:</span>
</span><span class='line'>            <span class="n">total</span> <span class="o">+=</span> <span class="n">next_prime</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>
It&rsquo;s helpful to visualize how the first few elements are created when we call <code>get_primes</code> in <code>solve_number_10</code>&rsquo;s <code>for</code> loop. When the <code>for</code> loop requests the first value from <code>get_primes</code>, we enter <code>get_primes</code> as we would in a normal function.</p>

<p>1) We enter the while loop on line 3<br/>
2) The if condition holds (3 is prime)<br/>
3) We yield the value 3 and control to  solve_number_10.</p>

<p>Then, back in <code>solve_number_10</code>:</p>

<p>1) The value <code>3</code> is passed back to the <code>for</code> loop<br/>
2) The <code>for</code> loop assigns <code>next_prime</code> to this value<br/>
3) <code>next_prime</code> is added to <code>total</code><br/>
4) The <code>for</code> loop requests the next element from <code>get_primes</code><br/>
This time, though, instead of entering <code>get_primes</code> back at the top, we resume at line <code>5</code>, where we left off.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">number</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c"># &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Most importantly, <code>number</code> <em>still has the same value it did when we called <code>yield</code> (i.e. <code>3</code>).</em> Remember, <code>yield</code> both passes a value to whoever called <code>next()</code>, and saves the &ldquo;state&rdquo; of the <code>generator function</code>. Clearly, then, <code>number</code> is incremented to 4, we hit the top of the <code>while</code> loop, and keep incrementing <code>number</code> until we hit the next prime number (<code>5</code>). Again we <code>yield</code> the value of <code>number</code> to the <code>for</code> loop in solve<code>_number_10</code>. This cycle continues until the <code>for</code> loop stops (at the first prime greater than <code>2,000,000</code>).</p>

<p><strong>Moar Power</strong><br/>
In <a href="http://www.python.org/dev/peps/pep-0342/">PEP 342</a>, support was added for passing values into generators. <a href="http://www.python.org/dev/peps/pep-0342/">PEP 342</a> gave <code>generators</code> the power to yield a value (as before), receive a value, or both yield a value and receive a (possibly different) value in a single statement.</p>

<p>To illustrate how values are sent to a <code>generator</code>, let&rsquo;s return to our prime number example. This time, instead of simply printing every prime number greater than <code>number</code>, we&rsquo;ll find the smallest prime number greater than successive powers of a number (i.e. for 10, we want the smallest prime greater than 10, then 100, then 1000, etc.). We start in the same way as <code>get_primes</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_successive_primes</span><span class="p">(</span><span class="n">iterations</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># like normal functions, a generator function</span>
</span><span class='line'>    <span class="c"># can be assigned to a variable</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">prime_generator</span> <span class="o">=</span> <span class="n">get_primes</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># missing code...</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">power</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># missing code...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># ... what goes here?</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The next line of <code>get_primes</code> takes a bit of explanation. While <code>yield number</code> would yield the value of <code>number</code>, a statement of the form <code>other = yield foo</code> means, &ldquo;yield <code>foo</code> and, when a value is sent to me, set <code>other</code> to that value.&rdquo; You can &ldquo;send&rdquo; values to a generator using the generator&rsquo;s <code>send</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>            <span class="n">number</span> <span class="o">=</span> <span class="k">yield</span> <span class="n">number</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>
In this way, we can set <code>number</code> to a different value each time the generator <code>yield</code>s. We can now fill in the missing code in <code>print_successive_primes</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_successive_primes</span><span class="p">(</span><span class="n">iterations</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="n">prime_generator</span> <span class="o">=</span> <span class="n">get_primes</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">prime_generator</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">power</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">prime_generator</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">base</span> <span class="o">**</span> <span class="n">power</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Two things to note here: First, we&rsquo;re printing the result of <code>generator.send</code>, which is possible because <code>send</code> both sends a value to the generator and returns the value yielded by the generator (mirroring how <code>yield</code> works from within the <code>generator function</code>).</p>

<p>Second, notice the <code>prime_generator.send(None)</code> line. When you&rsquo;re using send to &ldquo;start&rdquo; a generator (that is, execute the code from the first line of the generator function up to the first <code>yield</code> statement), you must send <code>None</code>. This makes sense, since by definition the generator hasn&rsquo;t gotten to the first <code>yield</code> statement yet, so if we sent a real value there would be nothing to &ldquo;receive&rdquo; it. Once the generator is started, we can send values as we do above.</p>

<p><strong>Round-up</strong><br/>
In the second half of this series, we&rsquo;ll discuss the various ways in which <code>generators</code> have been enhanced and the power they gained as a result. <code>yield</code> has become one of the most powerful keywords in Python. Now that we&rsquo;ve built a solid understanding of how <code>yield</code> works, we have the knowledge necessary to understand some of the more &ldquo;mind-bending&rdquo; things that <code>yield</code> can be used for.</p>

<p>Believe it or not, we&rsquo;ve barely scratched the surface of the power of <code>yield</code>. For example, while <code>send</code> does work as described above, it&rsquo;s almost never used when generating simple sequences like our example. Below, I&rsquo;ve pasted a small demonstration of one common way <code>send</code> is used. I&rsquo;ll not say any more about it as figuring out how and why it works will be a good warm-up for part two.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return 3 random integers between 0 and 9&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">consume</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Displays a running average across lists of integers sent to it&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">running_sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">data_items_seen</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="k">yield</span>
</span><span class='line'>        <span class="n">data_items_seen</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="n">running_sum</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;The running average is {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">running_sum</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="n">data_items_seen</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">produce</span><span class="p">(</span><span class="n">consumer</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Produces a set of values and forwards them to the pre-defined consumer</span>
</span><span class='line'><span class="sd">    function&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Produced {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span><span class='line'>        <span class="n">consumer</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">yield</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">consumer</span> <span class="o">=</span> <span class="n">consume</span><span class="p">()</span>
</span><span class='line'>    <span class="n">consumer</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="n">producer</span> <span class="o">=</span> <span class="n">produce</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Producing...&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">next</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>Remember&hellip;</strong><br/>
There are a few key ideas I hope you take away from this discussion:<br/>
* <code>generators</code> are used to generate a series of values<br/>
* <code>yield</code> is like the <code>return</code> of <code>generator functions</code><br/>
* The only other thing <code>yield</code> does is save the &ldquo;state&rdquo; of a <code>generator function</code><br/>
* A <code>generator</code> is just a special type of <code>iterator</code><br/>
* Like <code>iterators</code>, we can get the next value from a <code>generator</code> using <code>next()</code><br/>
** <code>for</code> gets values by calling <code>next()</code> implicitly</p>

<p>I hope this post was helpful. If you had never heard of <code>generators</code>, I hope you now understand what they are, why they&rsquo;re useful, and how to use them. If you were somewhat familiar with <code>generators</code>, I hope any confusion is now cleared up.</p>

<p><a href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">Origin</a><br/>
<a href="http://www.oschina.net/translate/improve-your-python-yield-and-generators-explained">Reference</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python with語句(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/04062014/python-with-yu-ju/"/>
    <updated>2014-04-06T16:37:46+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04062014/python-with-yu-ju</id>
    <content type="html"><![CDATA[<p><strong>1. With 語句是什麼</strong><br/>
Python’s with statement provides a very convenient way of dealing with the situation where you have to do a setup and teardown to make something happen. A very good example for this is the situation where you want to gain a handler to a file, read data from the file and the close the file handler.<br/>
有一些任務，可能事先需要設置，事後做清理工作。對於這種場景，Python的with語句提供了一種非常方便的處理方式。一個很好的例子是文件處理，你需要獲取一個文件句柄，從文件中讀取數據，然後關閉文件句柄。<!--more--></p>

<p>Without the with statement, one would write something along the lines of:<br/>
如果不用with語句，代碼如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;/tmp/foo.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
There are two annoying things here. First, you end up forgetting to close the file handler. The second is how to handle exceptions that may occur once the file handler has been obtained. One could write something like this to get around this:<br/>
這裏有兩個問題。一是可能忘記關閉文件句柄；二是文件讀取數據發生異常，沒有進行任何處理。下面是處理異常的加強版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;/tmp/foo.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
While this works well, it is unnecessarily verbose. This is where with is useful. The good thing about with apart from the better syntax is that it is very good handling exceptions. The above code would look like this, when using with:<br/>
雖然這段代碼運行良好，但是太冗長了。這時候就是with一展身手的時候了。除了有更優雅的語法，with還可以很好的處理上下文環境產生的異常。下面是with版本的代碼：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;/tmp/foo.txt&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2. with如何工作</strong><br/>
while this might look like magic, the way Python handles with is more clever than magic. The basic idea is that the statement after with has to evaluate an object that responds to an __enter__() as well as an __exit__() function.<br/>
這看起來充滿魔法，但不僅僅是魔法，Python對with的處理還很聰明。基本思想是with所求值的對象必須有一個__enter__()方法，一個__exit__()方法。</p>

<p>After the statement that follows with is evaluated, the __enter__() function on the resulting object is called. The value returned by this function is assigned to the variable following as. After every statement in the block is evaluated, the __exit__() function is called.<br/>
緊跟with後面的語句被求值後，返回對象的__enter__()方法被調用，這個方法的返回值將被賦值給as後面的變量。當with後面的代碼塊全部被執行完之後，將調用前面返回對象的__exit__()方法。</p>

<p>This can be demonstrated with the following example:<br/>
下面例子可以具體說明with如何工作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># with_example01.py</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sample</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;In __enter__()&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Foo&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">trace</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;In __exit__()&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_sample</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Sample</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="n">get_sample</span><span class="p">()</span> <span class="k">as</span> <span class="n">sample</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;sample:&quot;</span><span class="p">,</span> <span class="n">sample</span>
</span></code></pre></td></tr></table></div></figure>


<p>
When executed, this will result in:<br/>
運行代碼，輸出如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bash</span><span class="o">-</span><span class="mf">3.2</span><span class="err">$</span> <span class="o">./</span><span class="n">with_example01</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">In</span> <span class="n">__enter__</span><span class="p">()</span>
</span><span class='line'><span class="n">sample</span><span class="p">:</span> <span class="n">Foo</span>
</span><span class='line'><span class="n">In</span> <span class="n">__exit__</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
As you can see,<br/>
The __enter__() function is executed<br/>
The value returned by it &ndash; in this case &ldquo;Foo&rdquo; is assigned to sample<br/>
The body of the block is executed, thereby printing the value of sample ie. &ldquo;Foo&#8221;<br/>
The __exit__() function is called.<br/>
What makes with really powerful is the fact that it can handle exceptions. You would have noticed that the __exit__() function for Sample takes three arguments &ndash; val, type and trace. These are useful in exception handling. Let’s see how this works by modifying the above example.<br/>
正如你看到的，<br/>
1) __enter__()方法被執行<br/>
2) __enter__()方法返回的值 &ndash; 這個例子中是&#8221;Foo&#8221;，賦值給變量&#8217;sample&#8217;<br/>
3) 執行代碼塊，打印變量&#8221;sample&#8221;的值為 &#8220;Foo&#8221;<br/>
4) __exit__()方法被調用<br/>
with真正強大之處是它可以處理異常。可能你已經註意到Sample類的__exit()__方法有三個參數- val, type 和 trace。 這些參數在異常處理中相當有用。我們來改一下代碼，看看具體如何工作的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># with_example02.py</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sample</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">trace</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;type:&quot;</span><span class="p">,</span> <span class="nb">type</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;value:&quot;</span><span class="p">,</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;trace:&quot;</span><span class="p">,</span> <span class="n">trace</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">do_something</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">bar</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bar</span> <span class="o">+</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="n">Sample</span><span class="p">()</span> <span class="k">as</span> <span class="n">sample</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sample</span><span class="o">.</span><span class="n">do_something</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Notice how in this example, instead of get_sample(), with takes Sample(). It does not matter, as long as the statement that follows with evaluates to an object that has an __enter__() and __exit__() functions. In this case, Sample()’s __enter__() returns the newly created instance of Sample and that is what gets passed to sample.<br/>
這個例子中，with後面的get_sample()變成了Sample()。這沒有任何關系，只要緊跟with後面的語句所返回的對象有__enter__()和__exit__()方法即可。此例中，Sample()的__enter__()方法返回新創建的Sample對象，並賦值給變量sample。</p>

<p>When executed:<br/>
代碼執行後：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bash</span><span class="o">-</span><span class="mf">3.2</span><span class="err">$</span> <span class="o">./</span><span class="n">with_example02</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="nb">type</span><span class="p">:</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;exceptions.ZeroDivisionError&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">value</span><span class="p">:</span> <span class="n">integer</span> <span class="n">division</span> <span class="ow">or</span> <span class="n">modulo</span> <span class="n">by</span> <span class="n">zero</span>
</span><span class='line'><span class="n">trace</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">traceback</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x1004a8128</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;./with_example02.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">19</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">sample</span><span class="o">.</span><span class="n">do_something</span><span class="p">()</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;./with_example02.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">15</span><span class="p">,</span> <span class="ow">in</span> <span class="n">do_something</span>
</span><span class='line'>    <span class="n">bar</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'><span class="ne">ZeroDivisionError</span><span class="p">:</span> <span class="n">integer</span> <span class="n">division</span> <span class="ow">or</span> <span class="n">modulo</span> <span class="n">by</span> <span class="n">zero</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Essentially, if there are exceptions being thrown from anywhere inside the block, the __exit__() function for the object is called. As you can see, the type, value and the stack trace associated with the exception thrown is passed to this function. In this case, you can see that there was a ZeroDivisionError exception being thrown. People implementing libraries can write code that clean up resources, close files etc. in their __exit__() functions.<br/>
實際上，在with後面的代碼塊拋出任何異常時，__exit__()方法被執行。正如例子所示，異常拋出時，與之關聯的type，value和stack trace傳給__exit__()方法，因此拋出的ZeroDivisionError異常被打印出來了。開發庫時，清理資源，關閉文件等等操作，都可以放在__exit__方法當中。</p>

<p>Thus, Python’s with is a nifty construct that makes code a little less verbose and makes cleaning up during exceptions a bit easier.<br/>
因此，Python的with語句是提供一個有效的機制，讓代碼更簡練，同時在異常產生時，清理工作更簡單。</p>

<p>I have put the code examples given here on <a href="https://github.com/sdqali/python_dojo/tree/master/with">Github</a>.<br/>
示例代碼可以在<a href="https://github.com/sdqali/python_dojo/tree/master/with">Github</a>上面找到。</p>

<p>譯註：本文原文見<a href="http://blog.sdqali.in/blog/2012/07/09/understanding-pythons-with/">Understanding Python&rsquo;s &ldquo;With&rdquo; Statement</a></p>

<p><a href="http://python.42qu.com/11155501">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fading away]]></title>
    <link href="http://www.aprilzephyr.com/blog/04022014/fading-away/"/>
    <updated>2014-04-02T20:21:50+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04022014/fading-away</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/fallingleaves.png"></p>

<p>Leaves sway down in sough late autumn winds, desolately, fading away, without one single sign.<!--more--></p>

<p>Fortunately trees&#8217; remaining vigor, notwithstanding in months&#8217; hibernation, new shoots would be pushing out after austere winters eventually.</p>

<p>Be hopeful and persistent, even through quite tough time, leastways&mdash;an opportunity to blossom.</p>

<p>&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 動態類型(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/04022014/python-dong-tai-lei-xing/"/>
    <updated>2014-04-02T15:15:39+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04022014/python-dong-tai-lei-xing</id>
    <content type="html"><![CDATA[<p>Python中只有一個賦值模型</p>

<h4>1. 缺少類型聲明語句的情況</h4>

<p>在Python中，類型是在運行過程中自動決定的，而不是通過代碼聲明。這意味著沒有必要事聲明變量。只要記住，這個概念實質上對變量，對象和它們之間的關系都適用。那麽這個概念也容易理解並掌握。</p>

<p><strong>A 變量，對象和引用</strong><br/>
變量創建：一個變量，當代碼第一次給它賦值時它就被創建了。之後的賦值將會改變已創建的變量名的值。Python在代碼運行之前先檢測變量名，可以當成是最初的賦值創建變量。<!--more--><br/>
變量類型：變量永遠不會有任何的它關聯的類型信息或約束。類型的概念是存在於對象中而不是變量中。變量原本是通用的。它只是在一個特定的時間點，簡單地引用了一個特定的對像而已。<br/>
變量的使用：當變量出現在表達式中時，它會馬上被當前引用的對像所代替，無論這個對象是什麽類型。<br/>
此外，所有的變量都必須在其使用前明確地賦值。使用未賦值的變量會產生錯誤。<br/>
<code>&gt;&gt;&gt;a=3</code></p>

<p>在概念上說，Python將執行三個不同的步驟去完成這個請求。<br/>
1) 創建一個對象來代表值3<br/>
2) 創建一個變量a，如果它還沒有創建的話<br/>
3) 將變量與新的對象3連接</p>

<p>在python中從變量到對象的連接稱作引用。引用是一種關系，以內存中的指針形式實現。<br/>
* 變量 是一個系統表的元素，擁有指向對象的連接空間。<br/>
* 對象 是被分配的一塊內存，有足夠的空間去表現它們所代表的值。<br/>
* 引用 是自動形成的從變量到對象的指針。</p>

<p>每一個對象都用兩個標準的頭部信息：一個類型標誌符去標識這個對象的類型，以及一個引用的計數器，用來決定是不是可以回收這個對象。</p>

<p><strong>B 類型屬於對象，而不是變量</strong><br/>
Python中的類型是與對象相關聯的，而不是和變量關聯。<br/>
變量沒有類型，變量指向對象。對象有類型，知道自己的類型，每個對象都包含了一個頭部信息，其中標記了這個對象的類型。</p>

<p><strong>C 對象的垃圾收集</strong><br/>
對象生命結束時發生了什麽變化？<br/>
每當一個變量名被賦與了一個新的對象，之前的那個對象占用的空間就會被收回（如果它沒有被其他變量名和對象所引用).這種自動回收對象空間的技術稱作垃圾收集。<br/>
在內部，Python是通過保持用每個對象中的計數器記錄引用指到這個對象上的次數來完成這一功能。一旦（並精確在同一時間）這個計數器被設置為零，這個對象的內存空間就會自動收回。垃圾收集最直接的，可感受到的好處就是這意味著可以在腳本中任意使用對象而不需要考慮釋放內存空間。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; x=42
</span><span class='line'>&gt;&gt;&gt; id(x)
</span><span class='line'>674748828
</span><span class='line'>&gt;&gt;&gt; x="cli"
</span><span class='line'>&gt;&gt;&gt; id(x)    
</span><span class='line'>676367648</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>2. 共享引用</h4>

<p>上面所講都是單個變量被賦值引用了多個對象的情況。現在，在交互模式下，引入另一個變量，並看一下變量名和對象的變化。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; a=10
</span><span class='line'>&gt;&gt;&gt; b=a 
</span><span class='line'>&gt;&gt;&gt; id(a)
</span><span class='line'>674749212
</span><span class='line'>&gt;&gt;&gt; id(b)
</span><span class='line'>674749212</span></code></pre></td></tr></table></div></figure>


<p>
第二行會使用python創建變量b。使用的是變量a,並且它在這裏沒有被賦值，所以它被替換成其應用的對象10，從而b也成為這個對象的一個引用。實際效果就是變量a和b都引用相同的對象（也就是說指向了相同的內存空間。在Python中稱作是共享引用&mdash;多個變量名應用了同一個對象。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; a=10 
</span><span class='line'>&gt;&gt;&gt; b=a  
</span><span class='line'>&gt;&gt;&gt; a='cli'
</span><span class='line'>&gt;&gt;&gt; id(a) 
</span><span class='line'>676367648
</span><span class='line'>&gt;&gt;&gt; id(b)
</span><span class='line'>674749212</span></code></pre></td></tr></table></div></figure>


<p>
變量a改變了，但是不影響變量b.這完全可以說明變量b是指向對象10內存空間的。</p>

<p>在ptyhon中，變量總是一個指向對象的指針，而不是可以改變的內存區域的標簽。給一變量賦一個新的值，並不是替換了原始的對象，而是讓這個變量去引用完全不同的一個對象。實際的效果就是對一個變量賦值，僅僅會影響那個被賦值的變量。</p>

<p><strong>A 共享引用和在原處修改</strong><br/>
有一些對象和類型確實會在實地改變對象。例如，在一個列表中對一個偏移進行賦值確實會改變這個列表對象，而不是生成一個新的列表對象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; T1=[11,12,13]
</span><span class='line'>&gt;&gt;&gt; T2=T1
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T1=22
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>22
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>這個和先前一樣T1改變了T2沒有改變，T2改變也不影響T1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; T1=[11,12,13]
</span><span class='line'>&gt;&gt;&gt; T2=T1
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2[1]=33     
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[33, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[33, 12, 13]</span></code></pre></td></tr></table></div></figure>


<p>
發現T2改變了，T1也跟這改變了<br/>
同樣T1改變了，T2也改變了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; T1[1]=99  
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[33, 99, 13]
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[33, 99, 13]</span></code></pre></td></tr></table></div></figure>


<p>
這裏T1沒有改變，改變了T1所引用對象的一個元素。這類修改會覆蓋列表對象中的某部分。因為這個列表對象是與其他對象共享的（被其他對象引用），那麽一個像這樣在原處的改變不僅僅會對T1有影響。必須意識到當做了這樣的修改，它會影響程序的其他部分。</p>

<p>如果不想要這樣的現象發生，需要Python拷貝對象，而不是創建引用。方法包括內置列表函數以及標準庫的copy模塊，最常用的辦法就是從頭到尾的分片T1[:]</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; T1=[11,12,13]
</span><span class='line'>&gt;&gt;&gt; T2=T1[:]
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T1[0]=99
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[99, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; id(T1)
</span><span class='line'>676366604
</span><span class='line'>&gt;&gt;&gt; id(T2)
</span><span class='line'>675542060</span></code></pre></td></tr></table></div></figure>


<p>
T1和T2指向不同的對象，所以不會相互影響。<br/>
註意：這種分片技術不會引用在其他的可變的核心類型上（字典，因為它們不是序列），對字典應該使用D.copy（）方法.而且，註意標準庫中的copy模塊有一個通用的拷貝任意對象的調用，也有一個拷貝嵌套對象的結構的調用.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; X={'name':'cli','age':27}  
</span><span class='line'>&gt;&gt;&gt; import copy
</span><span class='line'>&gt;&gt;&gt; Y=copy.copy(X)
</span><span class='line'>&gt;&gt;&gt; X
</span><span class='line'>{'age': 27, 'name': 'cli'}
</span><span class='line'>&gt;&gt;&gt; Y
</span><span class='line'>{'age': 27, 'name': 'cli'}
</span><span class='line'>&gt;&gt;&gt; id(X)
</span><span class='line'>676370468
</span><span class='line'>&gt;&gt;&gt; id(Y)
</span><span class='line'>676414436
</span><span class='line'>&gt;&gt;&gt; X={'name':{'FirstName':'cli','LastName':'cli'},'age':27}    
</span><span class='line'>&gt;&gt;&gt; X
</span><span class='line'>{'age': 27, 'name': {'LastName': 'cli', 'FirstName': 'cli'}}
</span><span class='line'>&gt;&gt;&gt; Y=copy.copy(X)
</span><span class='line'>&gt;&gt;&gt; Y
</span><span class='line'>{'age': 27, 'name': {'LastName': 'cli', 'FirstName': 'cli'}}
</span><span class='line'>&gt;&gt;&gt; Z=copy.deepcopy(X) 
</span><span class='line'>&gt;&gt;&gt; Z
</span><span class='line'>{'age': 27, 'name': {'LastName': 'cli', 'FirstName': 'cli'}}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>B 共享引用和相等</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; x=33
</span><span class='line'>&gt;&gt;&gt; x='cli'</span></code></pre></td></tr></table></div></figure>


<p>
因為Python緩存並復用了小的整數和小的字符串，就像前文提到的那樣，這裏對象33也許不像前期所說的被收回，相反，它將可能仍保持在一個系統表中，等待下一次你的代碼生成另一個33來利用。盡快如此，大多數種類的對象都會在不再引用時馬上回收。對於那些不會被回收的，緩沖機制與代碼並沒有什麽關系。</p>

<p>判斷是否相等</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; L=[1,2,3]
</span><span class='line'>&gt;&gt;&gt; M=L
</span><span class='line'>&gt;&gt;&gt; L==M
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; L is M
</span><span class='line'>True</span></code></pre></td></tr></table></div></figure>


<p>
==檢查對象是否有相同的值。 is操作符，檢查對象的同一性。如果兩個變量名精準地指向同一個對象，它會返回True。所以這是一種更嚴格的相等測試。<br/>
實際上,is只是比較現實引用的指針。所以如果必要的話是代碼中檢測共享引用的一種方法。如果變量名引用值相等。但是為不同的對象，它的返回值將是False.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; L=[1,2,3]
</span><span class='line'>&gt;&gt;&gt; M=[1,2,3]
</span><span class='line'>&gt;&gt;&gt; L==M
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; L is M
</span><span class='line'>False
</span><span class='line'>&gt;&gt;&gt; id(L)
</span><span class='line'>676367788
</span><span class='line'>&gt;&gt;&gt; id(M)
</span><span class='line'>676367724</span></code></pre></td></tr></table></div></figure>


<p>
通過id()函數可以看到兩個變量指向不同的對象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; X=33
</span><span class='line'>&gt;&gt;&gt; Y=33
</span><span class='line'>&gt;&gt;&gt; X==Y
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; X is Y
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; id(X)
</span><span class='line'>674748936
</span><span class='line'>&gt;&gt;&gt; id(Y)
</span><span class='line'>674748936</span></code></pre></td></tr></table></div></figure>


<p>
這個is測試返回True因為小的整數和字符串被緩存被復用了。
如果想更進一步了解，可以向Python查詢一個對象應用的次數：在sys模塊中的getrefcount函數返回對象應用的次數。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import sys
</span><span class='line'>&gt;&gt;&gt; sys.getrefcount(33)
</span><span class='line'>13
</span><span class='line'>&gt;&gt;&gt; sys.getrefcount(1) 
</span><span class='line'>427
</span><span class='line'>&gt;&gt;&gt; sys.getrefcount(00)
</span><span class='line'>296
</span><span class='line'>&gt;&gt;&gt; sys.getrefcount(99)
</span><span class='line'>6</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><a href="http://ipseek.blog.51cto.com/1041109/786518">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[網頁重定向的方法(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/04022014/wang-ye-zhong-ding-xiang-de-fang-fa/"/>
    <updated>2014-04-02T10:58:43+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04022014/wang-ye-zhong-ding-xiang-de-fang-fa</id>
    <content type="html"><![CDATA[<h4>1. 使用HTTP通訊協定301 Moved Permanently來完成轉導網址(永久轉址)</h4>

<p><em>建議使用，不會對SEO有不良影響</em></p>

<h5>PHP程式範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nx">header</span><span class="p">(</span><span class="err">“</span><span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">301</span> <span class="nx">Moved</span> <span class="nx">Permanently</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">    header(“Location: http://www.new-url.com/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;p&gt;The document has moved &lt;a href=&quot;http://www.new-url.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <!--more-->
註<br/>
1) 使用者的瀏覽器必須根據HTTP header的Location欄位值(稱做URI)來轉導網址。<br/>
2) 除非Request Method是HEAD，不然伺服器端回覆的訊息內必須包含一短的新網址的連結(hyperlink)資訊。</p>

<h5>ASP程式範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;%@</span> <span class="nx">Language</span><span class="o">=</span><span class="nx">VBScript</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>    <span class="nx">Response</span><span class="o">.</span><span class="nx">Status</span><span class="o">=</span><span class="s2">&quot;301 Moved Permanently&quot;</span>
</span><span class='line'>    <span class="nx">Response</span><span class="o">.</span><span class="nx">AddHeader</span> <span class="err">“</span><span class="nx">Location</span><span class="s2">&quot;, &quot;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="k">new</span><span class="o">-</span><span class="nx">url</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    Response.End</span>
</span><span class='line'><span class="s2">%&gt;</span>
</span><span class='line'><span class="s2">&lt;p&gt;The document has moved &lt;a href=&quot;</span><span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="k">new</span><span class="o">-</span><span class="nx">url</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="s2">&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>ASP.NET程式範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">runat</span><span class="o">=</span><span class="s2">&quot;server&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="nx">void</span> <span class="nx">Page_Load</span><span class="p">(</span><span class="nx">object</span> <span class="nx">sender</span><span class="p">,</span> <span class="nx">System</span><span class="o">.</span><span class="nx">EventArgs</span> <span class="nx">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">Response</span><span class="o">.</span><span class="nx">Status</span> <span class="o">=</span> <span class="err">“</span><span class="mi">301</span> <span class="nx">Moved</span> <span class="nx">Permanently</span><span class="s2">&quot;;</span>
</span><span class='line'><span class="s2">    Response.AddHeader(“Location&quot;</span><span class="p">,</span><span class="s2">&quot;http://www.new-url.com/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">The</span> <span class="nx">document</span> <span class="nx">has</span> <span class="nx">moved</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://www.new-url.com/&quot;</span><span class="o">&gt;</span><span class="nx">here</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>在 .htaccess/httpd.conf檔案中設定—轉整domain</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Options</span> <span class="o">+</span><span class="nx">FollowSymLinks</span>
</span><span class='line'><span class="nx">RewriteEngine</span> <span class="nx">on</span>
</span><span class='line'><span class="nx">RewriteRule</span> <span class="o">^</span><span class="p">(</span><span class="o">.*</span><span class="p">)</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="k">new</span><span class="o">-</span><span class="nx">domain</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="err">$</span><span class="mi">1</span> <span class="p">[</span><span class="nx">R</span><span class="o">=</span><span class="mi">301</span><span class="p">,</span><span class="nx">L</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>在 .htaccess/httpd.conf檔案中設定—轉到新的www.</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Options</span> <span class="o">+</span><span class="nx">FollowSymlinks</span>
</span><span class='line'><span class="nx">RewriteEngine</span> <span class="nx">on</span>
</span><span class='line'><span class="nx">RewriteCond</span> <span class="o">%</span><span class="p">{</span><span class="nx">http_host</span><span class="p">}</span> <span class="o">^</span><span class="nx">old</span><span class="o">-</span><span class="nx">domain</span><span class="o">.</span><span class="nx">com</span> <span class="p">[</span><span class="nx">NC</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RewriteRule</span> <span class="o">^</span><span class="p">(</span><span class="o">.*</span><span class="p">)</span><span class="err">$</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="k">new</span><span class="o">-</span><span class="nx">domain</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="err">$</span><span class="mi">1</span> <span class="p">[</span><span class="nx">R</span><span class="o">=</span><span class="mi">301</span><span class="p">,</span><span class="nx">NC</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>2. 使用HTTP/1.1通訊協定302 Found來完成轉導網址</h4>

<p><em>不建議使用，會對新網站SEO有不良影響</em></p>

<h5>PHP程式範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nx">header</span><span class="p">(</span><span class="err">“</span><span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">302</span> <span class="nx">Found</span><span class="s2">&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    header(“Location: http://www.new-url.com/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;p&gt;The document has moved &lt;a href=&quot;http://www.new-url.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>(…其他ASP, ASP.NET程式及設定.htaccess/httpd.conf方法，此處略…)</p>

<p>註<br/>
1) 302，在HTTP/1.0是『Moved Temporarily』；HTTP/1.1是『Found』，會根據HTTP header的Location欄位值(稱做URI)來轉導網址。但是很多網路上的文章會直接稱302是Moved Temporatily。<br/>
2) 除非Request Method是HEAD，不然伺服器端回覆的訊息內必須包含一短的新網址的連結(hyperlink)資訊。<br/>
3) HTTP 1.1中增訂了『307 Temporary Redirect』，307碼時只會根據GET Request轉導網址。<br/>
4) 更多的HTTP 302細節和307會被再增訂出來的原因<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">請參考</a>。</p>

<h4>3. HTML的refresh meta tag來轉導網址</h4>

<p><em>非常不建議使用，會對新網站SEO有不良影響。有些文章寫說要用時最好秒數設定大於10秒以避免對頁面的SEO不利。</em></p>

<h5>在HTML檔案的HEAD中，範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;refresh&quot;</span> <span class="na">content=</span><span class="s">&quot;0;url=http://www.new-url.com/&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>4. 用JavaScript來達到轉導網址(放在 HTML的<head>…</head>或<body>…<body>中</h4>

<p><em>因為搜尋引擎的bot一般都不理會JavaScript，所以做什麼動作不會被檢查。這意味著要實做『點擊計算(click counting)後再轉導到目的網址的話，用這個方法比較好(302或refresh都是不好的方法)』。如果使用者按瀏覽器的『上一頁』按鈕，不會跳回轉導頁面。</em></p>

<h5>直接在HTML的HEAD中用轉導網址JavaScript範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;JavaScript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="err">–</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="err">“</span><span class="nx">http</span><span class="o">:</span><span class="c1">//www.new-url.com&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//–&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>JavaScript內容同上例，但是把它放到外部的一個 .js 檔案，然後<head>…</head>中只要寫:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;JavaScript&quot;</span> <span class="na">src=</span><span class="s">&quot;redirect.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>也是使用JavaScript，但是額外透過『表單』來完成:</h5>

<p><em>因為搜尋引擎的bot一般都不理會『表單』，所以做什麼動作不會被檢查。</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;JavaScript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="err">–</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">myform</span><span class="p">.</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="c1">//–&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;myform&quot;</span> <span class="na">action=</span><span class="s">&quot;http://www.new-url.com/&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>額外討論:</h4>

<ol>
<li>301/302有時會被一些人用作旁門走道方法，在玩『PR劫持』(如<a href="http://www.seozac.com/google/pr-hijack/">這篇文章</a>所述)，更多的一些手法討論請看<a href="http://www.loriswebs.com/hijacking_web_pages.html">這篇文章</a>或用 hijack 當 KeyWord 去查查。</li>
<li>302在之前會造成bot誤以為是轉導到的網站在惡搞，而將轉導到的網站從索引中除名。所以會變得無法防止別人以此方法攻擊自己的 URL。現或許已更正。(詳情請看<a href="http://www.tonyspencer.com/2004/12/10/tracker2php-pagejacking-via-http-302-redirect-google-bug/">這裡</a>)</li>
<li>當然，refresh也能如上述302一樣去惡搞別人的網站。</li>
</ol>


<p><a href="http://rental.zhupiter.com/postshow_184_1_1.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Testing]]></title>
    <link href="http://www.aprilzephyr.com/blog/04012014/software-testing/"/>
    <updated>2014-04-01T16:24:56+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04012014/software-testing</id>
    <content type="html"><![CDATA[<h3>1. Overview</h3>

<p>Software testing provide an objective, independent view to allow the business to appreciate and understand the risks of software, product or service implementation. Test techniques include, but are not limited to the process of executing a program or application with the intent of finding software bugs (errors or other defects).<!--more--></p>

<p>Software testing can be stated as the process of validating and verifying that a computer program/application/product:<br/>
* meets the requirements that guided its design and development,<br/>
* works as expected,<br/>
* can be implemented with the same characteristics,
and satisfies the needs of stakeholders.</p>

<p>Software testing, depending on the testing method employed, can be implemented at any time in the software development process.</p>

<p>Testing can never completely identify all the defects within software. Instead, it furnishes a criticism or comparison that compares the state and behavior of the product against oracles—principles or mechanisms by which someone might recognize a problem. These oracles may include (but are not limited to) specifications, contracts, comparable products, past versions of the same product, inferences about intended or expected purpose, user or customer expectations, relevant standards, applicable laws, or other criteria.</p>

<p>A primary purpose of testing is to detect software failures so that defects may be discovered and corrected. Testing cannot establish that a product functions properly under all conditions but can only establish that it does not function properly under specific conditions. The scope of software testing often includes examination of code as well as execution of that code in various environments and conditions as well as examining the aspects of code: does it do what it is supposed to do and do what it needs to do. A testing organization may be separate from the development team. There are various roles for testing team members. Information derived from software testing may be used to correct the process by which software is developed.</p>

<p>Software testing is the process of attempting to make the assessment that whether the software product will be acceptable to its end users, its target audience, its purchasers and other stakeholders..</p>

<h4>A Defects and failures</h4>

<p>Not all software defects are caused by coding errors. One common source of expensive defects is requirement gaps, e.g., unrecognized requirements which result in errors of omission by the program designer. Requirement gaps can often be non-functional requirements such as testability, scalability, maintainability, usability, performance, and security.</p>

<h4>B Input combinations and preconditions</h4>

<p>A fundamental problem with software testing is that testing under all combinations of inputs and preconditions (initial state) is not feasible. More significantly, non-functional dimensions of quality (how it is supposed to be versus what it is supposed to do)—usability, scalability, performance, compatibility, reliability—can be highly subjective; something that constitutes sufficient value to one person may be intolerable to another.</p>

<p>Software developers can&rsquo;t test everything, but they can use combinatorial test design to identify the minimum number of tests needed to get the coverage they want.</p>

<h3>2. Testing methods</h3>

<h4>A Static vs. dynamic testing</h4>

<p>Reviews, walkthroughs, or inspections are referred to as static testing, whereas actually executing programmed code with a given set of test cases is referred to as dynamic testing.</p>

<p>Static testing involves verification, whereas dynamic testing involves validation.</p>

<h4>B The box approach</h4>

<p><em>1) White-box testing</em><br/>
White-box testing (also known as clear box testing, glass box testing, transparent box testing and structural testing) tests internal structures or workings of a program, as opposed to the functionality exposed to the end-user. In white-box testing an internal perspective of the system, as well as programming skills, are used to design test cases. The tester chooses inputs to exercise paths through the code and determine the appropriate outputs. This is analogous to testing nodes in a circuit.</p>

<p>While white-box testing can be applied at the unit, integration and system levels of the software testing process, it is usually done at the unit level. It can test paths within a unit, paths between units during integration, and between subsystems during a system–level test. Though this method of test design can uncover many errors or problems, it might not detect unimplemented parts of the specification or missing requirements.</p>

<p>Techniques used in white-box testing include:<br/>
* API testing (application programming interface) – testing of the application using public and private APIs<br/>
* Code coverage – creating tests to satisfy some criteria of code coverage (e.g., the test designer can create tests to cause all statements in the program to be executed at least once)<br/>
* Fault injection methods – intentionally introducing faults to gauge the efficacy of testing strategies<br/>
* Mutation testing methods<br/>
* Static testing methods</p>

<p>Code coverage tools can evaluate the completeness of a test suite that was created with any method, including black-box testing. This allows the software team to examine parts of a system that are rarely tested and ensures that the most important function points have been tested. Code coverage as a software metric can be reported as a percentage for:<br/>
* Function coverage, which reports on functions executed<br/>
* Statement coverage, which reports on the number of lines executed to complete the test</p>

<p>100% statement coverage ensures that all code paths, or branches (in terms of control flow) are executed at least once. This is helpful in ensuring correct functionality, but not sufficient since the same code may process different inputs correctly or incorrectly.</p>

<p><em>2) Black-box testing</em><br/>
Black-box testing treats the software as a &ldquo;black box&rdquo;, examining functionality without any knowledge of internal implementation. The testers are only aware of what the software is supposed to do, not how it does it. Black-box testing methods include: equivalence partitioning, boundary value analysis, all-pairs testing, state transition tables, decision table testing, fuzz testing, model-based testing, use case testing, exploratory testing and specification-based testing.</p>

<p>One advantage of the black box technique is that no programming knowledge is required. Whatever biases the programmers may have had, the tester likely has a different set and may emphasize different areas of functionality.</p>

<p>This method of test can be applied to all levels of software testing: unit, integration, system and acceptance. It typically comprises most if not all testing at higher levels, but can also dominate unit testing as well.</p>

<p><em>3) Grey-box testing</em><br/>
Grey-box testing involves having knowledge of internal data structures and algorithms for purposes of designing tests, while executing those tests at the user, or black-box level. The tester is not required to have full access to the software&rsquo;s source code. Manipulating input data and formatting output do not qualify as grey-box, because the input and output are clearly outside of the &ldquo;black box&rdquo; that we are calling the system under test. This distinction is particularly important when conducting integration testing between two modules of code written by two different developers, where only the interfaces are exposed for test.</p>

<p>Typically, a grey-box tester will be permitted to set up an isolated testing environment with activities such as seeding a database. The tester can observe the state of the product being tested after performing certain actions such as executing SQL statements against the database and then executing queries to ensure that the expected changes have been reflected. Grey-box testing implements intelligent test scenarios, based on limited information. This will particularly apply to data type handling, exception handling, and so on.</p>

<h3>3. Testing levels</h3>

<h4>A Unit testing</h4>

<p>Unit testing, also known as component testing, refers to tests that verify the functionality of a specific section of code, usually at the function level. In an object-oriented environment, this is usually at the class level, and the minimal unit tests include the constructors and destructors.</p>

<p>Unit testing aims to eliminate construction errors before code is promoted to QA; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and QA process.</p>

<p>Depending on the organization&rsquo;s expectations for software development, unit testing might include static code analysis, data flow analysis metrics analysis, peer code reviews, code coverage analysis and other software verification practices.</p>

<h4>B Integration testing</h4>

<p>Integration testing is any type of software testing that seeks to verify the interfaces between components against a software design. Software components may be integrated in an iterative way or all together.</p>

<p>Integration testing works to expose defects in the interfaces and interaction between integrated components (modules). Progressively larger groups of tested software components corresponding to elements of the architectural design are integrated and tested until the software works as a system.</p>

<h4>C Component interface testing</h4>

<p>The practice of component interface testing can be used to check the handling of data passed between various units, or subsystem components, beyond full integration testing between those units. The data being passed can be considered as &ldquo;message packets&rdquo; and the range or data types can be checked, for data generated from one unit, and tested for validity before being passed into another unit. Tests can include checking the handling of some extreme data values while other interface variables are passed as normal values. Unusual data values in an interface can help explain unexpected performance in the next unit. Component interface testing is a variation of black-box testing, with the focus on the data values beyond just the related actions of a subsystem component.</p>

<h4>D System testing</h4>

<p>System testing, or end-to-end testing, tests a completely integrated system to verify that it meets its requirements. For example, a system test might involve testing a logon interface, then creating and editing an entry, plus sending or printing results, followed by summary processing or deletion (or archiving) of entries, then logoff.</p>

<p>In addition, the software testing should ensure that the program, as well as working as expected, does not also destroy or partially corrupt its operating environment or cause other processes within that environment to become inoperative (this includes not corrupting shared memory, not consuming or locking up excessive resources and leaving any parallel processes unharmed by its presence).</p>

<h4>E Acceptance testing</h4>

<p>At last the system is delivered to the user for Acceptance testing.</p>

<h3>4. Testing types</h3>

<h4>A Installation testing</h4>

<p>An installation test assures that the system is installed correctly and working at actual customer&rsquo;s hardware.</p>

<h4>B Compatibility testing</h4>

<p>A common cause of software failure (real or perceived) is a lack of its compatibility with other application software, operating systems (or operating system versions), or target environments that differ greatly from the original (such as a terminal or GUI application intended to be run on the desktop now being required to become a web application, which must render in a web browser).  This results in the unintended consequence that the latest work may not function on earlier versions of the target environment, or on older hardware that earlier versions of the target environment was capable of using.</p>

<h4>C Smoke and sanity testing</h4>

<p>Sanity testing determines whether it is reasonable to proceed with further testing. Smoke testing consists of minimal attempts to operate the software, designed to determine whether there are any basic problems that will prevent it from working at all. Such tests can be used as build verification test.</p>

<h4>D Regression testing</h4>

<p>Regression testing focuses on finding defects after a major code change has occurred. Specifically, it seeks to uncover software regressions, as degraded or lost features, including old bugs that have come back. Such regressions occur whenever software functionality that was previously working, correctly, stops working as intended. Typically, regressions occur as an unintended consequence of program changes, when the newly developed part of the software collides with the previously existing code.</p>

<h4>E Acceptance testing</h4>

<h4>F Alpha testing</h4>

<p>Alpha testing is simulated or actual operational testing by potential users/customers or an independent test team at the developers&#8217; site. Alpha testing is often employed for off-the-shelf software as a form of internal acceptance testing, before the software goes to beta testing.</p>

<h4>G Beta testing</h4>

<p>Beta testing comes after alpha testing and can be considered a form of external user acceptance testing. Beta versions, of software are released to a limited audience outside of the programming team.</p>

<h4>H Functional vs non-functional testing</h4>

<p>Functional testing refers to activities that verify a specific action or function of the code. These are usually found in the code requirements documentation, although some development methodologies work from use cases or user stories.
Non-functional testing refers to aspects of the software that may not be related to a specific function or user action, such as scalability or other performance, behavior under certain constraints, or security. Testing will determine the breaking point, the point at which extremes of scalability or performance leads to unstable execution. Non-functional requirements tend to be those that reflect the quality of the product, particularly in the context of the suitability perspective of its users.</p>

<h4>I Destructive testing</h4>

<p>Destructive testing attempts to cause the software or a sub-system to fail. It verifies that the software functions properly even when it receives invalid or unexpected inputs, thereby establishing the robustness of input validation and error-management routines.</p>

<h4>J Software performance testing</h4>

<p>Performance testing is generally executed to determine how a system or sub-system performs in terms of responsiveness and stability under a particular workload. It can also serve to investigate, measure, validate or verify other quality attributes of the system, such as scalability, reliability and resource usage.</p>

<p>Load testing is primarily concerned with testing that the system can continue to operate under a specific load, whether that be large quantities of data or a large number of users. This is generally referred to as software scalability. The related load testing activity of when performed as a non-functional activity is often referred to as endurance testing. Volume testing is a way to test software functions even when certain components (for example a file or database) increase radically in size. Stress testing is a way to test reliability under unexpected or rare workloads. Stability testing (often referred to as load or endurance testing) checks to see if the software can continuously function well in or above an acceptable period.</p>

<p>The terms load testing, performance testing, scalability testing, and volume testing, are often used interchangeably. Real-time software systems have strict timing constraints.</p>

<h4>K Usability testing</h4>

<p>Usability testing is needed to check if the user interface is easy to use and understand. It is concerned mainly with the use of the application.</p>

<h4>L Accessibility testing</h4>

<h4>M Security testing</h4>

<h4>N Other testings</h4>

<h3>5. Testing process</h3>

<h4>A Traditional waterfall development model</h4>

<p>A common practice of software testing is that testing is performed by an independent group of testers after the functionality is developed, before it is shipped to the customer. This practice often results in the testing phase being used as a project buffer to compensate for project delays, thereby compromising the time devoted to testing.</p>

<p>Another practice is to start software testing at the same moment the project starts and it is a continuous process until the project finishes.</p>

<h4>B Agile or Extreme development model</h4>

<p>In contrast, some emerging software disciplines such as extreme programming and the agile software development movement, adhere to a &ldquo;test-driven software development&rdquo; model. In this process, unit tests are written first, by the software engineers (often with pair programming in the extreme programming methodology). Of course these tests fail initially; as they are expected to. Then as code is written it passes incrementally larger portions of the test suites. The test suites are continuously updated as new failure conditions and corner cases are discovered, and they are integrated with any regression tests that are developed. Unit tests are maintained along with the rest of the software source code and generally integrated into the build process (with inherently interactive tests being relegated to a partially manual build acceptance process). The ultimate goal of this test process is to achieve continuous integration where software updates can be published to the public frequently.</p>

<p>This methodology increases the testing effort done by development, before reaching any formal testing team. In some other development models, most of the test execution occurs after the requirements have been defined and the coding process has been completed.</p>

<h4>C Top-down and bottom-up</h4>

<p>Bottom Up Testing is an approach to integrated testing where the lowest level components (modules, procedures, and functions) are tested first, then integrated and used to facilitate the testing of higher level components. After the integration testing of lower level integrated modules, the next level of modules will be formed and can be used for integration testing. The process is repeated until the components at the top of the hierarchy are tested. This approach is helpful only when all or most of the modules of the same development level are ready. This method also helps to determine the levels of software developed and makes it easier to report testing progress in the form of a percentage.</p>

<p>Top Down Testing is an approach to integrated testing where the top integrated modules are tested and the branch of the module is tested step by step until the end of the related module.</p>

<h4>D A sample testing cycle</h4>

<ul>
<li>Requirement analysis</li>
<li>Test planning</li>
<li>Test development</li>
<li>Test execution</li>
<li>Test reporting</li>
<li>Test result analysis</li>
<li>Defect retesting</li>
<li>Regression testing</li>
<li>Test closure</li>
</ul>


<h3>6. Automated testing</h3>

<h4>A Testing tools</h4>

<ul>
<li>Program monitors, permitting full or partial monitoring of program code including:

<ul>
<li>Instruction set simulator, permitting complete instruction level monitoring and trace facilities</li>
<li>Program animation, permitting step-by-step execution and conditional breakpoint at source level or in machine code</li>
<li>Code coverage reports</li>
</ul>
</li>
<li>Formatted dump or symbolic debugging, tools allowing inspection of program variables on error or at chosen points</li>
<li>Automated functional GUI testing tools are used to repeat system-level tests through the GUI</li>
<li>Benchmarks, allowing run-time performance comparisons to be made</li>
<li>Performance analysis (or profiling tools) that can help to highlight hot spots and resource usage</li>
</ul>


<h4>B Measurement in software testing</h4>

<p>Usually, quality is constrained to such topics as correctness, completeness, security, but can also include more technical requirements as described under the ISO standard ISO/IEC 9126, such as capability, reliability, efficiency, portability, maintainability, compatibility, and usability.</p>

<p>There are a number of frequently used software metrics, or measures, which are used to assist in determining the state of the software or the adequacy of the testing.</p>

<h3>7. Testing artifacts</h3>

<ul>
<li>Test plan</li>
<li>Traceability matrix</li>
<li>Test case</li>
<li>Test script</li>
<li>Test suite</li>
<li>Test fixture or test data</li>
<li>Test harness</li>
</ul>


<h3>8. Related process</h3>

<h4>A Software verification and validation</h4>

<ul>
<li>Verification: Have we built the software right? (i.e., does it implement the requirements).</li>
<li>Validation: Have we built the right software? (i.e., do the requirements satisfy the customer).</li>
</ul>


<p>According to the IEEE Standard Glossary of Software Engineering Terminology:<br/>
* Verification is the process of evaluating a system or component to determine whether the products of a given development phase satisfy the conditions imposed at the start of that phase.<br/>
* Validation is the process of evaluating a system or component during or at the end of the development process to determine whether it satisfies specified requirements.</p>

<p>According to the ISO 9000 standard:<br/>
* Verification is confirmation by examination and through provision of objective evidence that specified requirements have been fulfilled.
* Validation is confirmation by examination and through provision of objective evidence that the requirements for a specific intended use or application have been fulfilled.</p>

<h4>B Software quality assurance</h4>

<p>Software testing is a part of the software quality assurance (SQA) process. In SQA, software process specialists and auditors are concerned for the software development process rather than just the artifacts such as documentation, code and systems. They examine and change the software engineering process itself to reduce the number of faults that end up in the delivered software: the so-called &ldquo;defect rate&rdquo;. What constitutes an &ldquo;acceptable defect rate&rdquo; depends on the nature of the software; A flight simulator video game would have much higher defect tolerance than software for an actual airplane. Although there are close links with SQA, testing departments often exist independently, and there may be no SQA function in some companies.</p>

<p>Software testing is a task intended to detect defects in software by contrasting a computer program&rsquo;s expected results with its actual results for a given set of inputs. By contrast, QA (quality assurance) is the implementation of policies and procedures intended to prevent defects from occurring in the first place.</p>

<p><a href="http://en.wikipedia.org/wiki/Software_testing">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 文件處理]]></title>
    <link href="http://www.aprilzephyr.com/blog/03312014/python-wen-jian-chu-li/"/>
    <updated>2014-03-31T17:48:17+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03312014/python-wen-jian-chu-li</id>
    <content type="html"><![CDATA[<p>python對文件的處理的兩個內建函數：<br/>
open()、file()，這個兩函數提供了初始化輸入\輸出（I\O）操作的通用接口。兩函數的功能相同。<br/>
基本用法：<br/>
file_object=open(filename, access_mode=&lsquo;r&rsquo;, buffering=-1）
file_object 是定義一個打開文件的對象<br/>
access_mode 是打開文件的模式；通常，文件使用模式  &lsquo;r&rsquo;,&lsquo;w&rsquo;,&lsquo;a&rsquo; 來打開，分別代表，讀取，寫入，追加。<br/>
&lsquo;r&rsquo; 模式打開已經存在的文件<br/>
&lsquo;w&rsquo; 模式打開的文件若存在則首先清空，再加入內容。<br/>
&lsquo;a&rsquo; 這個模式是追加內容到文件中<!--more--><br/>
註. &lsquo;b&rsquo; 模式這個是打開二進制文件，對於unix-like/unix類型的系統&#8217;b&#8217;模式是可有可無的。<br/>
buffering 訪問文件所采用的緩沖方式。其中0表示不緩沖，1表示只緩沖一行數據，任何其它大於1的值代表使用給定的值作為緩沖區大小。不給定此參數或者參數為負數都表示使用系統默認的緩沖機制。<br/>
使用open打開文件之後一定記得調用close()關閉文件。</p>

<p>常用的文件訪問方式如下：<br/>
r        以讀方式打開<br/>
rU或Ua   以讀方式打開同時提供通用換行符支持<br/>
w        以寫方式打開<br/>
a        以追加方式打開<br/>
r+       以讀寫方式打開<br/>
w+       以讀寫方式打開<br/>
a+       以讀寫方式打開</p>

<p>文件的輸入：<br/>
python中有三個方法來處理文件內容的輸入：<br/>
read() 一次讀取全部的文件內容。<br/>
readline() 每次讀取文件的一行。<br/>
readlines() 讀取文件的所有行，返回一個字符串列表。</p>

<p>寫數據：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">file_object</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;thefile.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">file_object</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">all_the_text</span><span class="p">)</span>
</span><span class='line'><span class="n">file_object</span><span class="o">.</span><span class="n">close</span><span class="p">(</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>寫入多行：<br/>
<code>file_object.writelines(list_of_text_strings)</code></p>

<p>seek(offset,where):  默認值where=0表示從起始位置移動&#8221;offset&#8221;個字節，where=1表示從當前位置移動&#8221;offset&#8221;個字節，where=2表示從結束位置移動&#8221;offset&#8221;個字節。當有換行時，會被換行截斷。seek()無返回值，故值為None。</p>

<p>tell():  文件的當前位置,即tell是獲得文件指針位置，受seek、readline、read、readlines影響，不受truncate影響。</p>

<p>truncate(n):  從文件的首行首字符開始截斷，截斷文件為n個字符；無n表示從當前位置起截斷；截斷之後n後面的所有字符被刪除。其中win下的換行代表2個字符大小。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="n">fso</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;f:</span><span class="se">\\</span><span class="s">a.txt&quot;</span><span class="p">,</span><span class="s">&#39;w+&#39;</span><span class="p">)</span>    <span class="c">#以w+方式，並非a方式打開文件，故文件原內容被清空</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>    <span class="c">#文件原內容被清空，故此時tell()=0</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;abcde</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>  <span class="c">#寫入文件abcde\n，因為換行\n占兩個字符，故共寫入7個字符</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>  <span class="c">#此時tell()=7</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;fghwm&quot;</span><span class="p">)</span>  <span class="c">#又寫入文件fghwm，故此時文件共寫入7+5 =142個字符</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>  <span class="c">#此時tell()=12 </span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c">#從起始位置即文件首行首字符開始移動1個字符</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>   <span class="c">#此時tell() =1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span>  <span class="n">fso</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>  <span class="c">#讀取當前行，即文件的第1行，但是從第二個字符(tell()+1)開始讀，結果為:bcde。&#39;若換成for讀取整個文件或read讀取整個文件則結果為bcdefghwm     </span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>   <span class="c">#因為readline此時tell() =7,</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">truncate</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>  <span class="c">#從寫入後文件的首行首字符開始階段，截斷為8個字符，即abcde\nf，即文件的內容為：abcde\nf</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>   <span class="c">#tell() 依舊為7,並為受truncate(8)影響，但是此時文件內容為abcde\nf</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span>  <span class="n">fso</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>  <span class="c">#從tell()+1=8開始讀取，讀取當前行內容：f</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python os &amp; sys模塊]]></title>
    <link href="http://www.aprilzephyr.com/blog/03312014/python-os-sys/"/>
    <updated>2014-03-31T16:06:01+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03312014/python-os-sys</id>
    <content type="html"><![CDATA[<p><strong>1. os模塊</strong><br/>
Python os模塊包含普遍的操作系統功能。如果你希望你的程序能夠與平臺無關的話，這個模塊是尤為重要的。</p>

<p>1) os.name<br/>
輸出字符串指示正在使用的平臺。如果是window 則用&#8217;nt&#8217;表示，對於Linux/Unix用戶，它是&#8217;posix&#8217;。<br/>
2) os.mkdir(path [,mode=0777])<br/>
創建目錄<br/>
3) os.rmdir()<br/>
刪除目錄<!--more--><br/>
4) os.mkdirs()<br/>
創建多層目錄，類似系統makedir -p<br/>
5) os.removedirs()<br/>
刪除多層目錄，每層都是空的，除了要刪除的目錄外。<br/>
6) os.getcwd()<br/>
函數得到當前工作目錄，即當前Python腳本工作的目錄路徑。<br/>
7) os.listdir()<br/>
返回指定目錄下的所有文件和目錄名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;.bash_history&#39;</span><span class="p">,</span> <span class="s">&#39;.bundler&#39;</span><span class="p">,</span> <span class="s">&#39;.CFUserTextEncoding&#39;</span><span class="p">,</span> <span class="s">&#39;.config&#39;</span><span class="p">,</span> <span class="s">&#39;.DS_Store&#39;</span><span class="p">,</span> <span class="s">&#39;.gem&#39;</span><span class="p">,</span> <span class="s">&#39;.gitconfig&#39;</span><span class="p">,</span> <span class="s">&#39;.matplotlib&#39;</span><span class="p">,</span> <span class="s">&#39;.ssh&#39;</span><span class="p">,</span> <span class="s">&#39;.Trash&#39;</span><span class="p">,</span> <span class="s">&#39;.Trash-500&#39;</span><span class="p">,</span> <span class="s">&#39;.vim&#39;</span><span class="p">,</span> <span class="s">&#39;.viminfo&#39;</span><span class="p">,</span> <span class="s">&#39;Applications&#39;</span><span class="p">,</span> <span class="s">&#39;Applications (Parallels)&#39;</span><span class="p">,</span> <span class="s">&#39;Desktop&#39;</span><span class="p">,</span> <span class="s">&#39;Documents&#39;</span><span class="p">,</span> <span class="s">&#39;Downloads&#39;</span><span class="p">,</span> <span class="s">&#39;Library&#39;</span><span class="p">,</span> <span class="s">&#39;Movies&#39;</span><span class="p">,</span> <span class="s">&#39;Music&#39;</span><span class="p">,</span> <span class="s">&#39;octopress&#39;</span><span class="p">,</span> <span class="s">&#39;Pictures&#39;</span><span class="p">,</span> <span class="s">&#39;Public&#39;</span><span class="p">,</span> <span class="s">&#39;PycharmProjects&#39;</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\xe7\x99\xbe\xe5\xba\xa6\xe4\xba\x91\xe5\x90\x8c\xe6\xad\xa5\xe7\x9b\x98</span><span class="s">&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
8) os.remove()<br/>
刪除一個文件。<br/>
9) os.system()<br/>
運行shell命令。<br/>
10) os.sep<br/>
可以取代操作系統特定的路徑分隔符。<br/>
11) os.linesep<br/>
給出當前平台使用的行終止符。<br/>
12) os.path.split()<br/>
函數返回一個路徑的目錄名和文件名<br/>
13) os.path.isfile()和os.path.isdir()函數<br/>
分別檢驗給出的路徑是一個文件還是目錄，給出True或者False。<br/>
14) os.path.exists()<br/>
檢驗給出的路徑是否真實的存在，給出True或者False。<br/>
15) os.path.abspath(name)<br/>
獲得絕對路徑。<br/>
16) os.path.normpath(path)<br/>
規範path的字符串形式。<br/>
17) os.path.getsize(name)<br/>
獲得文件大小，如果name是目錄返回0L。<br/>
18) os.path.splitext()<br/>
分離文件名與擴展名。<br/>
19) os.path.join(path,name)<br/>
連接目錄與文件名或目錄。<br/>
20) os.path.basename(path)<br/>
返回文件名。<br/>
21) os.path.dirname(path)<br/>
返回文件路徑。</p>

<p><strong>2. sys模塊</strong><br/>
1) sys.argv<br/>
命令行參數List，第一個元素是程序本身路徑。<br/>
2) sys.modules.keys()<br/>
返回所有已經導入的模塊列表。<br/>
3) sys.exc_info()<br/>
獲取當前正在處理的異常類,exc_type、4) exc_value、exc_traceback當前處理的異常詳細信息。<br/>
5) sys.exit(n)<br/>
退出程序，正常退出時exit(0)。<br/>
6) sys.hexversion<br/>
獲取Python解釋程序的版本值，16進制格式如：0x020403F0。<br/>
7) sys.version<br/>
獲取Python解釋程序的版本信息。<br/>
8) sys.maxint<br/>
最大的Int值。<br/>
9) sys.maxunicode<br/>
最大的Unicode值。<br/>
10) sys.modules<br/>
返回系統導入的模塊字段，key是模塊名，value是模塊。<br/>
11) sys.path<br/>
返回模塊的搜索路徑，初始化時使用PYTHONPATH環境變量的值。<br/>
12) sys.platform<br/>
返回操作系統平臺名稱。<br/>
13) sys.stdout<br/>
標準輸出。<br/>
14) sys.stdin<br/>
標準輸入。<br/>
15) sys.stderr<br/>
錯誤輸出。<br/>
16) sys.exc_clear()<br/>
用來清除當前線程所出現的當前的或最近的錯誤信息。<br/>
17) sys.exec_prefix<br/>
返回平臺獨立的python文件安裝的位置。<br/>
18) sys.byteorder<br/>
本地字節規則的指示器，big-endian平臺的值是&#8217;big&#8217;,little-endian平臺的值是&#8217;little&#8217;。<br/>
19) sys.copyright<br/>
記錄python版權相關的東西。<br/>
20) sys.api_version<br/>
解釋器的C的API版本。<br/>
21) sys.version_info<br/>
<code>&gt;&gt;&gt; sys.version_info(major=2, minor=7, micro=5, releaselevel='final', serial=0)</code><br/>
22) sys.displayhook(value)<br/>
如果value非空，這個函數會把他輸出到sys.stdout，並且將他保存進__builtin__._.指在python的交互式解釋器裏，&#8217;_&lsquo;代表上次你輸入得到的結果，hook是鉤子的意思，將上次的結果鉤過來。<br/>
23) sys.getdefaultencoding()<br/>
返回當前你所用的默認的字符編碼格式。<br/>
24) sys.getfilesystemencoding()<br/>
返回將Unicode文件名轉換成系統文件名的編碼的名字。<br/>
25) sys.setdefaultencoding(name)<br/>
用來設置當前默認的字符編碼，如果name和任何一個可用的編碼都不匹配，拋出LookupError，這個函數只會被site模塊的sitecustomize使用，一旦別site模塊使用了，他會從sys模塊移除。<br/>
26) sys.builtin_module_names<br/>
Python解釋器導入的模塊列表。<br/>
27) sys.executable<br/>
Python解釋程序路徑。<br/>
28) sys.getwindowsversion()<br/>
獲取Windows的版本。<br/>
29) sys.stdin.readline()<br/>
從標準輸入讀一行。<br/>
30) sys.stdout.write(&ldquo;a&rdquo;)<br/>
屏幕輸出a。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 字符串]]></title>
    <link href="http://www.aprilzephyr.com/blog/03282014/python-string/"/>
    <updated>2014-03-28T01:15:00+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03282014/python-string</id>
    <content type="html"><![CDATA[<p><strong>1. 類型轉換</strong><br/>
1) Python是動態類型，是强類型的編程語言。<br/>
2) Python內建函數的實現類型轉換：</p>

<table><tbody>
<tr><td><em> 函數 </em></td><td><em> 描述 </em></td></tr>  
<tr><td>int(x [,base ]) </td><td>將x轉換為一個整數</td></tr>
<tr><td>long(x [,base ]) </td><td>將x轉換為一個長整數</td></tr>
<tr><td>float(x) </td><td>將x轉換為一個浮點數</td></tr>
<tr><td>complax(real [, img ]) </td><td>創建一個複數</td></tr>
<tr><td>str(x) </td><td>將對象x轉換為字符串</td></tr>
<tr><td>repr(x) </td><td>將對象x轉換為表達式字符串</td></tr>
<tr><td>eval(str) </td><td>計算在字符串中的有效python表達式，並返回一個對象</td></tr>
<tr><td>tuple(s) </td><td>將序列s轉換為一個元組</td></tr>
<tr><td>list(s) </td><td>將序列s轉換為一個列表</td></tr>
<tr><td>chr(x) </td><td>將一個整數轉換為一個字符</td></tr>
<tr><td>unichr(x) </td><td>將一個整數轉換為一個Unicode字符</td></tr>
<tr><td>ord(x) </td><td>將一個字符轉換為它的整數值</td></tr>
<tr><td>hex(x) </td><td>將一個整數轉換為一個十六進制字符串</td></tr>
<tr><td>oct(x) </td><td>將一個整數轉換為一個八進制字符串</td></tr>
</tbody>
</table>


<p> <!--more--></p>

<p><strong>2. 轉義字符</strong></p>

<table>
<tbody>
<tr><td><em>轉義字符</em></td><td><em>描述</em></td></tr>  
<tr><td>&#92;(在行尾)</td><td>續行符</td></tr>  
<tr><td>&#92;\ </td><td>反斜槓</td></tr>  
<tr><td>&#92;&#8217; </td><td>單引號</td></tr>  
<tr><td>&#92;&#8221; </td><td>雙引號</td></tr>  
<tr><td>\a</td><td>響鈴</td></tr>  
<tr><td>\b</td><td>退格(Backspace)</td></tr>  
<tr><td>\e</td><td>轉義</td></tr>  
<tr><td>\000</td><td>空</td></tr>  
<tr><td>\n</td><td>換行</td></tr>  
<tr><td>\v</td><td>縱向製表符</td></tr>  
<tr><td>\t</td><td>橫向製表符</td></tr>  
<tr><td>\r</td><td>回車</td></tr>  
<tr><td>\f</td><td>換頁</td></tr>  
<tr><td>\oyy</td><td>八進制數yy代表的字符，例如:\o12代表換行</td></tr>  
<tr><td>\xyy</td><td>十進制數yy代表的字符，例如:\x0a代表換行</td></tr>  
<tr><td>\uhhhh</td><td>Unicode 16位的十六進製值</td></tr>  
<tr><td>\uhhhhhhhh</td><td>Unicode 32位的十六進製值</td></tr>  
<tr><td>\other</td><td>其它的字符以普通格式輸出</td></tr>  
</tbody></table>


<p><strong>3. 格式化表達</strong></p>

<table><tbody>  
<tr><td><em>格式化表達</em></td><td><em>描述</em></td></tr>  
<tr><td>%s</td><td>字符串</td></tr>  
<tr><td>%r</td><td>repr輸出的字符串</td></tr>  
<tr><td>%d</td><td>十進制整數</td></tr>  
<tr><td>%i</td><td>整數</td></tr>  
<tr><td>%u</td><td>無符號整數</td></tr>  
<tr><td>%o</td><td>八進制</td></tr>  
<tr><td>%x</td><td>十六進制</td></tr>  
<tr><td>%X</td><td>十六進制(大寫)</td></tr>  
<tr><td>%e</td><td>指數</td></tr>  
<tr><td>%E</td><td>指數(大寫)</td></tr>  
<tr><td>%f</td><td>十進制浮點數</td></tr>  
<tr><td>%F</td><td>十進制浮點數(大寫)</td></tr>  
<tr><td>%g</td><td>浮點e或f</td></tr>  
<tr><td>%G</td><td>浮點E或F</td></tr>  
</tbody></table>


<p></p>

<p><strong>4. 索引和切片</strong><br/>
Python中的字符串是有序的字符集合，所以可以通過位置（索引）獲取對應的元素。和c語言中一樣，python的索引也是從0開始的，而且支持使用負索引的方法來獲取元素，一個負的索引可以看做是從字符串結尾處反向計數，-1就表示字符串的最後一個字符。當然也可以理解為負索引與字符串長度相加得到的正索引，即s[-n]等於s[-n+len(s)]。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;1&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;h&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;o&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;hel&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'><span class="s">&#39;ello&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;hell&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
其實分片的完整格式為s[start:end:side]，意思就是從start開始到end-1，每隔side個元素取一個元素，返回值為所有取到的元素組成的字符串，side默認值為1。<br/>
side可以取負值，例如s[::-1]會返回”olleh”，實際效果就是對字符串進行了反轉。這裏需要註意的是，如果side為負值，兩個邊界也要進行反轉，s[4:1:-1]就是從4開始反向取到2得到的字符串，如果在sride為負的情況下還是第一個邊界大於第二個邊界那樣的使用的話將返回一個空的字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;hlo&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;olleh&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;oll&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>5. 字符串方法</strong><br/>
<em>A 大小寫</em><br/>
S.upper() 全部大寫<br/>
S.lower() 全部小寫<br/>
S.swapcase() 大小寫互換<br/>
S.capitalize() 首字母大寫，其余都小寫<br/>
S.title() 每個單詞的首字母大寫，其余不變</p>

<p><em>B 對齊</em><br/>
S.ljust(width[, fill]) 獲取固定長度width，左對齊，多余位用fill填充，默認空格<br/>
S.rjust(width[, fill]) 右對齊<br/>
S.center(width[, fill]) 居中<br/>
S.zfill(width) 右對齊，左邊不足的位置用0補齊，相當於S.rjust(width,&ldquo;0&rdquo;)<br/>
如果width&lt;=len(S)，返回於原字符串相同的字符串。</p>

<p><em>C 查找替換</em><br/>
S.find(sub[, start[, end]]) 返回在範圍start到end(不含end)中第一個sub的索引。<br/>
S.rfind(sub[, start[, end]]) 從右邊開始查找，也就是返回在範圍start到end(不含end)中最後一個sub的索引。<br/>
S.index(sub[, start[, end]])功能與find()相同，不同之處在於find()未找到的時候會返回-1，而index()會拋出異常。<br/>
S.rindex(sub[, start[, end]])功能與rfind()相同，不同之處在於find()未找到的時候會返回-1，而index()會拋出異常。<br/>
S.count(sub[, start[, end]]) 返回在範圍start到end(不含end)中sub的個數。<br/>
start默認為0，end默認為len(S)。<br/>
S.replace(old, new[, count])將字符串中的old替換為new，count為替換的次數，未指定的話就是替換所有。<br/>
S.translate(table [,deletechars]) 刪除S中deletechars包含的字符，然後將剩下的字符用table定義的關系進行映射。table是string.maketrans()生成的。</p>

<p><em>D 去空白或指定字符</em><br/>
S.strip([chars]) 去除字符串S兩邊的chars,若chars未指定，則去除兩邊的空白，包括空格、\n、\f、\r、\t和\v。<br/>
S.lstrip([chars]) 去除左邊的chars，未指定同上。<br/>
S.rstrip([chars]) 去除右邊的chars，未指定同上。</p>

<p><em>E 分割和組合</em><br/>
S.split([sep [,maxsplit]]) 以sep為分隔符切割字符串S，不指定sep默認為默認為空白，maxsplit為最大分割次數，未指定則全部分割，返回列表。<br/>
S.rsplit([sep [,maxsplit]]) 只是和split反向相反，split從頭到尾，rsplit從尾到頭。<br/>
S.splitlines([keepends]) 按行分割字符串，若keepends指定並且為True，則保留換行符，反之不保留。<br/>
S.partiton(sep)以sep作為分隔符將S分割為兩個start和end部分，並返回(start,sep, end)這樣格式的元組，若sep沒有找到，則返回S和兩個空串組成的元組(S, &lsquo;&rsquo;, &lsquo;&rsquo;)。<br/>
S.rpartition(sep)從右邊開始，以sep作為分隔符將S分割為兩個start和end部分，並返回(start,sep, end)，若sep沒有找到，則返回兩個空串和S組成的元組(&lsquo;&rsquo;, &lsquo;&rsquo;, S)。<br/>
S.join(iterable) 將叠代器iterable的字符串連接在一起，並用分隔符S隔開，一般來說在連接列表的時候都使用空字符串或者空格作為分隔符，返回字符串。</p>

<p><em>F 判斷</em><br/>
S.startswith(prefix[, start[, end]])判斷字符串start到end(不含end)是否是以prefix開頭，默認start為0，end為len(S)，返回布爾值。<br/>
S.endswith(suffix[, start[, end]]) 判斷字符串start到end(不含end)是否是以suffix結尾，默認start為0，end為len(S)，返回布爾值。<br/>
S.isalnum() 是否全為字母或數字，返回布爾值。<br/>
S.isalpha() 是否全為字母，返回布爾值。<br/>
S.isdigit() 是否全為數字0-9，返回布爾值。<br/>
S.islower() 是否全是小寫。<br/>
S.isupper() 是否全是大寫。<br/>
S.isspace() 是否全是空白。<br/>
S.istitle() 是否符合title的格式——每個單詞的首字母大寫。<br/>
上述這些函數中，若S為空串，則均返回False。</p>

<p><em>G 編碼</em><br/>
S.decode([encoding[,errors]]) 將字符串S解碼為unicode，encoding為S原來的編碼方式。<br/>
S.encode([encoding[,errors]]) 將unicodeS編碼為python中的字符串，參數指定對應的編碼方式。<br/>
errors指定出錯時對應的操作，默認的strict會在編碼/解碼失敗的時候拋出異常，ignore則忽略。<br/>
關於編碼方式還是有很多的知識的，後續再做研究。</p>

<p><em>H 其他</em><br/>
S.format(*args, **kwargs)<br/>
format也是用來格式化字符串的，argv指定的變量可以在S中用{index}來替換，而kwargs則是對應的變量。如果後面的數據為字典，可以使用{&lt;index|var>[key]}來替換其對應的值。當然還可以指定對應的寬度、精度以及對其格式，{index:[fill][&lt;|>|^][width][.precision][typecode]}。<br/>
fill設置填充位，默認為空格；&lt;左對齊，>右對齊，^居中；寬度和類型見後面格式化表達式部分。註意這裏的精度專指說浮點型數據，整型是不能使用精度的，字符創設置了也沒啥作用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0},{2},{1},{s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;1,3,2,four&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0:$&lt;3},{2:^5.2f},{1},{s:&gt;10.6s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;1$$,3.00 ,2,      four&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0:&lt;3},{2:^5d},{1},{s:&gt;10s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;1  ,  3  ,2,      four&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0:&lt;03},{2:^05.2d},{1},{s:&gt;10s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">ValueError</span><span class="p">:</span> <span class="n">Precision</span> <span class="ow">not</span> <span class="n">allowed</span> <span class="ow">in</span> <span class="n">integer</span> <span class="n">format</span> <span class="n">specifier</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0:&lt;03},{2:^5.2f},{1},{s:&gt;10.6s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;100,3.00 ,2,      four&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
S.expandtabs([tabsize]) 將字符串中的制表符替換為tabsize個空格，默認為8。</p>

<p><em>I 3.0新增</em><br/>
S.isdecimal() 是否全是十進制數字(多語言數字)。<br/>
S.isidentifier() 是否全是合法標識符。<br/>
S.isnumeric() 是否只包含數字字符。<br/>
S.isprintable() 是否全是可打印字符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python import與from...import...(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/03272014/python-import-from-import/"/>
    <updated>2014-03-27T14:23:52+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03272014/python-import-from-import</id>
    <content type="html"><![CDATA[<p><strong>1. 簡單說說python import與from&hellip;import&hellip;.(python模塊)</strong></p>

<p>在python用import或者from&hellip;import來導入相應的模塊。模塊其實就一些函數和類的集合文件，它能實現一些相應的功能，當我們需要使用這些功能的時候，直接把相應的模塊導入到我們的程序中，我們就可以使用了。這類似於C語言中的include頭文件，Python中我們用import導入我們需要的模塊。 <!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;================Python import mode==========================&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">print</span> <span class="p">(</span><span class="s">&#39;The command line arguments are:&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s"> The python path&#39;</span><span class="p">,</span><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span><span class="p">,</span><span class="n">path</span> <span class="c">#導入特定的成員</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;================python from import===================================&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;path:&#39;</span><span class="p">,</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">如果你要使用所有</span><span class="n">sys</span><span class="err">模塊使用的名字，你可以這樣：</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;path:&#39;</span><span class="p">,</span><span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
從以上我們可以簡單看出：</p>

<p>\==========<br/>
導入mode，import與from&hellip;import的不同之處在於，簡單說：
如果你想要直接輸入argv變量到你的程序中而每次使用它時又不想打sys，則可使用：from sys import argv。<br/>
一般說來，應該避免使用from..import而使用import語句，因為這樣可以使你的程序更加易讀，也可以避免名稱的沖突。<br/>
\==========</p>

<p>在使用 from xxx import * 時，如果想精準的控制模塊導入的內容，可以使用 <strong>all</strong> = [xxx,xxx] 來實現，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">]</span> <span class="c">#__為雙橫線</span>
</span><span class='line'><span class="k">class</span> <span class="nc">two</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;this is two&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;this is two a&#39;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s">&#39;this is two b&#39;</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">two</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">one</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">two</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="k">print</span> <span class="n">b</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">two</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="err">這時，類</span><span class="n">two</span><span class="p">()</span><span class="err">將不會被</span> <span class="kn">import</span> <span class="o">*</span><span class="err">導入進來</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2. 關於import中的路徑搜索問題</strong><br/>
類似於頭文件，模塊也是需要系統的搜索路徑的，下面的命令即是系統默認的搜索路徑，當你導入一個模塊時，系統就會在下面的路徑列表中搜索相應的文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python26.zip&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/plat-linux2&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/lib-tk&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/lib-old&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/lib-dynload&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/site-packages&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/site-packages/gst-0.10&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/site-packages/gtk-2.0&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/site-packages/webkit-1.0&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib/python2.6/site-packages&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="err">從例中，我們可以看到</span><span class="n">python</span><span class="err">會首先在當前工作目錄裏去找</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果沒有找導相應的內容，則報錯：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">syss</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">ImportError</span><span class="p">:</span> <span class="n">No</span> <span class="n">module</span> <span class="n">named</span> <span class="n">syss</span>
</span><span class='line'>
</span><span class='line'><span class="err">當然，我們也可以自行添加要搜索的路徑，調用列表的</span><span class="n">append</span><span class="err">方法即可：</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;/usr/xx/python2.6&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>3. 創建自己的模塊</strong><br/>
在創建之前，有一點需要說明一下：每個Python模塊都有它的__name__（就每個對象都自己的__doc__一樣）。通過<strong>name</strong>我們可以找出每一個模塊的名稱，一般__name__的值有種：1 一是主模塊名稱為：&#8221;__main__&ldquo;(可以理解為直接運行的那個文件)，2 那些被主模塊導入的模塊名稱為：文件名字（不加後面的.py）。有__name__是很有用的，因為我們可以通過 if __name__  == &lsquo;xxx&rsquo; 判斷來執行那些模塊，那些模塊不被執行。另外：每個Python程序也是一個模塊。它擴展名為：.py擴展名。</p>

<p>下面，我們通過例子來說明：<br/>
首先：我們創建模塊：mymodel.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/user/bin/python</span>
</span><span class='line'><span class="c">#Filename:mymodel.py</span>
</span><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="s">&#39;1.0&#39;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sayHello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&#39;Hello world&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">modelName</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">__name__</span><span class="c">#返回它自己的名稱</span>
</span><span class='line'><span class="c">#end of model</span>
</span></code></pre></td></tr></table></div></figure>


<p>
以上語句注意：<br/>
1) 這個模塊應該被放置在我們輸入它的程序的同一個目錄中，或者在sys.path所列目錄之一。<br/>
2) 你已經看到，它與我們普通的Python程序相比並沒有什麽特別之處。<br/>
然後：我們在test.py中來調用此模塊：test.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span><span class="nn">mymodel</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;D:/xx/PythonSERVER/python31/Code&#39;</span><span class="p">)</span><span class="c">#提供搜索路径</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span> <span class="c">#此處打印主模塊的名稱：__main__</span>
</span><span class='line'><span class="n">mymodel</span><span class="o">.</span><span class="n">sayHello</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Version&#39;</span><span class="p">,</span><span class="n">mymodel</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Model Name&#39;</span><span class="p">,</span><span class="n">mymodel</span><span class="o">.</span><span class="n">modelName</span><span class="p">())</span><span class="c">#打印被導入模塊的名稱: mymodel</span>
</span><span class='line'>
</span><span class='line'><span class="err">我們使用</span><span class="n">from</span><span class="o">..</span><span class="n">import</span><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;======================from.....import=====================================&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mymodel</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span><span class="c">#此處打印主模塊的名稱：__main__</span>
</span><span class='line'><span class="n">sayHello</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Version&#39;</span><span class="p">,</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Model Name&#39;</span><span class="p">,</span><span class="n">modelName</span><span class="p">())</span> <span class="c">#打印被導入模塊的名稱: mymodel</span>
</span></code></pre></td></tr></table></div></figure>


<p>
以上語句註意：
1) 我們可以通過import來導入多個模塊，用“,”（逗號）分隔。<br/>
2) 註意import與from..import&hellip;..</p>

<p><strong>4. 創建自己的包</strong><br/>
<em>A 一個包的基本組織如下：</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">FC</span><span class="o">/</span>
</span><span class='line'>  <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>  <span class="n">Libr</span><span class="o">/</span>
</span><span class='line'>    <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="n">one</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="n">two</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>  <span class="n">Model</span><span class="o">/</span>
</span><span class='line'>    <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="n">one</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">在外部加載調用時，有以下方式：</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c">#加載方式一</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Fc.Libr.one</span>
</span><span class='line'><span class="k">print</span> <span class="n">Fc</span><span class="o">.</span><span class="n">Libr</span><span class="o">.</span><span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'><span class="c">#加載方式二</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="n">one</span>
</span><span class='line'><span class="k">print</span> <span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'><span class="c">#加載方式三</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr.one</span> <span class="kn">import</span> <span class="n">a</span>
</span><span class='line'><span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="c">#加載方式四</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span> <span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'><span class="err">註意直接使用第四種方式是不能正確導入</span><span class="n">Libr</span><span class="err">下的</span><span class="n">one</span><span class="err">子模塊的，這就需要在</span><span class="n">Fc</span><span class="err">目錄下的</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span><span class="err">文件中定義好需要加載子模塊的名稱</span>
</span><span class='line'><span class="n">Fc</span><span class="o">/</span><span class="n">Libr</span><span class="o">/</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">__all__</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;one&#39;</span><span class="p">,</span><span class="s">&#39;two&#39;</span><span class="p">]</span> <span class="c">#定義加載子模塊的名稱</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在加載包模塊時，在import語句執行期時，遇到的所有__init__.py文件都會被執行，在上面代碼中
首先會執行Fc目錄中的__int__.py，然後執行Libr目錄中的__init__.py</p>

<p><em>B 子模塊加子模塊問題</em><br/>
同一包的相同目錄中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c">#加載方式一:使用完全限定名稱</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="n">one</span>
</span><span class='line'><span class="n">aa</span> <span class="o">=</span> <span class="s">&#39;libr two load one---&#39;</span><span class="o">+</span><span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="c">#加載方式二:使用相對導入</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">one</span>
</span><span class='line'><span class="n">bb</span> <span class="o">=</span> <span class="s">&#39;libr two load one----&#39;</span><span class="o">+</span><span class="n">one</span><span class="o">.</span><span class="n">b</span>
</span><span class='line'><span class="err">方二中使用</span><span class="o">.</span><span class="err">來表示在同一級目錄中。</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#加載方式三:(這種方式應當避免:最後找不到會轉移到標準庫)</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Fc.Libr.one</span>
</span><span class='line'><span class="n">cc</span> <span class="o">=</span> <span class="s">&#39;libr two load one---&#39;</span><span class="o">+</span><span class="n">Fc</span><span class="o">.</span><span class="n">Libr</span><span class="o">.</span><span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="err">在外部使用時：</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span> <span class="n">two</span><span class="o">.</span><span class="n">aa</span>
</span><span class='line'><span class="k">print</span> <span class="n">two</span><span class="o">.</span><span class="n">bb</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">同一包的不同目錄中：</span>
</span><span class='line'>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">..Model</span> <span class="kn">import</span> <span class="n">one</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;libr two load mode one---&#39;</span><span class="o">+</span><span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用時：</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span> <span class="n">two</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'><span class="err">將輸出：</span><span class="n">libr</span> <span class="n">two</span> <span class="n">load</span> <span class="n">mode</span> <span class="n">one</span><span class="o">---</span><span class="n">fc</span> <span class="n">model</span> <span class="n">one</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>另外在導入一個包時，會定義一個特殊的變量__path__，該變量包含一個目錄列表。<br/>
__path__可通過__init__.py文件中包含的代碼訪問，最初包含的一項具有包的目錄名稱。我們可以向__path__列表提供更多的目錄，以更改查找子模塊時使用的搜索路徑，大型項目中這個很有用。</p>

<p><strong>5. 特別說明</strong><br/>
1) import執行加載源文件中所有語名（所以模塊是一個文件）。<br/>
2) import語句可以出現在程序中的任何位置。但是有一點是：無論import語句被使用了多少次，每個模塊中的代碼僅加載和執行一次，後續的import語句僅將模塊名稱綁定到前一次導入所創建的模塊對象上。<br/>
3) 使用sys.modules可查看當前加載的所有模塊。</p>

<p><a href="http://www.cnblogs.com/ptfblog/archive/2012/07/15/2592122.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 時間&amp;日期模塊]]></title>
    <link href="http://www.aprilzephyr.com/blog/03262014/python-time-datetime/"/>
    <updated>2014-03-26T16:53:19+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03262014/python-time-datetime</id>
    <content type="html"><![CDATA[<p>Python提供了time/datetime/calendar等模塊來處理日期和時間。<br/>
<strong>1.time模塊常用的函數</strong><br/>
<em>A. time.time()</em><br/>
1970年1月1日以來的秒數，是一個浮點數。<br/>
<em>B. time.sleep()</em><br/>
可以通過調用time.sleep來挂起當前的進程。time.sleep接收一个浮點型參數，表示進程挂起的時間。<br/>
<em>C. time.clock()</em><br/>
time.clock()返回第一次调用该方法到现在的秒數，其精確度高於1微秒。可以使用该函數來記錄程序執行的時間。 <!--more--><br/>
<em>D. time.gmtime()</em><br/>
該函數原型為time.gmtime([sec])，可選參數sec表示從1970-01-01以來的秒數，默認值為time.time()，函數返回time.struct_time類型的對象。(struct_time是在time模塊中定義的表示時間的對象)，下面是一個簡單的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">gmtime</span><span class="p">()</span>                        <span class="c">#獲取當前時間的struct_time對象   </span>
</span><span class='line'><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">gmtime</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())</span>
</span><span class='line'><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">gmtime</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="mi">24</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>    <span class="c">#獲取昨天這個時間的struct_time對象</span>
</span><span class='line'><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<em>E. time.localtime()</em><br/>
與time.gmtime()非常類似，也返回一個struct_time對象，可以看作是gmtime()的本地化版本。<br/>
<em>F. time.mktime()</em><br/>
time.mktime執行與gmtime(), localtime()相反的操作，它接收struct_time對象作為參數，返回用秒數來表示時間的浮點數。<br/>
<em>G. time.strftime()</em><br/>
time.strftime將日期轉換為字符串表示，它的函數原型為：time.strftime(format[, t])。參數format是格式字符串（格式字符串的知識可以參考：<a href="http://docs.python.org/2/library/time.html">time.strftime</a> ），可選的參數t是一个struct_time對象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="err">參數</span><span class="p">:</span>
</span><span class='line'><span class="n">strftime</span><span class="p">(</span><span class="n">format</span><span class="p">[,</span> <span class="nb">tuple</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">string</span>
</span><span class='line'><span class="err">將指定的</span><span class="n">struct_time</span><span class="p">(</span><span class="err">默認為當前時間</span><span class="p">)</span><span class="err">，根據指定的格式化字符串輸出</span>
</span><span class='line'><span class="n">python</span><span class="err">中時間日期格式化符號：</span>
</span><span class='line'><span class="o">%</span><span class="n">y</span> <span class="err">两位數的年份表示（</span><span class="mo">00</span><span class="o">-</span><span class="mi">99</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">Y</span> <span class="err">四位數的年份表示（</span><span class="mo">000</span><span class="o">-</span><span class="mi">9999</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">m</span> <span class="err">月份（</span><span class="mo">01</span><span class="o">-</span><span class="mi">12</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">d</span> <span class="err">月内中的一天（</span><span class="mi">0</span><span class="o">-</span><span class="mi">31</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">H</span> <span class="mi">24</span><span class="err">小時製小時數（</span><span class="mi">0</span><span class="o">-</span><span class="mi">23</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">I</span> <span class="mi">12</span><span class="err">小時製小時數（</span><span class="mo">01</span><span class="o">-</span><span class="mi">12</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">M</span> <span class="err">分鐘數（</span><span class="mo">00</span><span class="o">=</span><span class="mi">59</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">S</span> <span class="err">秒（</span><span class="mo">00</span><span class="o">-</span><span class="mi">59</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">a</span> <span class="err">本地簡化星期名稱</span>
</span><span class='line'><span class="o">%</span><span class="n">A</span> <span class="err">本地完整星期名稱</span>
</span><span class='line'><span class="o">%</span><span class="n">b</span> <span class="err">本地簡化的月份名稱</span>
</span><span class='line'><span class="o">%</span><span class="n">B</span> <span class="err">本地完整的月份名稱</span>
</span><span class='line'><span class="o">%</span><span class="n">c</span> <span class="err">本地相應的日期表示和時間表示</span>
</span><span class='line'><span class="o">%</span><span class="n">j</span> <span class="err">年内的一天（</span><span class="mo">001</span><span class="o">-</span><span class="mi">366</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">p</span> <span class="err">本地</span><span class="n">A</span><span class="o">.</span><span class="n">M</span><span class="o">.</span><span class="err">或</span><span class="n">P</span><span class="o">.</span><span class="n">M</span><span class="o">.</span><span class="err">的等價符</span>
</span><span class='line'><span class="o">%</span><span class="n">U</span> <span class="err">一年中的星期數（</span><span class="mo">00</span><span class="o">-</span><span class="mi">53</span><span class="err">），星期天為星期的開始</span>
</span><span class='line'><span class="o">%</span><span class="n">w</span> <span class="err">星期（</span><span class="mi">0</span><span class="o">-</span><span class="mi">6</span><span class="err">），星期天為星期的開始</span>
</span><span class='line'><span class="o">%</span><span class="n">W</span> <span class="err">一年中的星期數（</span><span class="mo">00</span><span class="o">-</span><span class="mi">53</span><span class="err">）星期一為星期的開始</span>
</span><span class='line'><span class="o">%</span><span class="n">x</span> <span class="err">本地相應的日期表示</span>
</span><span class='line'><span class="o">%</span><span class="n">X</span> <span class="err">本地相應的時間表示</span>
</span><span class='line'><span class="o">%</span><span class="n">Z</span> <span class="err">當前時區的名稱</span>
</span><span class='line'><span class="o">%%</span> <span class="o">%</span><span class="err">號本身</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<em>H. time.strptime()</em>
按指定格式解析一個表示时间的字符串，返回struct_time對象。該函數原型為：time.strptime(string, format)，两個參數都是字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;2013-04-09 12:30:25&#39;</span><span class="p">,</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2. datetime模塊</strong><br/>
<em>A. 兩個常量</em><br/>
datetime.MINYEAR和datetime.MAXYEAR，分別表示datetime所能表示的最小、最大年份。其中，MINYEAR=1,MAXYEAR=0000。<br/>
<em>B. 幾個重要的類</em><br/>
1) datetime.date:表示日期的類，常用的屬性有tear, month, day:<br/>
year的返回在兩個常量之間；<br/>
month的範圍是[1,12]，月份是從1開始；<br/>
day依據month來決定。 <br/>
2) date類提供了常用的類方法和類屬性：<br/>
date.max, date.min：date對象所能表示的最大、最小日期；
date.today()：返回一個表示當前本地日期的date對象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">26</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">date</span><span class="o">.</span><span class="n">max</span>
</span><span class='line'><span class="mi">9999</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">31</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">date</span><span class="o">.</span><span class="n">min</span>
</span><span class='line'><span class="mo">0001</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mo">01</span>
</span></code></pre></td></tr></table></div></figure>


<p>
3) date提供的實例方法和屬性<br/>
date.year、date.month、date.day：年、月、日；<br/>
date.replace(year, month, day)：生成一个新的日期對象，用參數指定的年，月，日代替原有對象中的屬性。（原有對象仍保持不變）；<br/>
date.timetuple()：返回日期對應的time.struct_time對象；<br/>
date.weekday()：返回weekday，如果是星期一，返回0；如果是星期2，返回1，以此類推；<br/>
data.isoweekday()：返回weekday，如果是星期一，返回1；如果是星期2，返回2，以此類推；<br/>
date.isocalendar()：返回格式如(year，month，day)的元組；<br/>
date.isoformat()：返回格式如&#8217;YYYY-MM-DD’的字符串；<br/>
date.strftime(fmt)：自定義格式化字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">now</span><span class="o">=</span><span class="n">date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mo">03</span><span class="p">,</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">tomorrow</span><span class="o">=</span><span class="n">now</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">day</span><span class="o">=</span><span class="mi">27</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;now:&#39;</span><span class="p">,</span><span class="n">now</span>
</span><span class='line'><span class="n">now</span><span class="p">:</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">26</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;tomorrow:&#39;</span><span class="p">,</span><span class="n">tomorrow</span>
</span><span class='line'><span class="n">tomorrow</span><span class="p">:</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">27</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;timetuple():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">timetuple</span><span class="p">()</span>
</span><span class='line'><span class="n">timetuple</span><span class="p">():</span> <span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;weekday():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">weekday</span><span class="p">()</span>
</span><span class='line'><span class="n">weekday</span><span class="p">():</span> <span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;isoweekday():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">isoweekday</span><span class="p">()</span>
</span><span class='line'><span class="n">isoweekday</span><span class="p">():</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;isocalendar():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">isocalendar</span><span class="p">()</span>
</span><span class='line'><span class="n">isocalendar</span><span class="p">():</span> <span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;isoformat():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span>
</span><span class='line'><span class="n">isoformat</span><span class="p">():</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">26</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
4) date還對某些操作進行了重載，它允許我們對日期進行如下一些操作：<br/>
date2 = date1 + timedelta  # 日期加上一個間隔，返回一個新的日期對象（timedelta將在下面介紹，表示時間間隔）
date2 = date1 &ndash; timedelta   # 日期隔去間隔，返回一個新的日期對象
timedelta = date1 &ndash; date2   # 两個日期相減，返回一個時間間隔對象
date1 &lt; date2  # 两個日期進行比較</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">now</span> <span class="o">=</span> <span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'><span class="n">tomorrow</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">day</span> <span class="o">=</span> <span class="mi">7</span> <span class="p">)</span>
</span><span class='line'><span class="n">delta</span> <span class="o">=</span> <span class="n">tomorrow</span> <span class="o">-</span> <span class="n">now</span>
</span><span class='line'><span class="k">print</span>   <span class="s">&#39;now:&#39;</span> <span class="p">,</span> <span class="n">now</span><span class="p">,</span>  <span class="s">&#39; tomorrow:&#39;</span> <span class="p">,</span> <span class="n">tomorrow</span>
</span><span class='line'><span class="k">print</span>   <span class="s">&#39;timedelta:&#39;</span> <span class="p">,</span> <span class="n">delta</span>
</span><span class='line'><span class="k">print</span>  <span class="n">now</span> <span class="o">+</span> <span class="n">delta</span>
</span><span class='line'><span class="k">print</span>  <span class="n">tomorrow</span> <span class="o">&gt;</span> <span class="n">now</span>
</span><span class='line'><span class="c"># # ---- output ----   </span>
</span><span class='line'><span class="c"># now: 2010-04-06  tomorrow: 2010-04-07   </span>
</span><span class='line'><span class="c"># timedelta: 1 day, 0:00:00   </span>
</span><span class='line'><span class="c"># 2010-04-07   </span>
</span><span class='line'><span class="c"># True</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://www.cnblogs.com/BeginMan/archive/2013/04/08/3007403.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 常用函數之Join, Split, Zip, Map, Reduce, Filter]]></title>
    <link href="http://www.aprilzephyr.com/blog/03262014/join-split-zip-map-reduce-filter/"/>
    <updated>2014-03-26T15:34:48+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03262014/join-split-zip-map-reduce-filter</id>
    <content type="html"><![CDATA[<p><strong><em>1. Join, Split</em></strong><br/>
<em>A 關於Join和Split方法</em><br/>
1) 只針對字符串進行處理。split:拆分字符串、join連接字符串<br/>
2) string.join(sep): 以string作為分割符，将sep中所有的元素(字符串表示)合併成一個新的字符串<br/>
3) string.split(str=&lsquo; &rsquo;,num=string.count(str)): 以str為分隔符，切片string，如果num有指定值，則僅分隔num個子字符串<br/>
4) 對導入os模塊進行os.path.splie()/os.path.join() 貌似是處理機制不一樣，但是功能上一樣<!--more--></p>

<p><em>B Join</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span><span class="o">=</span><span class="s">&#39;abcd&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;|&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">])</span><span class="err">　　</span><span class="c">#可以把[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]看做是 a=&#39;abcd&#39;;下面同理</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;.&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">({</span><span class="s">&#39;a&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="s">&#39;d&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>
注意：&#8217;.&lsquo;等做分隔符，將join裏的所有元素(字符串)通過分隔符連接成一個新的字符串。</p>

<p><strong>os.path.join(path1[,path2[,&hellip;&hellip;]])</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>\\<span class="err">将多个路径组合后返回，第一个绝对路径之前的参数将被忽略。</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;c:</span><span class="se">\\</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;csv&#39;</span><span class="p">,</span> <span class="s">&#39;test.csv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;c:</span><span class="se">\\</span><span class="s">csv</span><span class="se">\\</span><span class="s">test.csv&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;windows</span><span class="se">\t</span><span class="s">emp&#39;</span><span class="p">,</span> <span class="s">&#39;c:</span><span class="se">\\</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;csv&#39;</span><span class="p">,</span> <span class="s">&#39;test.csv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;c:</span><span class="se">\\</span><span class="s">csv</span><span class="se">\\</span><span class="s">test.csv&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;/home/aa&#39;</span><span class="p">,</span><span class="s">&#39;/home/aa/bb&#39;</span><span class="p">,</span><span class="s">&#39;/home/aa/bb/c&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;/home/aa/bb/c&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>C Split</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span><span class="o">=</span><span class="s">&#39;a b c&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">st</span><span class="o">=</span><span class="s">&#39;hello world&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="n">st</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;o&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">st</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;o&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">--------</span><span class="n">output</span><span class="o">---------</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;hell&#39;</span><span class="p">,</span> <span class="s">&#39; w&#39;</span><span class="p">,</span> <span class="s">&#39;rld&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;hell&#39;</span><span class="p">,</span> <span class="s">&#39; world&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
注意：分隔符不能為空，否則會報錯，但是可以有不含其中的分隔符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;a b c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;xsdfadsf&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;a b c&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>os.path.split()</strong><br/>
os.path.split()是按照路徑將文件名和路徑分隔開，比如d:\python\python.ext，可分割為[&rsquo;d:\python&#8217;, &lsquo;python.exe&rsquo;]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="k">print</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;c:</span><span class="se">\\</span><span class="s">Program File</span><span class="se">\\</span><span class="s">123.doc&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;c:</span><span class="se">\\</span><span class="s">Program File</span><span class="se">\\</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">-----------------</span><span class="n">output</span><span class="o">---------------------</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;c:</span><span class="se">\\</span><span class="s">Program File&#39;</span><span class="p">,</span> <span class="s">&#39;123.doc&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;c:</span><span class="se">\\</span><span class="s">Program File&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://www.cnblogs.com/BeginMan/archive/2013/03/21/2972857.html">Origin</a></p>

<p><strong><em>2. Zip</em></strong><br/>
zip()是Python的内建函數，(與序列有關的内建函數有：sorted()、reversed()、enumerate()、zip()),其中sorted()和zip()返回一個序列(列表)對象，reversed()、enumerate()返回一個迭代器(類似序列)。<br/>
定義：zip([seql, &hellip;])接受一系列可迭代對象作為參數，將對象中對應的元素打包成一個個tuple（元组），然後返回由這些tuples組成的list（列表）。若傳入參數的長度不等，则返回list的長度和參數中長度最短的對象相同。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">z1</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">z2</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">result</span><span class="o">=</span><span class="nb">zip</span><span class="p">(</span><span class="n">z1</span><span class="p">,</span><span class="n">z2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">result</span>
</span><span class='line'><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">)]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">z3</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">result</span><span class="o">=</span><span class="nb">zip</span><span class="p">(</span><span class="n">z1</span><span class="p">,</span><span class="n">z3</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">result</span>
</span><span class='line'><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
zip()配合*號操作符，可以將已經zip過的列表對象解壓</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
更近一層了解</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">*</span> <span class="err">二維矩陣變換（矩陣的行列互換）</span>
</span><span class='line'><span class="err">比如我们有一個由列表描述的二維矩陣</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="err">通过</span><span class="n">python</span><span class="err">列表推导的方法，我们也能轻易完成这个任务</span>
</span><span class='line'><span class="k">print</span> <span class="p">[</span> <span class="p">[</span><span class="n">row</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">a</span><span class="p">]</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]))]</span>
</span><span class='line'><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="err">另外一種讓人困惑的方法就是利用</span><span class="nb">zip</span><span class="err">函數：</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">)]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">))</span>
</span><span class='line'><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="nb">zip</span><span class="err">函數接受任意多個序列作為參數，將所有序列按相同的索引組合成一個元素是各個序列合併成的</span><span class="nb">tuple</span><span class="err">的新序列，新的序列的長度以參數中最短的序列為準。另外</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="err">操作符与</span><span class="nb">zip</span><span class="err">函數配合可以實現與</span><span class="nb">zip</span><span class="err">相反的功能，即將合併的序列拆成多個</span><span class="nb">tuple</span><span class="err">。</span>
</span><span class='line'><span class="err">①</span><span class="nb">tuple</span><span class="err">的新序列</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span><span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="nb">zip</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="s">&#39;a&#39;</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">),(</span><span class="mi">3</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="err">②新的序列的長度以參數中最短的序列為準</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span><span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="nb">zip</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="s">&#39;a&#39;</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="err">③</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="err">操作符与</span><span class="nb">zip</span><span class="err">函數配合可以實現與</span><span class="nb">zip</span><span class="err">相反的功能</span><span class="p">,</span><span class="err">即將合併的序列拆成多個</span><span class="nb">tuple</span><span class="err">。</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span><span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="nb">zip</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
</span><span class='line'><span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">),(</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://www.cnblogs.com/BeginMan/archive/2013/03/14/2959447.html">Origin</a></p>

<p><strong><em>3. Map</em></strong><br/>
對sequence中的item依次執行function(item)，執行結果輸出為list。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>           <span class="c">#對range(5)各項進行str操作</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;0&#39;</span><span class="p">,</span> <span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">]</span>        <span class="c">#返回列表</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">n</span><span class="p">):</span><span class="k">return</span> <span class="n">n</span><span class="o">+</span><span class="n">n</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>           <span class="c">#對range(5)各項進行add操作</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="n">x</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>   <span class="c">#lambda 函數，各項+本身</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>  <span class="c">#lambda 函數，各項+1</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="n">add</span><span class="p">,</span><span class="s">&#39;zhoujy&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;zz&#39;</span><span class="p">,</span> <span class="s">&#39;hh&#39;</span><span class="p">,</span> <span class="s">&#39;oo&#39;</span><span class="p">,</span> <span class="s">&#39;uu&#39;</span><span class="p">,</span> <span class="s">&#39;jj&#39;</span><span class="p">,</span> <span class="s">&#39;yy&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
想要輸入多個序列，需要支持多個參數的函數，注意的是各序列的長度必須一樣，否則報錯：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span><span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="n">add</span><span class="p">,</span><span class="s">&#39;zhoujy&#39;</span><span class="p">,</span><span class="s">&#39;Python&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;zP&#39;</span><span class="p">,</span> <span class="s">&#39;hy&#39;</span><span class="p">,</span> <span class="s">&#39;ot&#39;</span><span class="p">,</span> <span class="s">&#39;uh&#39;</span><span class="p">,</span> <span class="s">&#39;jo&#39;</span><span class="p">,</span> <span class="s">&#39;yn&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">):</span><span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="o">+</span><span class="n">z</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="n">add</span><span class="p">,</span><span class="s">&#39;zhoujy&#39;</span><span class="p">,</span><span class="s">&#39;Python&#39;</span><span class="p">,</span><span class="s">&#39;test&#39;</span><span class="p">)</span>     <span class="c">#&#39;test&#39;的長度比其他2個小</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="n">add</span><span class="p">()</span> <span class="n">takes</span> <span class="n">exactly</span> <span class="mi">2</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">3</span> <span class="n">given</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="n">add</span><span class="p">,</span><span class="s">&#39;zhoujy&#39;</span><span class="p">,</span><span class="s">&#39;Python&#39;</span><span class="p">,</span><span class="s">&#39;testop&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;zPt&#39;</span><span class="p">,</span> <span class="s">&#39;hye&#39;</span><span class="p">,</span> <span class="s">&#39;ots&#39;</span><span class="p">,</span> <span class="s">&#39;uht&#39;</span><span class="p">,</span> <span class="s">&#39;joo&#39;</span><span class="p">,</span> <span class="s">&#39;ynp&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong><em>4. Reduce</em></strong><br/>
對sequence中的item顺序迭代調用function，函數必須要有2個參數。要是有第3個參數，則表示初始值，可以繼續调用初始值，返回一個值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span><span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">add</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>        <span class="c">#1+2+3+...+9</span>
</span><span class='line'><span class="mi">45</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">add</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">11</span><span class="p">))</span>        <span class="c">#1+2+3+...+10</span>
</span><span class='line'><span class="mi">55</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="mi">5</span><span class="p">)</span>           <span class="c">#lambda 函數，5是初始值， 1*2*5</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>             <span class="c">#阶乘，1*2*3*4*5</span>
</span><span class='line'><span class="mi">120</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span><span class="mi">3</span><span class="p">)</span>           <span class="c">#初始值3，结果再*3</span>
</span><span class='line'><span class="mi">360</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>          <span class="c">#1+2+3+4+5+6</span>
</span><span class='line'><span class="mi">21</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong><em>5. Filter</em></strong><br/>
對sequence中的item依次執行function(item)，將執行結果為True（！=0）的item組成一個List/String/Tuple（取決于sequence的類型）返回，False則退出（0），進行過濾。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">div</span><span class="p">(</span><span class="n">n</span><span class="p">):</span><span class="k">return</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="n">div</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>                    <span class="c">#返回div輸出的不等於0的真值</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="n">div</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>        <span class="c">#lambda 函數返回奇數，返回列表</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="ow">not</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">fin</span><span class="p">(</span><span class="n">n</span><span class="p">):</span><span class="k">return</span> <span class="n">n</span><span class="o">!=</span><span class="s">&#39;z&#39;</span>                <span class="c">#過濾&#39;z&#39; 函數，出现z则返回False</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span><span class="s">&#39;zhoujy&#39;</span><span class="p">)</span>                    <span class="c">#&#39;z&#39;被過濾</span>
</span><span class='line'><span class="s">&#39;houjy&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span> <span class="o">!=</span><span class="s">&#39;z&#39;</span><span class="p">,</span><span class="s">&#39;zhoujy&#39;</span><span class="p">)</span>     <span class="c">#labmda返回True值</span>
</span><span class='line'><span class="s">&#39;houjy&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="ow">not</span> <span class="n">x</span><span class="o">==</span><span class="s">&#39;z&#39;</span><span class="p">,</span><span class="s">&#39;zhoujy&#39;</span><span class="p">)</span>  <span class="c">#返回：字符串</span>
</span><span class='line'><span class="s">&#39;houjy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong><em>6. Map, Reduce, Filter應用</em></strong><br/>
<em>A 實現5!+4!+3!+2!+1</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'><span class="k">def</span> <span class="nf">add_factorial</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">empty_list</span><span class="o">=</span><span class="p">[]</span>           <span class="c">#聲明一個空列表，存各個階乘的結果，方便這些結果相加</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)):</span>    <span class="c">#用傳進來的變量(n)來生成一个列表，用map讓列表都+1，eg：range(5) =&gt; [1,2,3,4,5]</span>
</span><span class='line'>        <span class="n">a</span><span class="o">=</span><span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">,</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">)))</span>   <span class="c">#生成階乘，用map去掉列表中的0</span>
</span><span class='line'>        <span class="n">empty_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>            <span class="c">#把階乘結果append到空的列表中</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">empty_list</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="c">#2選1</span>
</span><span class='line'><span class="c">#(一)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">&quot;Enter a Number(int) : &quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">result</span><span class="o">=</span><span class="n">add_factorial</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>   <span class="c">#傳入變量</span>
</span><span class='line'>        <span class="k">print</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">,</span><span class="n">result</span><span class="p">)</span>      <span class="c">#階乘結果相加</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">(</span><span class="ne">NameError</span><span class="p">,</span><span class="ne">TypeError</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;That&#39;s not a Number!&quot;</span>
</span><span class='line'><span class="c">#(二)</span>
</span><span class='line'><span class="c">#    result = add_factorial(int(sys.argv[1]))   #傳入變量</span>
</span><span class='line'><span class="c">#    print reduce(lambda x,y:x+y,result)      #階乘結果相加</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><em>B 將100-200以內的質數挑選出來</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">stop</span><span class="p">):</span>
</span><span class='line'>    <span class="n">stop</span>  <span class="o">=</span> <span class="n">stop</span><span class="o">+</span><span class="mi">1</span>     <span class="c">#包含列表右边的值</span>
</span><span class='line'>    <span class="n">prime</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="ow">not</span> <span class="p">[</span><span class="n">x</span><span class="o">%</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">x</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">],</span><span class="nb">range</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">stop</span><span class="p">))</span>   <span class="c">#取出質數,x从range(start,stop) 取的數</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">prime</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">:</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">&quot;Enter a start Number :&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">:</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c">#开始值默认2</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">:</span>
</span><span class='line'>        <span class="n">stop</span>  <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">&quot;Enter a stop  Number :&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">:</span>
</span><span class='line'>        <span class="n">stop</span>  <span class="o">=</span> <span class="mi">0</span>   <span class="c">#停止數，默认0，即不返回任何值</span>
</span><span class='line'>    <span class="n">is_prime</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">stop</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://www.cnblogs.com/zhoujinyi/archive/2013/06/07/3121976.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Lives]]></title>
    <link href="http://www.aprilzephyr.com/blog/03242014/about-lives/"/>
    <updated>2014-03-24T23:21:46+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03242014/about-lives</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/mourning_angel.jpg"></p>

<p>The distance between life and death, might be far beyond the real boundary from life and death.<!--more--></p>

<p>It might need only one second separating fresh teary faces from pale freezing corpses. Or, seventeen days&#8217; passing eclipse infinite dread and heart-lacerating sorrow over these pathetic waiting families who have already withstood too much.</p>

<p>Time is a queer thing could not be explained reasonably which gives people shock, sadness, hope then and despair finally.</p>

<p>Since March 8th, no solid wreckages of MH370 are found yet. Maybe we would never find the aircraft. However, things become weird and bizarre thanks to kinds of press conferences, analyses, information from so-called concerned third parties. Emotions of the whole nation are affected like riding on the roller coasters, let alone the relatives.</p>

<p>The latest news, came unexpectedly without any warmth of humanity. A text message sending to relatives of the passengers onboard says that &ldquo;we have to assume beyond any reasonable doubt that MH370 has been lost and that none of those onboard survived.&rdquo; Maybe the planes was ended in the remote Southern Indian Ocean for it is &ldquo;far from any possible landing sites.&rdquo;</p>

<p>Cannot imagine those relatives&#8217; heartbreak.</p>

<p>Lives are so fragile that any good bye would become a farewell forever.</p>

<p>Please pray for the living, and mourn over the passing. Cherish every single moment sharing with your beloved. Treat life well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Time]]></title>
    <link href="http://www.aprilzephyr.com/blog/03082014/about-time/"/>
    <updated>2014-03-08T19:31:58+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03082014/about-time</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/Boeing777.jpg"></p>

<p><em>About Time</em> is a movie telling a young man could travel in time back to anytime in his own life changing what happens and what has happened.<!--more--></p>

<p>Well, if I am asked what could I change if I have such ability, what would I answer?</p>

<p>I have no idea.</p>

<p>Since the &ldquo;disappearance&rdquo; of the flight MH370, there would be more than 18 hours. Presume you would be a passenger on board, do you regret if it&rsquo;s the end of your life? Or suppose you&rsquo;re a relative/friend of someone on board, what do you think?</p>

<p>Useless anger in burst or refusal dinner with beloved?</p>

<p>So sorry that there would be no more chances for you. Actually, Lives are so fragile that &ldquo;Death could not be anticipated.&rdquo;</p>

<p>Just one moment, passing-aways are insulated from fresh lives. It&rsquo;s so quick beyond your response.</p>

<p>We are not the hero in that movie who could travel in time, we could be too helpless to change even a flash of time.</p>

<p>Please, living in the present, there would be even no opportunity for regretting.</p>

<p><strong>PS:</strong> Let&rsquo;s pray, for the best of those lost brothers and sisters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibonacci序列, 乘法表與求素數的算法]]></title>
    <link href="http://www.aprilzephyr.com/blog/03062014/fibonacci-cheng-fa-biao-primes/"/>
    <updated>2014-03-06T17:07:25+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03062014/fibonacci-cheng-fa-biao-primes</id>
    <content type="html"><![CDATA[<p><strong>1. 不同算法實現Fibonacci數列</strong><br/>
1) 遞歸：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">fib</span><span class="o">=</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span><span class="mi">1</span> <span class="k">if</span> <span class="n">n</span><span class="o">&lt;=</span><span class="mi">2</span> <span class="k">else</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
2) 迭代：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'> <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">n</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">,</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'> <span class="k">return</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p> <br/>
3) 尾遞歸(SICP)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'> <span class="k">def</span> <span class="nf">fib_iter</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="p">:</span> <span class="k">return</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">:</span> <span class="k">return</span> <span class="n">fib_iter</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'> <span class="k">return</span> <span class="n">fib_iter</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://www.cnblogs.com/figure9/archive/2010/08/30/1812927.html">Origin</a></p>

<p>4-1) yield生成器(尾數不大於1000的序列):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">():</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">a</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">fibonacci</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p>
4-2) yield生成器(生成10個元素的序列):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nb">max</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="nb">max</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">a</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2. 九九乘法表</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'><span class="err">　　</span><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'><span class="err">　　　　</span><span class="k">print</span><span class="p">(</span><span class="s">&quot; </span><span class="si">%d</span><span class="s">*</span><span class="si">%d</span><span class="s">=</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="p">)),</span>
</span><span class='line'><span class="err">　　</span><span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>3. 求素數</strong><br/>
01)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">lis</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">obj</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">obj</span> <span class="o">%</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">lis</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="n">lis</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">lis</span><span class="p">))</span>
</span><span class='line'><span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span> <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="k">if</span> <span class="n">obj</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">lis</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="n">primes</span>
</span></code></pre></td></tr></table></div></figure>


<p>
02)  利用python的數學函數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">isPrime</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>03) 單行程序掃描素數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="p">[</span> <span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span>   <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span> <span class="k">if</span> <span class="mi">0</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">[</span> <span class="n">p</span><span class="o">%</span> <span class="n">d</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">p</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
04) 運用python的itertools模塊</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span>
</span><span class='line'><span class="k">def</span> <span class="nf">isPrime</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">count</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>
05)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">isPrime</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>4. 從Python求素數到list與dict的比較(轉)</strong><br/>
<strong>原理:</strong><br/>
素數，指在一個大於1的自然數中，除了1和此整數自身外，不能被其他自然數整除的數。在加密應用中起重要的位置，比如廣為人知的RSA算法中，就是基於大整數的因式分解難題，尋找兩個超大的素數然後相乘作為密鑰的。一個比較常見的求素數的辦法是<a href="http://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95">埃拉托斯特尼篩法(the Sieve of Eratosthenes)</a>，說簡單一點就是畫表格，然後刪表格，如圖所示：<br/>
<img src="http://www.aprilzephyr.com/images/sieve.gif"><br/>
從2開始依次往後面數，如果當前數字一個素數，那麽就將所有其倍數的數從表中刪除或者標記，然後最終得到所有的素數。</p>

<p><strong>實現:</strong><br/>
01)<br/>
首先用dic存儲n範圍內的元素，然後依次標記，最後從頭掃描一次dic，把合適的元素放在list中返回結果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">prime</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">lis</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lis</span><span class="p">:</span>
</span><span class='line'>            <span class="n">lis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">2</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>                <span class="n">lis</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="n">i</span>
</span><span class='line'>    <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lis</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">lis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ans</span>
</span></code></pre></td></tr></table></div></figure>


<p>
測試以後得到的結果是：求一千萬以內的素數用了9.68秒。<br/>
可是我覺得使用1個dict和1個list存會很浪費空間（其實不然，一千萬以內的素數只有66萬個，相對一千萬來說可以忽略不計），所以想改進一下算法。</p>

<p>02)<br/>
這次只用一個list存數字，然後遍歷刪除</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">primeC</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">lis</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lis</span><span class="p">:</span>
</span><span class='line'>            <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">i</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">k</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">lis</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">lis</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>                <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="n">i</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lis</span>
</span></code></pre></td></tr></table></div></figure>


<p>
因為無法在for中刪除list，所以使用一個xrange，然後每次判斷k是否在lis中再做刪除，結果：求十萬以內的素數一共花了186.79秒。</p>

<p><strong>比較:</strong><br/>
在時間上，第一個方法遠遠比第二個辦法有效率，dict是哈希實現，查詢的速度是常數級的，所以在標記合數的時候所花費的時間非常少，但是list是順序表，不知道內部是怎麽實現in 和 remove的，從時間上可以大概推測出應該是順序查找實現的，所以用如下代碼做了測試:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">source</span><span class="p">,</span><span class="n">test</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">test</span><span class="p">:</span>
</span><span class='line'>        <span class="n">each</span> <span class="ow">in</span> <span class="n">source</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="n">liss</span><span class="p">,</span><span class="n">test</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">test</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">liss</span><span class="p">:</span>
</span><span class='line'>            <span class="n">liss</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">removeDic</span><span class="p">(</span><span class="n">dicc</span><span class="p">,</span><span class="n">test</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">test</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">dicc</span><span class="p">:</span>
</span><span class='line'>            <span class="n">dicc</span><span class="p">[</span><span class="n">each</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">100000</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="mi">1000</span>
</span><span class='line'><span class="n">liss</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">dicc</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span><span class="p">)}</span>
</span><span class='line'><span class="n">test</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class='line'>    <span class="n">test</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="n">liss</span><span class="p">,</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="n">dicc</span><span class="p">,</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span>
</span><span class='line'><span class="n">remove</span><span class="p">(</span><span class="n">liss</span><span class="p">,</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span>
</span><span class='line'><span class="n">removeDic</span><span class="p">(</span><span class="n">dicc</span><span class="p">,</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>
結果是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mf">1.10526960281</span>
</span><span class='line'><span class="mf">0.00036479383832</span>
</span><span class='line'>
</span><span class='line'><span class="mf">2.11714318396</span>
</span><span class='line'><span class="mf">0.000374692766596</span>
</span></code></pre></td></tr></table></div></figure>


<p>
可以看出，在查找方面list是遠遠不如dict的，說明list不應該是哈希查找，而remove的時間也遠遠大於哈希的賦值時間。<br/>
不過由此判斷第二種方法是一無是處的話未免言之過早了。因為第二種方法裏面的實現是先申請了一段空間，然後再運算，而實現一的空間是動態增長的(在給哈希表賦值的那邊體現)，所以如果漲到一半發現內存不夠用的話就會報錯（測試1億數據的時候就出現了這個問題），而實現二一開始就會報錯，而不用做前面的一系列無用功。<br/>
總之就是空間換時間，時間換空間的那些戲碼。不過挺有意思。</p>

<p><a href="http://www.cnblogs.com/liga/archive/2012/08/31/2665811.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法]]></title>
    <link href="http://www.aprilzephyr.com/blog/03062014/pai-xu-suan-fa/"/>
    <updated>2014-03-06T15:53:21+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03062014/pai-xu-suan-fa</id>
    <content type="html"><![CDATA[<p><strong>1. 冒泡排序</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">bubble</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>\<span class="err">冒泡排序，</span><span class="n">x</span><span class="err">是列表，</span><span class="n">n</span><span class="err">是列表長度</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>   <span class="n">t</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>   <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>   <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span>
</span><span class='line'><span class="k">return</span> <span class="n">x</span>
</span><span class='line'><span class="k">print</span> <span class="n">bubble</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">41</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">48</span><span class="p">],</span> <span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
</br><!--more-->
<strong>2. 插入排序</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>     <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>     <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>         <span class="n">key</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>         <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>         <span class="k">while</span> <span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">key</span><span class="o">&lt;</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>             <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>             <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>         <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span><span class='line'>         <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">x</span>
</span><span class='line'><span class="k">print</span> <span class="n">insert</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">41</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">48</span><span class="p">],</span><span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
</br>
<strong>3. 選擇排序</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">key</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">[</span><span class="n">key</span><span class="p">]:</span>
</span><span class='line'>                 <span class="n">key</span> <span class="o">=</span> <span class="n">j</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span><span class="o">!=</span><span class="n">i</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>            <span class="n">x</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span>
</span><span class='line'><span class="k">print</span> <span class="n">select</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">41</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">48</span><span class="p">],</span><span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
</br>
<strong>4. 快速排序</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">low</span><span class="p">,</span><span class="n">high</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">low</span><span class="p">]</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="p">:</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">low</span><span class="o">&lt;</span><span class="n">high</span> <span class="ow">and</span> <span class="n">x</span><span class="p">[</span><span class="n">high</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">key</span><span class="p">:</span>
</span><span class='line'>            <span class="n">high</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
</span><span class='line'>            <span class="n">x</span><span class="p">[</span><span class="n">low</span><span class="p">]</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">high</span><span class="p">]</span>
</span><span class='line'>            <span class="n">low</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span><span class="n">high</span> <span class="ow">and</span> <span class="n">x</span><span class="p">[</span><span class="n">low</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">key</span><span class="p">:</span>
</span><span class='line'>            <span class="n">low</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
</span><span class='line'>            <span class="n">x</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">low</span><span class="p">]</span>
</span><span class='line'>            <span class="n">high</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">x</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">low</span>
</span><span class='line'><span class="k">def</span> <span class="nf">quick</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">low</span><span class="p">,</span><span class="n">high</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
</span><span class='line'>       <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">low</span><span class="p">,</span><span class="n">high</span><span class="p">)</span>
</span><span class='line'>       <span class="n">quick</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">low</span><span class="p">,</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>       <span class="n">quick</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">high</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>
</br>
<strong>5. 利用函數排序</strong><br/>
1) cmp()<br/>
Compare the two objects x and y and return an integer according to the outcome. The return value is negative if x &lt; y, zero if x == y and strictly positive if x > y.<br/>
2) reversed()<br/>
3) sort()<br/>
4) sorted()</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[書摘_談判力]]></title>
    <link href="http://www.aprilzephyr.com/blog/02252014/shu-zhai-tan-pan-li/"/>
    <updated>2014-02-25T19:36:09+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/02252014/shu-zhai-tan-pan-li</id>
    <content type="html"><![CDATA[<ol>
<li>(不要在立場上討價還價)談判的任何方法都可以通過三方面的標準來衡量:如果有達成共識的可能,就應該達成明智的協議;談判應該有效率;增進或至少不損害雙方的關係(明智的協議是指協議盡可能保障雙方的合法利益,公平解決雙方的利益衝突,協議持久性強,並考慮了社會效益)。</br>
</br></li>
<li>在立場式談判中,強硬者主導溫和者。如果強硬者堅持要對方作出妥協並不斷威脅對方,而溫和者為避免衝突不斷讓步,堅持以達成協議為重,那這樣的談判是不公平的。強硬者佔了便宜。談判會有結果,但卻不一定明智。它偏向於強硬者而不利於溫和者。</br>
</br></li>
<li>談判有兩個層次:第一個層次是解決實質性問題;第二個層次往往比較含蓄,它關註解決實質性問題的程序。<!--more--></br>
</br></li>
<li>以下四點幾乎適用於任何場合,每一點都圍繞談判的一個基本要素提出建議。</br>人:把人和事分開。</br>利益:著眼於利益,而不是立場。</br>選擇:為共同利益創造選擇方案。</br>標準:堅持使用客觀標準。</br></br></li>
<li>原則談判的四個基本要素從你開始著手談判到達成協議或是你決定不再進行談判都有用,這個過程可分為分析、計劃、協商三個階段。</br>在分析階段你只需要判斷形勢,收集、整理和分析信息。你需要考慮雙方對問題的不同認識、對方對你的敵意程度以及雙方交流的障礙,當然還有雙方各自的利益。你需要認清已經擺在桌面上的選擇以及已經提出的達成協議的基準。</br>在計劃階段你同樣要面對這四個因素,開動腦筋,作出決定。怎樣處理人際關係問題?在對方的利益中,什麼最重要?你的現實目標是什麼?為此你要找出其他選擇和參考標準。</br>
在協商階段,當雙方為達成協議相互交換意見時,四個基本要素是討論的最佳話題。雙方可以消除意見的分歧、克制情緒的衝動以及排除交流過程中的障礙。每一方都應理解對方的利益所在。雙方可以一起尋找對彼此都有利的方案,並根據客觀標準尋求共識以解決利益衝突。</br>
總之,與立場式談判相反,原則談判注重基本利益、互惠方案和公平標準,這通常導致更明智的談判結果。它使你有效地在一系列問題中逐漸與對方達成共識,而無須在死守立場和放棄立場之間徒耗精力。把人和事分割開來,你才能真正把對方當做一個有血有肉的人直接有效地同他打交道,最終得到友善的結果。</br>
</br>6. 雙方的合作關係至少應有助於達成一個兼顧雙方利益的協議。當然還有更重要的目的。多數談判是在人際關係不斷發展的情況下進行的,因此談判是圍繞著促進而不是有損人際關係以及為以後的談判鋪路的目的而展開的。事實上,在和許多長期客戶、商業夥伴、家庭成員、同行、政府官員以及不同的國家進行談判時,維持關係的意義遠遠高於某個談判的結果。</br>
</br>7. 人際關係經常與問題糾纏在一起。談判中人際問題帶來的一個重要後果就是各方面的關係容易與實質問題混淆在一起。無論是給予的一方還是索取的一方,都可能把人和事等同起來。</br>
人際關係與心理問題混淆的另一個原因是談判者經常對別人的話進行毫無根據的推論,並將其與對方對待自己的意願、態度聯繫起來。</br>
</br></li>
<li>解決實質問題和保持良好的合作關係並非互相矛盾,只要談判各方能夠在心理上作好準備,依據其合理性分開處理這些問題,並願為之而付出努力。把人際關係的基礎放在準確的認知,明白無誤的交流,恰當的情感和長遠的目光上,直接與人際問題打交道,不要指望靠犧牲實質利益來換取良好的人際關係。</br>
</br></li>
<li>要想在紛繁複雜的人際問題中找到出路,最好從以下三個基本方面著手:認知、情緒和交流。</br>
</br></li>
<li>瞭解對方的想法不只是幫助你解決自己的問題。他們的想法本身就是問題所在。無論是談生意還是解決糾紛,意見分歧都來源於你和對方思考方式的不同。</br>
</br></li>
<li>突不在於客觀現實本身,而在於人們的思考方式上。在處理分歧時,事實只不過是又一個論據,對消除分歧也許有用,也許無用。分歧的存在是因為它寓於人們的思維之中。恐懼,即使是無端的恐懼,也是切實存在、需要消除的。希望,即使是不太現實的希望,也會引發一場戰爭。縱然是既成的事實,也可能對問題的解決無濟於事。</br>
</br></li>
<li>儘管尋求客觀事實十分有益,但最後構成談判的問題的卻不是這些事實,而是雙方對於事實的不同認識,這才是解決問題的契機。</br>
站在對方角度換位思考。你對世界的認識取決於你所處的位置。人們往往只看他們想要看到的東西。在大量的詳細信息中,他們挑揀出那些能驗證自己最初認知的事實,把注意力放在這些事實上,而忽略或歪曲不符合他們認知的信息。談判中的每一方可能只會看到自己的優勢和對方的不足。</br>
</br></li>
<li>站在對方的角度考慮問題,是談判者應該掌握的最重要的技巧之一,儘管真正做到這一點並不容易。只認識到對方看問題的角度與我們的不同是不夠的。如果想影響對方,則還需要切身理解對方觀點的份量所在,感受對方深信不疑的觀念中所包含的情感力量。</br>
</br></li>
<li>理解對方觀點並不意味著對其表示贊同。的確,更好地瞭解對方想法可能會改變你對形勢的看法,但這並不是理解對方觀點所要付出的代價,而是一種獲益。這樣能使你縮小衝突範圍,幫助你實現新的自我利益。</br>
</br></li>
<li>討論各自對問題的認識。消除認識分歧的一種辦法是,亮出各自的想法,與對方進行討論。只要做到態度坦率、誠懇,雙方不從自己的角度出發指責對方,這樣的討論就能讓雙方懷著一份理解,認真傾聽對方的真正意圖。</br>
認為對方關注的問題「不重要」,因此對達成協議不構成障礙,這是談判中司空見慣的事情。事實上,與別人進行明確而有說服力的交流,把你的想法告訴對方,對方也願意聽取,對於你這位談判者來說是最好的投資。</br>
</br></li>
<li>保全面子既要依據原則達成協議,也要與談判者的自我形象相協調,因此其重要性不可低估。</br>
</br></li>
<li>談判中,特別是在激烈的爭執中,情緒本身也許比說話更重要。雙方可能更容易陷入爭執,而不是攜手就共同問題找出解決辦法。人們往往開始談判時才意識到風險很大,於是神情緊張。一方的情緒會感染另一方。恐懼會引起憤怒,而憤怒也會帶來恐懼。情緒波動會使談判迅速陷入僵局或者致使談判破裂。</br>
</br></li>
<li>當別人發脾氣時,你不要打斷對方或者摔門而去,而應克制自己的情緒,繼續待在那兒,任對方發洩不滿。當他們的委託人也在場時,他們的沮喪情緒也會像談判者那樣得到緩解。對付另一方發脾氣的最好措施也許是靜靜地聽著,並不時地讓對方繼續,直到他說完為止。</br>
</br></li>
<li>流中存在三大障礙。首先,談判者之間並不一定直接交談,或者至少不以這種方式得到對方理解。&hellip;即使你直接明瞭地與對方交談,他們也不一定在聽。這就是交流中的第二大問題。&hellip;交流中的第三個主要問題是誤解。</br>
</br></li>
<li>認真聆聽並理解對方的意思。&hellip;善於聽講的常用技巧是,集中精力聽對方說話,要求對方清楚明瞭地闡述其真正意圖,且在模稜兩可或沒有把握時要求對方重複。對方說話時盡量不要回應,而要去真正理解對方。站在對方的角度,考慮對方的需求,理解對方的壓力。&hellip;說出你的想法,爭取對方理解。&hellip;為了減少媒體、國內觀眾以及第三方對談判施加決定性影響,不分散談判人員的注意力,最好與對方建立私下、秘密的交流渠道,也可以通過限制談判團人數來提高交流的質量。&hellip;只談自己,不說對方。</br>
</br></li>
<li>有的放矢。有時,問題不在於交流太少,而在於溝通過多。&hellip;經驗之談是:在做出重要表態前,先弄清楚自己所要表達的意圖或想得到的信息,做到有的放矢。</br>
</br></li>
<li>處理人際問題的最佳時刻則是在問題發生之前。也就是說,要與對方建立個人及組織間的良好關係,以緩衝談判中的摩擦。這也意味著,在構建談判策略時,要把人際關係與實質問題分開,避免將個人意識牽扯到實質問題的討論中來。</br>
</br></li>
<li>對談判各方更為有效的策略是,視彼此為合作者,大家一起冷靜地去尋求有利於雙方的公平協議。</br>
</br></li>
<li>(著眼於利益,而不是立場)明智的解決辦法:協調雙方利益而不是立場。&hellip;利益是問題的關鍵。談判的根本問題不在於雙方立場上的衝突,而在於雙方需求、願望、想法乃至恐懼等方面的衝突。</br>
</br></li>
<li>在整個過程中,力求完全準確是錯誤的。你很難碰到有哪位決策者寫下得失利弊,進行權衡。畢竟你是在試著理解一個非常人性化的選擇,而不是做一道數學計算題。要認識到雙方都有多重利益。在幾乎所有的談判中,每一方都有多種利益,而不只是一種。</br>
</br></li>
<li>人類的基本需求包括:安全感，經濟利益，歸屬感，獲得他人認同，能主宰自己的生活。</br>
</br>27. 談判的目的是實現自己的利益。只有與對方就此溝通,才能增加實現這些利益的可能性。對方可能並不知道你的利益是什麼,你也可能不知道對方的利益所在,你們中有一方或者雙方只顧抱怨已經過去的事情,而不考慮下一步該怎麼做,或許你們根本就沒有聽對方在說些什麼。&hellip;如果希望對方認真考慮你的利益,那就明確告訴他們怎樣做才符合你的利益。&hellip;首要原則就是:具體。具體的細節不僅讓你的敘述真實可信,還能增加影響力。&hellip;只要你沒有表現出認為對方利益不重要或不合理,你就可以採取堅定的立場來陳述自己所關注問題的嚴重性。&hellip;如果你希望對方重視你的利益,那麼首先你就應當表明你重視對方的利益。&hellip;先說問題,再拿出你的答案。&hellip;如果你希望對方傾聽並且理解你的解釋,那麼就先說出自己的考慮,然後再得出結論或提出建議。</br>
</br>28. 問「為什麼」這個問題通常有兩種截然不同的意思。一種是回頭看,找原因,認為我們的行為是由已經發生的事情決定的;另一種是向前看,找目的,我們的行為取決於自己的意志。&hellip;向前看比回頭看更符合你的利益。不要與對方爭論已經發生的事情。&hellip;具體而不失靈活。在談判中,既要站穩立場,又要樂於接受各種新想法。&hellip;要將利益轉化成具體的選擇方案,首先應當問一下自己:「如果對方明天同意接受我的建議,那麼我希望對方同意什麼?」為了保持靈活性,你制訂的每一份選擇方案都視作是在闡明自己的利益。多考慮幾種能滿足你利益的方案。闡明自己的利益是關鍵。&hellip;對問題強硬,對人要溫和。&hellip;有努力捍衛自己的利益,談判才能取得明智的結果,也就是自己獲益最大、對方損失最小。談判雙方都力主自己的利益,這往往會激發創造性,找出對雙方都有利的方案。</br>
</br>29. 就事論事,但不要指責對方。不僅不要指責對方,還要對他們表示支持:洗耳恭聽對方的意見,對他們彬彬有禮,感謝對方付出的時間和精力,強調你也考慮到他們的基本要求等。你要讓對方知道,你對事不對人。一個有用的經驗法則是,不僅要全力對付問題,而且要全力支持對方。這看似矛盾,而從心理學角度而言,這的確是一組矛盾,但正是這種矛盾促使問題得以解決。心理學上一個很著名的理論就是認知不一致理論。</br>
</br>30. (為共同利益創造選擇方案)在大多數談判中,有四大障礙阻止了人們創造多種選擇的方案:(1)不成熟的判斷;(2)尋求單一的答案;(3)以為餡餅的大小是不變的;(4)認為「他們的問題應該由他們自己解決」。為了克服這些障礙,你必須瞭解它們。</br>
</br>31. 對創造力最有害的是那種總是抓住一切新事物的不足大做文章的批判意識。評判妨礙了想像力的發揮。對即將而來的談判壓力,你的批判意識可能會變得更強。實際談判需要的似乎是切實可行的想法,而不是憑空想像。</br>
</br>32. 為了尋求富有創造性的選擇方案,你需要做到:(1)將創造選擇方案與評判方案二者分開;(2)擴大談判桌上的選擇,不要只尋求唯一的方案;(3)尋求共同利益;(4)找到讓對方容易決策的方法。</br>
</br>33. 於共同利益,有三點值得牢記:首先,共同利益潛藏在每項談判中,它們往往不是即時可見的。&hellip;第二,共同利益只是機遇,不是天上掉下來的餡餅。&hellip;第三,強調你們的共同利益可以使談判變得愉快、順利。</br>
</br>34. 最利於雙方達成協議的差異類型是利益差異、觀念差異、不同的時間觀、不同預期和對風險的不同態度等。</br>
</br>35. 許多談判者都不能肯定自己要的是方案還是實際行動。然而,區分二者是至關重要的。如果你要的是行動,就不要再增加「談判空間」。</br>
</br>36. 由於大多數人受到合理觀念的強烈影響,所以,找到讓對方容易接受的解決方案的有效途徑是,對方案進行稍許加工,讓對方覺得合理。當對方覺得自己做事正確時,他們就更容易接受這個方案。所謂正確,即認為是公平、合法、令人自豪的等等。有先例最能促成決定,所以要努力尋找這樣的先例。尋找一個對方在類似情況下作過的決定或聲明,並盡量在此基礎上提出一個協議,這樣就為你的要求提供了一個客觀標準,讓對方容易接受。意識到對方願望的連貫性,想想對方做過的事或說過的話,這樣可以幫助你擬定你能接受,又能照顧到對方利益的選擇方案。</br>
</br>37. 原則談判能愉快、有效地達成明智的協議。越是用公平原則、效率原則或科學標準解決具體問題,就越有可能最終達成明智而公平的一攬子協議。你和對方越重視先例以及社會慣例,就越有可能從以往的經驗中獲益。</br>
</br>38. 如果雙方都用客觀標準來解決問題,而不是強迫對方妥協,談判就變得輕鬆多了。</br>
</br>39. 進行原則談判存在兩個問題:即如何制定客觀標準,以及如何在談判中運用客觀標準。</br>
</br>40. 在考慮程序方案時,還可以參考其他解決分歧的基本手段:如排序、抽籤、由他人來決定等。</br>
</br>41. 壓力的形式有多種:賄賂、威脅、強迫別人相信或是全然拒絕讓步。對於所有這些,原則性反應都是一樣的:讓對方擺出理由,提出你認為適用的客觀標準。除非基於客觀標準,否則絕不妥協。遵從原則,絕不屈服於壓力。</br>
</br>42. 假如對方不肯在立場上作任何讓步,而你又找不到可以接受它的原則基礎,你應該做一個估計,與自己的最佳選擇相比,接受對方不合理條件,你是否能有所得。你應該在實際利益和維護你自己身為原則談判者名聲之間權衡輕重。談判中,將討論的重心從對方願意做什麼轉為討論應如何解決問題,並不能結束爭論,也不能保證有滿意的結果。但它卻提供了你可以採取的有力戰術,避免了在立場上討價還價所要付出的高昂代價。</br>
</br>43. (如果對方實力更強大怎麼辦?)缺乏最佳替代方案的風險。如果你還沒有認真考慮協議失敗後的措施,就等於是毫無目的地在談判。&hellip;人們常犯的錯誤是,從心理上傾向從總量上來看替代方案。&hellip;但是問題在於,你不能同時擁有所有的選擇。如果達不成協議,你只能從中選擇一個替代方案。&hellip;果你期望明智地進行談判,你至少應該有一個初步的想法,這是極其重要的。談判是否達成協議,完全取決於最佳替代方案對於你的吸引力。制定一條警戒線。雖然你的最佳替代方案是衡量一切擬訂協議的可靠標準,你還需要另外的衡量標準。如果可能達成的協議在內容上會有令人極不滿意的地方,那麼確定一個雖不理想但卻比最佳替代方案更好接受的協議會幫助你及早發現問題。</br>
</br>44. 拿出最佳替代方案需要三個步驟:第一,提出如果不能達成協議自己所要採取的措施;第二,完善其中最有希望的想法,並把它們轉化成具體的替代方案;第三,初步選定看上去最好的替代方案。&hellip;你的最佳替代方案是你面對看似強大的談判者所能採取的最有效措施。</br>
</br>45. (如果對方不合作怎麼辦?)讓對方注重事情本身的是非曲直,有三種基本策略。第一是基於你能做什麼。&hellip;第二種策略,即關注對方能做什麼。&hellip;第三種策略是,關注第三方能做什麼。</br>
</br>46. 如何避免陷入攻擊和辯解的惡性循環中?答案是不要回擊。一般來說,對方的「攻擊」包括三種手段:直截了當地表明自己的立場;反駁你的觀點;對你進行人身攻擊。下面,我們看看一名原則談判者是如何應對這些攻擊的。不要攻擊對方的立場,而是透過立場看利益。在對方提出自己的立場時,既不接受也不拒絕,而是把對方的立場當作一種可能的選擇,尋找立場背後的利益,找到其遵循的原則,並考慮改進的方法。&hellip;不要替自己的想法辯護,歡迎批評和建議。&hellip;把批評引向建設性軌道的另一種方法是,轉換雙方的位置,徵求對方的意見。&hellip;變人身攻擊為針對問題的批評。</br>
</br>47. 注重談判柔術的人使用兩個關鍵手段。第一是提問而不是陳述。陳述容易導致對抗,而提問得到的則是答案。&hellip;提問不是批評,而是啟發。&hellip;沉默是你最好的武器,要充分利用它。如果對方提出不合理方案或是採取在你看來站不住腳的攻擊,最好的手段是一言不發。</br>
</br>48. (如果對方使用卑鄙手段怎麼辦?)當對方使用詭計時,商定談判規則有三個步驟:發現詭計,揭穿詭計,質疑詭計的合理性與可取性——談判就圍繞這三步展開。採取應對措施你必須先瞭解情況。要學會識別哪些是欺騙伎倆,哪些是故意讓你難受的計謀,哪些會使對方陷入立場之爭而不能自拔。通常,詭計一旦被識破,也就失去了它應有的效力。&hellip;指出對方的伎倆不僅讓伎倆本身失效,也讓對方擔心會惹惱你。對於對方的詭計,一個簡單的發問就足以讓他們罷手。然而,揭穿詭計最重要的目的是你有了一個協商遊戲規則的機會,這就是第三步。這種協商針對的是程序性問題,而不是實質性問題,其目的仍然是有效、愉快地達成明智協議(這裡是關於程序方面的協議)。&hellip;把人和事分開。不要因為對方使用了某種你認為不正當的手段,就對其進行人身攻擊。</br>
</br>49. 詭計策略可以分為三類:故意欺騙、心理戰術和在立場上施壓。你要準備措施應對這三種策略。把人與事分開。除非有充分的理由,否則,不要相信別人。這並不意味著把對方看成騙子,而是說把談判與信任問題分開。&hellip;不能只因為對方在和你談判就認為他們擁有全權。&hellip;在互相讓步之前,首先確定對方的權限。&hellip;如果對方含糊其辭,你可能希望與真正管事的人談判,或是表明你這一方保留重新考慮任何提議的同等自由。如果對方出乎意外地宣佈把你認定的協議作為進一步談判的基礎,你要堅持對等原則。&hellip;如果懷疑對方有不遵守協議的意圖,你可以把遵守協議本身作為協議的一部分。&hellip;誠實的談判並不需要完全透露自己的想法。</br>
</br>50. 果發現周圍環境對你不利,要立即指出來。&hellip;在任何情況下,你的任務都是發現問題,向對方指明問題,然後以客觀、講原則的態度與他們商定一個更好的談判環境。</br>
</br>51. 你可以用阻斷對方傳達信息的方式來應對強硬的破釜沉舟戰術。&hellip;不管怎樣,不要把對方的鎖定當回事,將它的重要性淡化,這樣對方才能體面地作出讓步。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思維點滴_關於未來]]></title>
    <link href="http://www.aprilzephyr.com/blog/02222014/si-wei-dian-di/"/>
    <updated>2014-02-22T21:36:20+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/02222014/si-wei-dian-di</id>
    <content type="html"><![CDATA[<p>今天上午，參加大連春季招聘會，未有合適崗位可應聘。午飯和下午與摯友聚會，暢談關於現狀，關於未來。</p>

<p>將所聊的脈絡、思維點滴記錄如下：</p>

<ol>
<li><p>即將而立之年，可轉行，前提是所轉行業、方向對於自己有持續性(持久性)，需以事業(開拓)而非工作(餬口)之心面對；若非如此，需以已有經驗爲依託繼續深入，不可浮躁變換目標。</p></li>
<li><p>尋求可持續發展之道，至少使得自己(家人)的生活水平維持現狀(單身時期)。考慮年工資水平與漲幅、物價水平與漲幅、未來因組建家庭等原因的消費支出以及其他各方面因素，所選職業方向是否能夠完成上述目標。<!--more--></p></li>
<li><p>尋求揚長避短的發展軌跡，考慮自身的絕對優勢與相對優勢(參考<a href="http://wiki.mbalib.com/zh-tw/%E7%BB%9D%E5%AF%B9%E4%BC%98%E5%8A%BF%E7%90%86%E8%AE%BA">絕對優勢理論</a>)，選擇最適合自己的職業方向。</p></li>
<li><p>針對現狀，或者投資有較高回報率和持續性的項目，或者投資自身——MBA、研究生或其他，努力擴大自己的視野、思考高度和人際關係高度。</p></li>
<li><p>原始積累的獲取最為困難，如何借助外力，彼此協助，取得進展。</p></li>
<li><p>創業優先，就業其次。</p></li>
<li><p>不可急躁，不可輕易放棄；機遇若來，努力抓住；機遇未來，盡心準備。</p></li>
<li><p>最為可貴，在於知道自己想要什麼，正在做什麼，怎麼改變，怎麼改善。</p></li>
<li><p>正業副業並不矛盾，相互轉化，關鍵在於戰略性思考。</p></li>
<li><p>小心計劃，大膽嘗試，決斷方向，解決細節，不懼失敗，步步為營。</p></li>
<li><p>多看書，獨立、主動、批判性思考。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[100 Interview Questions for Software Developers(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/02202014/100-interview-questions/"/>
    <updated>2014-02-20T15:46:36+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/02202014/100-interview-questions</id>
    <content type="html"><![CDATA[<p>1月13日，著名博客作者<a href="http://www.noop.nl">Jurgen Appelo</a>寫了一篇博文：<a href="http://www.noop.nl/2009/01/100-interview-questions-for-software-developers.html">“軟件開發者面試百問”</a>。該文甚受讀者歡迎，15日便登上了delicious，Popurls.com，Reddit的首頁。InfoQ中文站在得到作者許可之後，将其全文翻譯爲中文，希望可以對國內讀者有所助益。</br>
</br>
以下爲文章全文：</br>
</br>
想雇到搞軟件開發的聰明人可不容易。萬一一不小心，就會搞到一堆低能大狒狒。我去年就碰到这種事了。你肯定不想這樣吧。聽我的，没錯。在樹上開站立會議門都没有。<!--more--></br>
</br>
問點有難度的問題能幫你把聰明人跟狒狒們分開。我决定把我自己整理出來的軟件開發者面視百問發出来，希望能幫到你們的忙。</br>
</br>
這個列表涵蓋了軟件工程知識體系中定義的大多數知識域。當然，如果你只想找出類拔萃的程序員，便只需涉及結構、算法、數據結構、測試这幾個話題。如果想雇架構師，也可以只考慮需求、功能設計、技術設計这些地方。</br>
</br>
不過不管你怎麼做，都要牢記一點：</br>
</br>
這裡大多數問題的答案都没有對错之分！</br>
</br>
你可以把我的這些問題作為引子，展開討論。例如下面有個問題是使用静態方法或是單例的缘由。如果那個面試者就此展開長篇大論，那他很有可能是個聰明能幹的家伙！如果他一臉茫然的看著你，發出這種聲音，很明顯這就是只狒狒了。同樣，想知道一個數是不是2的乘方也有很多方法，不過要是面試的人想用mod運算符，嗯……你知道我的意思吧。（你不知道也没關係，來根香蕉？）</br>
</br>
<strong>需求</strong></br>
</br>
1) 你能給出一些非功能性（或者質量）需求的例子么？</br>
2) 如果客户需要高性能、使用极其方便而又高度安全，你會给他什麼建議？</br>
3) 你能給出一些用來描述需求的不同技術么？它們各自適用於什麼場景？</br>
4) 需求跟蹤是什麼意思？什麼是向前追溯，什麼是向後追溯？</br>
5) 你喜歡用什麼工具跟蹤需求？</br>
6) 你怎麼看待需求變化？它是好是壞？給出你的理由。</br>
7) 你怎樣研究需求，發現需求？有哪些資源可以用到？</br>
8) 你怎麼給需求製定優先級？有哪些技術？</br>
9) 在需求過程中，用户、客户、開發人員各自的職責是什麼？</br>
10) 你怎麼對待不完整或是令人費解的需求？</br>
</br>
<strong>功能設計</strong></br>
</br>
1) 在功能設計中有哪些隱喻？給出幾個成功的例子。</br>
2) 如果有些功能的執行時間很长，怎麼能讓用户感觉不到太長的等待？</br>
3) 如果用户必須要在一個很小的區域内，從一個常常的列表中選擇多个條目，你會用什么控件？</br>
4) 有哪些方法可以保证數據項的完整？</br>
5) 建立系統原型有哪些技術？</br>
6) 应用程序怎樣建立對用户行为的预期？給出一些例子。</br>
7) 如何入手設計一組數量龐大而又複雜的特性，你能舉出一些設計思路吗？</br>
8) 有一個列表，其中有10個元素，每個元素都有20個字段可以編輯，你怎樣設計這種情况？如果是1000個元素，每個元素有3個字段呢？</br>
9) 用不同的顏色對一段文本中的文字標記高亮，這種做法有什麼問題？</br>
10) Web環境和Windows環境各有些什么限制？</br>
</br>
<strong>技術設計</strong></br>
</br>
1) 什麼是低耦合和高聚合？封裝原則又是什麼意思？</br>
2) 在Web應用中，你怎樣避免几個人編輯同一段數據所造成的衝突？</br>
3) 你知道設計模式吗？你用过哪些設計模式？在什麼场合下用的？</br>
4) 是否了解什麼是無狀態的業務層？長事物如何與之相適應？</br>
5) 在搭建一個架構，或是技術設計時，你用過幾種圖？</br>
6) 在N層架構中都有哪些層？它們各自的職責是什麼？</br>
7) 有哪些方法可以確保架構中數據的正確和健壮？</br>
8) 面向对象設計和面向組件設計有哪些不同之處？</br>
9) 怎樣在數據庫中對用户授權、用户配置、權限管理這幾項功能建模？</br>
10) 怎樣按照等級制度給动物王國（包括各種物種和各自的行爲）建模？</br>
</br>
<strong>程序設計</strong></br>
</br>
1) 你怎樣保證你的代碼可以處理各種錯誤事件？</br>
2) 解釋一下什麼是測試驅動開發，舉出極限編程中的一些原則。</br>
3) 看别人代碼的時候，你最關心什麼地方？</br>
4) 什麼時候使用抽象類，什麼時候使用接口？</br>
5) 除了IDE以外，你還喜歡哪些必不可少的工具？</br>
6) 你怎麼保證代碼執行速度快，而又不出問題？</br>
7) 什麼時候用多態，什麼時候用委派？</br>
8) 什麼時候使用帶有靜態成員的類，什麼時候使用單例？</br>
9) 你在代碼裏面怎麼提前處理需求的變化？給一些例子。</br>
10) 描述一下實現一段代碼的過程，從需求到最终交付。</br>
</br>
<strong>算法</strong></br>
</br>
1) 怎樣知道一個數字是不是2的乘方？怎樣判斷一個数是不是奇數？</br>
2) 怎樣找出鏈表中間的元素？</br>
3) 怎樣改變10,000個靜態HTML頁面中所有電話號碼的格式？</br>
4) 舉出一個你所用過的遞歸的例子。</br>
5) 在散列表和排序後的列表中找一個元素，哪個查找速度最快？</br>
6) 不管是書、雜誌还是網絡，你從中所學到的最後一點算法知識是什麼？</br>
7) 怎樣把字符串反轉？你能不用臨時的字符串么？</br>
8) 你願意用什么類型的語言來編寫複雜的算法？</br>
9) 有一個數組，裏面是從1到1,000,000的整数，其中有一個數字出現了两次，你怎麼找出那個重複的數字？</br>
10) 你知道“旅行商問題（Traveling Salesman Problem）”么？</br>
</br>
<strong>數據結構</strong></br>
</br>
1) 怎樣在内存中實現倫敦地鐵的結構？</br>
2) 怎樣以最有效的方式在數據庫中存儲顏色值？</br>
3) 队列和堆棧區別是什麼？</br>
4) 用堆或者棧存儲數據的區別是什麼？</br>
5) 怎樣在數據庫中存儲N維向量？</br>
6) 你倾向於用哪种類型的語言編寫複雜的數據結構？</br>
7) 21的二進製值是什么？十六進製值呢？</br>
8) 不管是書、雜誌还是網絡，你從中所學到的最後一點數據結構的知識是什麼？</br>
9) 怎樣在XML文檔中存儲足球比赛結果（包括队伍和比分）？</br>
10) 有哪些文本格式可以保存Unicode字符？</br>
</br>
<strong>測試</strong></br>
</br>
1) 什麼是回歸測試？怎樣知道新引入的變化没有給現有的功能造成破壞？</br>
2) 如果業務層和數據層之間有依赖關係，你該怎麼寫單元測試？</br>
3) 你用哪些工具測試代碼質量？</br>
4) 在產品部署之後，你最常碰到的是什麼類型的問题？</br>
5) 什麼是代碼覆蓋率？有多少種代碼覆盖率？</br>
6) 功能測試和探索性測試的區別是什麼？你怎麼對網站進行測試？</br>
7) 測試套件、測試用例、測試計劃，這三者之間的區別是什麼？你怎麼組織測試？</br>
8) 要對電子商務網站做冒煙測試，你會做哪些類型的測試？</br>
9) 客户在驗收測試中會發現不满意的東西，怎樣减少這種情况的發生？</br>
10) 你去年在測試和質量保證方面學到了哪些東西？</br>
</br>
<strong>維護</strong></br>
</br>
1) 你用哪些工具在維護階段對產品進行監控？</br>
2) 要想對一個正在產品環境中被使用的產品進行升級，該注意哪些重要事項？</br>
3) 如果在一个龐大的文件中有錯誤，而代碼又無法逐步跟蹤，你怎麼找出錯誤？</br>
4) 你怎樣保證代碼中的變化不會影響產品的其他部分？</br>
5) 你怎樣爲產品編寫技術文檔？</br>
6) 你用过哪些方式保證軟件產品容易維護？</br>
7) 怎樣在產品運行的環境中進行系統調試？</br>
8) 什麼是負載均衡？負載均衡的方式有哪些？</br>
9) 為什麼在應用程序的生命週期中，軟件維護費用所佔的份額最高？</br>
10) 再造工程（re-engineering）和逆向工程（reverse engineering）的區別是什麼？</br>
</br>
<strong>配置管理</strong></br>
</br>
1) 你知道配置管理中基線的含義麼？怎樣把項目中某個重要的時刻凍結？</br>
2) 你一般會把哪些東西纳入版本控制？</br>
3) 怎樣可以保證團隊中每個人都知道誰改變了哪些東西？</br>
4) Tag和Branch的區別是什么？在什麼情况下该使用tag，什麼時候用branch？</br>
5) 怎樣管理技術文檔——如產品架構文檔——的變化？</br>
6) 你用什麼工具管理項目中所有數字信息的狀態？你最喜歡哪种工具？</br>
7) 如果客户想要對一款已經發佈的產品做出變動，你怎麼處理？</br>
8) 版本管理和發佈管理有什麼差異？</br>
9) 對文本文件的變化和二進製文件的變化進行管理，這二者有什麼不同？</br>
10) 同時處理多個變更請求，或是同時進行增量開發和維護，這種事情你怎麼看待？</br>
</br>
<strong>項目管理</strong></br>
</br>
1) 範圍、時間、成本，这三項中哪些是可以由客户控制的？</br>
2) 誰該對項目中所要付出的一切做出估算？誰有權設置最後期限？</br>
3) 减少交付的次數，或是减少每個交付中的工作量，你喜歡哪種做法？</br>
4) 你喜歡用哪種圖來跟蹤項目進度？</br>
5) 迭代和增量的區別在哪里？</br>
6) 試著解释一下風險管理中用到的實踐。風險該如何管理？</br>
7) 你喜歡任務分解还是滾動式計劃？</br>
8) 你需要哪些东西幫助你判斷項目是否符合時間要求，在預算範圍内運作？</br>
9) DSDM、Prince2、Scrum，这三者之間有哪些區别？</br>
10) 如果客户想要的東西太多，你在範圍和時間上怎樣跟他達成一致呢？</br>
</br>
閱讀英文原文：<a href="http://www.noop.nl/2009/01/100-interview-questions-for-software-developers.html">100 Interview Questions for Software Developers</a></br>
</br>
<a href="http://www.infoq.com/cn/articles/programmer-interview">Origin</a></p>
]]></content>
  </entry>
  
</feed>
