<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Themis_Sword's Blog]]></title>
  <link href="http://www.aprilzephyr.com/atom.xml" rel="self"/>
  <link href="http://www.aprilzephyr.com/"/>
  <updated>2015-04-15T21:32:27+08:00</updated>
  <id>http://www.aprilzephyr.com/</id>
  <author>
    <name><![CDATA[Themis_Sword]]></name>
    <email><![CDATA[licong0419@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The 20 Most Popular TED Talks of All Time]]></title>
    <link href="http://www.aprilzephyr.com/blog/04032015/the-20-most-popular-ted-talks-of-all-time/"/>
    <updated>2015-04-03T20:00:00+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04032015/the-20-most-popular-ted-talks-of-all-time</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/think.jpg"></p>

<p>Nonprofit organization TED launched in 1984 with a mission to present ideas worth sharing.</p>

<p>It has since become a cultural phenomenon, bringing together thought leaders from around the globe to give short, a few minutes talks about ideas that could change the world.</p>

<p>Of the more than 1,800 TED Talks, which have been viewed a total of 2.5 billion times across all platforms, a few have risen to the top. The following 20 talks are the most popular ever on Ted.com.<!--more--></p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/ken_robinson_says_schools_kill_creativity.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>
Sir Ken Robinson makes an entertaining and profoundly moving case for creating an education system that nurtures (rather than undermines) creativity.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/amy_cuddy_your_body_language_shapes_who_you_are.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Body language affects how others see us, but it may also change how we see ourselves. Social psychologist Amy Cuddy shows how “power posing” — standing in a posture of confidence, even when we don’t feel confident — can affect testosterone and cortisol levels in the brain, and might even have an impact on our chances for success.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/simon_sinek_how_great_leaders_inspire_action.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Simon Sinek has a simple but powerful model for inspirational leadership all starting with a golden circle and the question &ldquo;Why?&rdquo; His examples include Apple, Martin Luther King, and the Wright brothers &hellip; (Filmed at TEDxPugetSound.)</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/brene_brown_on_vulnerability.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Brené Brown studies human connection — our ability to empathize, belong, love. In a poignant, funny talk, she shares a deep insight from her research, one that sent her on a personal quest to know herself as well as to understand humanity. A talk to share.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/jill_bolte_taylor_s_powerful_stroke_of_insight.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Jill Bolte Taylor got a research opportunity few brain scientists would wish for: She had a massive stroke, and watched as her brain functions — motion, speech, self-awareness — shut down one by one. An astonishing story.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/pranav_mistry_the_thrilling_potential_of_sixthsense_technology.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>At TEDIndia, Pranav Mistry demos several tools that help the physical world interact with the world of data — including a deep look at his SixthSense device and a new, paradigm-shifting paper &ldquo;laptop.&rdquo; In an onstage Q&amp;A, Mistry says he&rsquo;ll open-source the software behind SixthSense, to open its possibilities to all.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/mary_roach_10_things_you_didn_t_know_about_orgasm.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>&ldquo;Bonk&rdquo; author Mary Roach delves into obscure scientific research, some of it centuries old, to make 10 surprising claims about sexual climax, ranging from the bizarre to the hilarious. (This talk is aimed at adults. Viewer discretion advised.)</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/tony_robbins_asks_why_we_do_what_we_do.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Tony Robbins discusses the &ldquo;invisible forces&rdquo; that motivate everyone&rsquo;s actions — and high-fives Al Gore in the front row.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/dan_pink_on_motivation.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Career analyst Dan Pink examines the puzzle of motivation, starting with a fact that social scientists know but most managers don&rsquo;t: Traditional rewards aren&rsquo;t always as effective as we think. Listen for illuminating stories — and maybe, a way forward.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/david_gallo_shows_underwater_astonishments.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>David Gallo shows jaw-dropping footage of amazing sea creatures, including a color-shifting cuttlefish, a perfectly camouflaged octopus, and a Times Square&rsquo;s worth of neon light displays from fish who live in the blackest depths of the ocean. This short talk celebrates the pioneering work of ocean explorers like Edith Widder and Roger Hanlon.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/dan_gilbert_asks_why_are_we_happy.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Dan Gilbert, author of &ldquo;Stumbling on Happiness,&rdquo; challenges the idea that we’ll be miserable if we don’t get what we want. Our &ldquo;psychological immune system&rdquo; lets us feel truly happy even when things don’t go as planned.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/susan_cain_the_power_of_introverts.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>In a culture where being social and outgoing are prized above all else, it can be difficult, even shameful, to be an introvert. But, as Susan Cain argues in this passionate talk, introverts bring extraordinary talents and abilities to the world, and should be encouraged and celebrated.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/pattie_maes_demos_the_sixth_sense.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>This demo — from Pattie Maes&#8217; lab at MIT, spearheaded by Pranav Mistry — was the buzz of TED. It&rsquo;s a wearable device with a projector that paves the way for profound interaction with our environment. Imagine &ldquo;Minority Report&rdquo; and then some.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/elizabeth_gilbert_on_genius.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Elizabeth Gilbert muses on the impossible things we expect from artists and geniuses — and shares the radical idea that, instead of the rare person &ldquo;being&rdquo; a genius, all of us &ldquo;have&rdquo; a genius. It&rsquo;s a funny, personal and surprisingly moving talk.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/hans_rosling_shows_the_best_stats_you_ve_ever_seen.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>You&rsquo;ve never seen data presented like this. With the drama and urgency of a sportscaster, statistics guru Hans Rosling debunks myths about the so-called &ldquo;developing world.&rdquo;</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/pamela_meyer_how_to_spot_a_liar.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>On any given day we&rsquo;re lied to from 10 to 200 times, and the clues to detect those lie can be subtle and counter-intuitive. Pamela Meyer, author of Liespotting, shows the manners and &ldquo;hotspots&rdquo; used by those trained to recognize deception — and she argues honesty is a value worth preserving.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/shawn_achor_the_happy_secret_to_better_work.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>We believe that we should work to be happy, but could that be backwards? In this fast-moving and entertaining talk, psychologist Shawn Achor argues that actually happiness inspires productivity. (Filmed at TEDxBloomington.)</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/david_blaine_how_i_held_my_breath_for_17_min.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>In this highly personal talk from TEDMED, magician and stuntman David Blaine describes what it took to hold his breath underwater for 17 minutes — a world record (only two minutes shorter than this entire talk!) — and what his often death-defying work means to him. Warning: do NOT try this at home.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/keith_barry_does_brain_magic.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>First, Keith Barry shows us how our brains can fool our bodies — in a trick that works via podcast too. Then he involves the audience in some jaw-dropping (and even a bit dangerous) feats of brain magic.</p>

<iframe src="https://embed-ssl.ted.com/talks/lang/en/cameron_russell_looks_aren_t_everything_believe_me_i_m_a_model.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Cameron Russell admits she won “a genetic lottery”: she&rsquo;s tall, pretty and an underwear model. But don&rsquo;t judge her by her looks. In this fearless talk, she takes a wry look at the industry that had her looking highly seductive at barely 16 years old.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[...]]></title>
    <link href="http://www.aprilzephyr.com/blog/12012014/dot-dot-dot/"/>
    <updated>2014-12-01T16:37:15+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/12012014/dot-dot-dot</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/adventure.jpg"></p>

<p>今天，2014年最後一個月的第一天，是該收拾下情緒了。</p>

<p>2014年，普通的不能再普通的一年，卻夾雜了太多的變化，這些變化，甚至改變了未來的方向。<!--more--></p>

<p>去年的辭職空檔期甚至延續到了今年的前五個月，超過整整七個月的空檔期，要算焦灼，還是焦慮，此刻的自己都回憶不起來那時，到底是什麼樣的心境。</p>

<p>還好，工作只是糊口的家什，事業才是值得追求和爭取的。</p>

<p>於是，工作，辭職，又工作。</p>

<p>直到現在，依然還算是沒有脫離“工作”的羈絆吧。</p>

<p>苦盡甘來？或許之前也不算苦，即使大半年像個游魂。</p>

<p>結識了True Friends，也遇到了她。</p>

<p>更安心了，就像久枯之地突然流過潺潺溪水；就靜靜的，靜靜的，直到心裏。如果硬要說有什麼不安，可能，是擔心自己不夠出色，不夠優秀，讓她委屈。</p>

<p>也收到了大學的offer，即將在新年啟程，去另一個國家，開始求學之旅，開始另一種人生。</p>

<p>自己很幸運，很幸運，不然，不會同時擁有，擁有一個愛人，擁有一份美好的未來。</p>

<p>此刻，耳機裏正好傳來最喜歡的那首“Forever in Love”。</p>

<p>感恩節剛過，如果說把“感恩”說出來，一遍兩遍三遍，未免太矯情。如此，心裏知道，便好。不求其他的，只求無愧、無悔。</p>

<p>還好，掙扎了這麼多年，還沒放棄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pieces]]></title>
    <link href="http://www.aprilzephyr.com/blog/08302014/pieces/"/>
    <updated>2014-08-30T22:15:03+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/08302014/pieces</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/owlcoffee.jpg"></p>

<p>A friend said I am a traditional person intrinsically somehow with an attempt to break the invisible shackles, the boundary of the traditional and the nontraditional. I know it&rsquo;s true for I am raised and influenced since my juvenile in such family and society.<!--more--></p>

<p>Let&rsquo;s define the word &ldquo;traditional&rdquo; with the meaning of life styles with or close to Eastern world, and the word &ldquo;nontraditional&rdquo; with the opposite one.</p>

<p>With thousands years&#8217; culture of the doctrine of the mean in Eastern world, it would be so easy about choosing just like an objective question, following the tide and keeping away from too leftward or too rightward. It is also believed safe and reliable. If I am always as pure as a plain paper about my mind, there would be never so troublesome.</p>

<p>If comparing the modes of thinking as a curve of Normal Distribution, the curve in the Eastern world is supposed to be steep and thin while the curve in the Western world is supposed to be flat and fat, that is the difference. Persons&#8217; innate thoughts and exterior activities in the two environments are pulled or pushed from the two types of curve.</p>

<p>No readings, no worries. Especially when reading so many books about different life styles, thoughts, viewpoints and experiences of this flat world, notions&#8217; sparking and colliding in the consciousness. While endeavoring to experience colorful diversities of life, the farther you deviate, the stronger viscous forces pull you back to the curve. (Based on the theory of evolution, it would take tens or hundreds of generations to have a thorough change, of that curve, for the whole society.) And I also believe, it&rsquo;s true.</p>

<p>Retrospecting myself, what I would like to do is exploring this magnificent earth by reading thousands of books and traveling thousands of miles. Only after that, I could have a proper state of mind to choose and settle down. I would like to live a fresh and unique myself without considering what the general trends&#8217; choices. Obviously that&rsquo;s the reason  I am who I am. I would try to make some tiny changes within an invisible scope, the so-called margin of safety. As for others, I would be not so sure. Maybe that, the flounder, is some proof of my youth.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hurt]]></title>
    <link href="http://www.aprilzephyr.com/blog/07102014/hurt/"/>
    <updated>2014-07-10T16:52:28+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/07102014/hurt</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/vt1Pwfnh5pc" frameborder="0" allowfullscreen></iframe>


<p>I hurt myself today<br/>
To see if I still feel  <!--more-->
I focus on the pain<br/>
The only thing that&rsquo;s real<br/>
The needle tears a hole<br/>
The old familiar sting<br/>
Try to kill it all away<br/>
But I remember everything</p>

<p>What have I become<br/>
My sweetest friend<br/>
Everyone I know goes away<br/>
In the end<br/>
And you could have it all<br/>
My empire of dirt<br/>
I will let you down<br/>
I will make you hurt</p>

<p>I wear this crown of thorns<br/>
Upon my liar&rsquo;s chair<br/>
Full of broken thoughts<br/>
I cannot repair<br/>
Beneath the stains of time<br/>
The feelings disappear<br/>
You are someone else<br/>
I am still right here</p>

<p>What have I become<br/>
My sweetest friend<br/>
Everyone I know goes away<br/>
In the end<br/>
And you could have it all<br/>
My empire of dirt<br/>
I will let you down<br/>
I will make you hurt</p>

<p>If I could start again<br/>
A million miles away<br/>
I would keep myself<br/>
I would find a way</p>

<p><strong>What would remain imperishably while lines&#8217; etching on the face? A word, some memories, or just serenity with or without regret.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Job, New Way]]></title>
    <link href="http://www.aprilzephyr.com/blog/06142014/new-job/"/>
    <updated>2014-06-14T10:04:25+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/06142014/new-job</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/bigdata.jpg"></p>

<p>It&rsquo;s been a whole month working in a new company, which is a venture company with the area of distributed storage focused.<!--more--></p>

<p>Returning back to Beijing after half a year&rsquo;s separation, living in a high-rise apartment, I soon realized, it would be a new way.</p>

<p>Everything&rsquo;s changed whereas everything seems the same.</p>

<p>NEW CHALLENGES come with the new position. Studying and reading fulfill every day and almost every minute, that joys me. I could see vigor&rsquo;s back and fresh air&rsquo;s pervading.</p>

<p>Time to transform and evolve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Are Alive]]></title>
    <link href="http://www.aprilzephyr.com/blog/05042014/you-are-alive/"/>
    <updated>2014-05-04T20:21:19+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/05042014/you-are-alive</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/alive.jpg"></p>

<p>如果你的內心有不安<br/>
If you&rsquo;re carrying your restlessness in your heart,<!--more--><br/>
那麽你還活著<br/>
you are alive<br/>
如果你的眼中有對夢想的渴望<br/>
If you&rsquo;re carrying the flames of dreams in your eyes,<br/>
那麽你還活著<br/>
you are alive<br/>
像一陣風一般的自由生活<br/>
Like a gust of wind, learn to live free<br/>
學著像大海的波浪般流動<br/>
Learn to flow like the waves that make a sea<br/>
張開你的雙臂擁抱每個時刻，你都可能收獲一份問候<br/>
May every moment gift you a new sight to greet<br/>
如果你的眼中有期望<br/>
If you&rsquo;re carrying wonder in your eyes,<br/>
那麽你還活著<br/>
you are alive<br/>
如果你的內心有不安<br/>
If you&rsquo;re carrying your restlessness in your heart<br/>
那麽你還活著<br/>
you are alive</p>

<p>&mdash;From Indian Movie <a href="http://www.imdb.com/title/tt1562872/">&ldquo;Zindagi Na Milegi Dobara&rdquo;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 正則表達式指南(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/05042014/python-zheng-ze-biao-da-shi-zhi-nan-zhuan/"/>
    <updated>2014-05-04T14:49:04+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/05042014/python-zheng-ze-biao-da-shi-zhi-nan-zhuan</id>
    <content type="html"><![CDATA[<h4>1. 正則表達式基礎</h4>

<h5>1.1 簡單介紹</h5>

<p>正則表達式並不是Python的一部分。正則表達式是用於處理字符串的強大工具，擁有自己獨特的語法以及一個獨立的處理引擎，效率上可能不如str自帶的方法，但功能十分強大。得益於這一點，在提供了正則表達式的語言裏，正則表達式的語法都是一樣的，區別只在於不同的編程語言實現支持的語法數量不同；但不用擔心，不被支持的語法通常是不常用的部分。如果已經在其他語言裏使用過正則表達式，只需要簡單看一看就可以上手了。</p>

<p>下圖展示了使用正則表達式進行匹配的流程：<!--more--><br/>
<img src="http://www.aprilzephyr.com/images/zhengzbds.png"></p>

<p>正則表達式的大致匹配過程是：依次拿出表達式和文本中的字符比較，如果每一個字符都能匹配，則匹配成功；一旦有匹配不成功的字符則匹配失敗。如果表達式中有量詞或邊界，這個過程會稍微有一些不同，但也是很好理解的，看下圖中的示例以及自己多使用幾次就能明白。</p>

<p>下錶列出了Python支持的正則表達式元字符和語法：</p>

<table><tbody>
<tr><td><em> 語法 </em></td><td><em> 說明 </em></td><td><em> 表達式實例 </em></td><td><em> 完整匹配的字符串 </em></td></tr>
<tr><td></td><td><em> 字符 </em><td></td></td><td></td></tr>
<tr><td> 一般字符 </td><td> 匹配自身 </td><td> abc </td><td> abc </td></tr>
<tr><td> . </td><td> 匹配任意除換行符&#8221;\n&#8221;外的字符。在DOTALL模式中也能匹配換行符 </td><td> a.c </td><td> abc </td></tr>
<tr><td> \ </td><td> 轉義字符，使後一個字符改變原來的意思。如果字符串中有字符*需要匹配，可以使用\*或者字符集[*] </td><td> a&#46;c a&#92;c </td><td> a.c a\c </td></tr>
<tr><td> [&#8230;] </td><td> 字符集(字符類)。對應的位置可以是字符集中任意字符。字符集中的字符可以逐個列出，也可以給出範圍，如[abc]或[a-c]。第一個字符如果是^則表示取反，如[^abc]表示不是abc的其他字符。 所有的特殊字符在字符集中都失去原油的特殊含義。在字符集中如果要使用]、-或^，可以在前面加上反斜槓，或把]、-放在第一個字符，把^放在非第一個字符 </td><td> a[bdc]e </td><td> abe ace ade </td></tr>
<tr><td></td><td><em> 預定義字符集(可以寫在字符集[&#8230;]中) </em><td></td></td><td></td></tr>
<tr><td> \d </td><td> 數字:[0-9] </td><td> a\dc </td><td> a1c </td></tr>
<tr><td> \D </td><td> 非數字:[^\d] </td><td> a\Dc </td><td> abc </td></tr>
<tr><td> \s </td><td> 非白字符:[<空格>\t\r\n\f\v] </td><td> a\sc </td><td> a c </td></tr>
<tr><td> \S </td><td> 非空白字符:[^\s] </td><td> a\Sc </td><td> abc </td></tr>
<tr><td> \w </td><td> 單詞字符:[A-Z a-z 0-9] </td><td> a\wc </td><td> abc </td></tr>
<tr><td> \W </td><td> 非單詞字符:[^\W] </td><td> a\Wc </td><td> a c </td></tr>
<tr><td></td><td><em> 數量詞(用在字符或(&#8230;)之後) </em><td></td></td><td></td></tr>
<tr><td> * </td><td> 匹配前一個字符0或無限次 </td><td> abc* </td><td> ab abccc </td></tr>
<tr><td> + </td><td> 匹配前一個字符1或無限次 </td><td> abc+ </td><td> abc abccc </td></tr>
<tr><td> ? </td><td> 匹配前一個字符0或1次 </td><td> abc? </td><td> ab abc </td></tr>
<tr><td> {m} </td><td> 匹配前一個字符m次 </td><td> ab{2}c </td><td> abbc </td></tr>
<tr><td> {m,n} </td><td> 匹配前一個字符m至n次。m和n可以省略：若省略m，則匹配0至n次；若省略n，則匹配m至無限次 </td><td> ab{1,2}c </td><td> abc abbc </td></tr>
<tr><td> \*?+? ?? {m,n}? </td><td> 使*+?{m,n}變成非貪婪模式 </td><td> 示例在下文中介紹 </td><td> </td></tr>
<tr><td></td><td><em> 邊界匹配(不消耗待匹配字符串中的字符) </em><td></td></td><td></td></tr>
<tr><td> ^ </td><td> 匹配字符串開頭。在多行模式中匹配每一行的開頭。 </td><td> ^abc </td><td> abc </td></tr>
<tr><td> $ </td><td> 匹配字符串末尾。在多行模式中匹配每一行的末尾。 </td><td> abc$ </td><td> abc </td></tr>
<tr><td> \A </td><td> 儘匹配字符串開頭。 </td><td> \Aabc </td><td> abc </td></tr>
<tr><td> \Z </td><td> 儘匹配字符串末尾。 </td><td> \Zabc </td><td> abc </td></tr>
<tr><td> \b </td><td> 匹配\w和\W之間。 </td><td> a\b!bc </td><td> a!bc </td></tr>
<tr><td> \B </td><td> [^\b] </td><td> a\Bbc </td><td> abc </td></tr>
<tr><td></td><td><em> 邏輯、分組 </em><td></td></td><td></td></tr>
<tr><td> | </td><td> |代表左右表達式任意匹配一個。總是先嘗試匹配左邊的表達式，一旦成功匹配則跳過匹配右邊的表達式。如果|沒有被包括在()中，則它的範圍是整個正則表達式。 </td><td> abc|def </td><td> abc def </td></tr>
<tr><td> (&#8230;) </td><td> 被擴起來的表達式將作為分組，從表達式左邊開始每遇到一個分組的左括號&#8217;(&#8216;，編號+1。另外，分組表達式作為一個整體，可以後接數量詞。表達式中的|儘在該組中有效。 </td><td> (abc){2} a(123|456)c </td><td> abcabc a456c </td></tr>
<tr><td> (?P<name>&#8230;) </td><td> 分組，除了原有的編號外再指定一個額外的別名。 </td><td> (?P<id>abc){2} </td><td> abcabc </td></tr>
<tr><td> \<number> </td><td> 引用編號為<number>的分組匹配到的字符串 </td><td> (\d)abc\1 </td><td> 1abc1 5abc5 </td></tr>
<tr><td> (?P=name) </td><td> 引用別名為<name>的分組匹配到的字符串。 </td><td> (?P<id>\d)abc(?P=id) </td><td> 1abc 5abc5 </td></tr>
<tr><td></td><td><em> 特殊構造(不作為分組) </em><td></td></td><td></td></tr>
<tr><td> (?:&#8230;) </td><td> (&#8230;)的不分組版本，用於使用&#8217;|&#8217;或後接數量詞 </td><td> (?:abc){2} </td><td> abc abc </td></tr>
<tr><td> (?iLmsux) </td><td> iLmsux的每個字符串代表一個匹配模式，只能用在正則表達式的開頭，可選多個。匹配模式將在下文中介紹。 </td><td> (?i)(abc) </td><td> AbC </td></tr>
<tr><td> (?#&#8230;) </td><td> #後的內容將作為註釋被忽略 </td><td> abc(?#comment)123 </td><td> abc123 </td></tr>
<tr><td> (?=&#8230;) </td><td> 之後的字符串內容需要匹配表達式才能成功匹配。不消耗字符串內容。 </td><td> abc(?=\d) </td><td> 後面是數字的a </td></tr>
<tr><td> (?!&#8230;) </td><td> 之後的字符串內容需要不匹配表達式才能成功匹配。不消耗字符串內容。 </td><td> abc(?!\d) </td><td> 後面不是數字的a </td></tr>
<tr><td> (?<=...) </td><td> 之前的字符串內容需要匹配表達式才能成功匹配。不消耗字符串內容。 </td><td> (?<=\d)a </td><td> 前面是數字的a </td></tr>
<tr><td> (?< !...) </td><td> 之前的字符串內容需要不匹配表達式才能成功匹配。不消耗字符串內容。 </td><td> (?<!\d)a </td><td> 前面不是數字的a </td></tr>
<tr><td> (?(id/name)yes-pattern|no-pattern) </td><td> 如果編號為id/別名為name的組匹配到字符，則需要皮皮yes-pattern，否則需要匹配no-pattern。 |np-pattern可以省略。 </td><td> (\d)abc(?(1)\d|abc) </td><td> 1abc2 abcabc </td></tr>
</tbody></table>


<p></p>

<h5>1.2 數量詞的貪婪模式與非貪婪模式</h5>

<p>正則表達式通常用於在文本中查找匹配的字符串。Python裏數量詞默認是貪婪的（在少數語言裏也可能是默認非貪婪），總是嘗試匹配盡可能多的字符；非貪婪的則相反，總是嘗試匹配盡可能少的字符。例如：正則表達式&#8221;a*&ldquo;如果用於查找&#8221;abbbc&#8221;，將找到&#8221;abbb&#8221;。而如果使用非貪婪的數量詞&#8221;ab*?&#8221;，將找到&#8221;a&#8221;。</p>

<h5>1.3. 反斜杠的困擾</h5>

<p>與大多數編程語言相同，正則表達式裏使用&#8221;\&ldquo;作為轉義字符，這就可能造成反斜杠困擾。假如你需要匹配文本中的字符&rdquo;\&ldquo;，那麽使用編程語言表示的正則表達式裏將需要4個反斜杠&rdquo;&#92;&#92;&ldquo;：前兩個和後兩個分別用於在編程語言裏轉義成反斜杠，轉換成兩個反斜杠後再在正則表達式裏轉義成一個反斜杠。Python裏的原生字符串很好地解決了這個問題，這個例子中的正則表達式可以使用r&rdquo;&#92;&ldquo;表示。同樣，匹配一個數字的&rdquo;&#92;d&#8221;可以寫成r&#8221;\d&#8221;。有了原生字符串，你再也不用擔心是不是漏寫了反斜杠，寫出來的表達式也更直觀。</p>

<h5>1.4. 匹配模式</h5>

<p>正則表達式提供了一些可用的匹配模式，比如忽略大小寫、多行匹配等，這部分內容將在Pattern類的工廠方法re.compile(pattern[, flags])中一起介紹。</p>

<h4>2. re模塊</h4>

<h5>2.1 開始使用re</h5>

<p>Python通過re模塊提供對正則表達式的支持。使用re的一般步驟是先將正則表達式的字符串形式編譯為Pattern實例，然後使用Pattern實例處理文本並獲得匹配結果（一個Match實例），最後使用Match實例獲得信息，進行其他的操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># encoding: UTF-8</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 将正则表达式编译成Pattern对象</span>
</span><span class='line'><span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;hello&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None</span>
</span><span class='line'><span class="n">match</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">&#39;hello world!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">match</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># 使用Match获得分组信息</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">### 输出 ###</span>
</span><span class='line'><span class="c"># hello</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>re.compile(strPattern[, flag]):</strong><br/>
這個方法是Pattern類的工廠方法，用於將字符串形式的正則表達式編譯為Pattern對象。 第二個參數flag是匹配模式，取值可以使用按位或運算符&#8217;|&lsquo;表示同時生效，比如re.I | re.M。另外，你也可以在regex字符串中指定模式，比如re.compile(&#8216;pattern&rsquo;, re.I | re.M)與re.compile(&lsquo;(?im)pattern&rsquo;)是等價的。
可選值有：<br/>
* re.I(re.IGNORECASE): 忽略大小寫（括號內是完整寫法，下同）<br/>
* M(MULTILINE): 多行模式，改變&#8217;^&lsquo;和&rsquo;$&lsquo;的行為（參見上圖）<br/>
* S(DOTALL): 點任意匹配模式，改變&rsquo;.&lsquo;的行為<br/>
* L(LOCALE): 使預定字符類 \w \W \b \B \s \S 取決於當前區域設定<br/>
* U(UNICODE): 使預定字符類 \w \W \b \B \s \S \d \D 取決於unicode定義的字符屬性<br/>
* X(VERBOSE): 詳細模式。這個模式下正則表達式可以是多行，忽略空白字符，並可以加入註釋。以下兩個正則表達式是等價的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&quot;&quot;\d +  # the integral part</span>
</span><span class='line'><span class="s">                   \.    # the decimal point</span>
</span><span class='line'><span class="s">                   \d *  # some fractional digits&quot;&quot;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;\d+\.\d*&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
re提供了眾多模塊方法用於完成正則表達式的功能。這些方法可以使用Pattern實例的相應方法替代，唯一的好處是少寫一行re.compile()代碼，但同時也無法復用編譯後的Pattern對象。這些方法將在Pattern類的實例方法部分一起介紹。如上面這個例子可以簡寫為：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&#39;hello&#39;</span><span class="p">,</span> <span class="s">&#39;hello world!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
re模塊還提供了一個方法escape(string)，用於將string中的正則表達式元字符如*/+/?等之前加上轉義符再返回，在需要大量匹配元字符時有那麽一點用。</p>

<h5>2.2 Match</h5>

<p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>

<p>属性：<br/>
1) string: 匹配时使用的文本。<br/>
2) re: 匹配时使用的Pattern对象。<br/>
3) pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。<br/>
4) endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。<br/>
5) lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。<br/>
6) lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</p>

<p>方法：<br/>
1) <strong>group([group1, …]):</strong> <br/>
获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。<br/>
2) <strong>groups([default]):</strong><br/>
以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。<br/>
3) <strong>groupdict([default]):</strong><br/>
返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。<br/>
4) <strong>start([group]):</strong><br/>
返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。<br/>
5) <strong>end([group]):</strong><br/>
返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。<br/>
6) <strong>span([group]):</strong><br/>
返回(start(group), end(group))。<br/>
7) <strong>expand(template):</strong><br/>
将匹配到的分组代入template中然后返回。template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。\id与\g<id>是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符&#8217;0&#8217;，只能使用\g<1>0。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&#39;(\w+) (\w+)(?P&lt;sign&gt;.*)&#39;</span><span class="p">,</span> <span class="s">&#39;hello world!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.string:&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">string</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.re:&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">re</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.pos:&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">pos</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.endpos:&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">endpos</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.lastindex:&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">lastindex</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.lastgroup:&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">lastgroup</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.group(1,2):&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.groups():&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.groupdict():&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">groupdict</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.start(2):&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.end(2):&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;m.span(2):&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">span</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">r&quot;m.expand(r&#39;\2 \1\3&#39;):&quot;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="s">r&#39;\2 \1\3&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### output ###</span>
</span><span class='line'><span class="c"># m.string: hello world!</span>
</span><span class='line'><span class="c"># m.re: &lt;_sre.SRE_Pattern object at 0x016E1A38&gt;</span>
</span><span class='line'><span class="c"># m.pos: 0</span>
</span><span class='line'><span class="c"># m.endpos: 12</span>
</span><span class='line'><span class="c"># m.lastindex: 3</span>
</span><span class='line'><span class="c"># m.lastgroup: sign</span>
</span><span class='line'><span class="c"># m.group(1,2): (&#39;hello&#39;, &#39;world&#39;)</span>
</span><span class='line'><span class="c"># m.groups(): (&#39;hello&#39;, &#39;world&#39;, &#39;!&#39;)</span>
</span><span class='line'><span class="c"># m.groupdict(): {&#39;sign&#39;: &#39;!&#39;}</span>
</span><span class='line'><span class="c"># m.start(2): 6</span>
</span><span class='line'><span class="c"># m.end(2): 11</span>
</span><span class='line'><span class="c"># m.span(2): (6, 11)</span>
</span><span class='line'><span class="c"># m.expand(r&#39;\2 \1\3&#39;): world hello!</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>2.3 Pattern</h5>

<p>Pattern對象是一個編譯好的正則表達式，通過Pattern提供的一系列方法可以對文本進行匹配查找。<br/>
Pattern不能直接實例化，必須使用re.compile()進行構造。<br/>
Pattern提供了幾個可讀屬性用於獲取表達式的相關信息：<br/>
1) pattern: 編譯時用的表達式字符串。<br/>
2) flags: 編譯時用的匹配模式。數字形式。<br/>
3) groups: 表達式中分組的數量。<br/>
4) groupindex: 以表達式中有別名的組的別名為鍵、以該組對應的編號為值的字典，沒有別名的組不包含在內。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;(\w+) (\w+)(?P&lt;sign&gt;.*)&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">DOTALL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;p.pattern:&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">pattern</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;p.flags:&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">flags</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;p.groups:&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">groups</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;p.groupindex:&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">groupindex</span>
</span><span class='line'>
</span><span class='line'><span class="c">### output ###</span>
</span><span class='line'><span class="c"># p.pattern: (\w+) (\w+)(?P&lt;sign&gt;.*)</span>
</span><span class='line'><span class="c"># p.flags: 16</span>
</span><span class='line'><span class="c"># p.groups: 3</span>
</span><span class='line'><span class="c"># p.groupindex: {&#39;sign&#39;: 3}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
实例方法[ | re模块方法]：<br/>
1) <strong>match(string[, pos[, endpos]]) | re.match(pattern, string[, flags]):</strong><br/>
这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。<br/>
pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。<br/>
注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符&#8217;$&lsquo;。<br/>
示例参见2.1小节。
2) <strong>search(string[, pos[, endpos]]) | re.search(pattern, string[, flags]):</strong><br/>
这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。<br/>
pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># encoding: UTF-8 </span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 将正则表达式编译成Pattern对象 </span>
</span><span class='line'><span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;world&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None </span>
</span><span class='line'><span class="c"># 这个例子中使用match()无法成功匹配 </span>
</span><span class='line'><span class="n">match</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;hello world!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">match</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># 使用Match获得分组信息 </span>
</span><span class='line'>    <span class="k">print</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">### 输出 ### </span>
</span><span class='line'><span class="c"># world</span>
</span></code></pre></td></tr></table></div></figure>


<p>
3) <strong>split(string[, maxsplit]) | re.split(pattern, string[, maxsplit]):</strong><br/>
按照能夠匹配的子串將string分割後返回列表。maxsplit用於指定最大分割次數，不指定將全部分割。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;\d+&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">p</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;one1two2three3four4&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### output ###</span>
</span><span class='line'><span class="c"># [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
4) <strong>findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags]):</strong><br/>
搜索string，以列表形式返回全部能匹配的子串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;\d+&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">p</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;one1two2three3four4&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### output ###</span>
</span><span class='line'><span class="c"># [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
5) <strong>finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags]):</strong><br/>
搜索string，返回一個順序訪問每一個匹配結果（Match對象）的叠代器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;\d+&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">p</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="s">&#39;one1two2three3four4&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(),</span>
</span><span class='line'>
</span><span class='line'><span class="c">### output ###</span>
</span><span class='line'><span class="c"># 1 2 3 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>
6) <strong>sub(repl, string[, count]) | re.sub(pattern, repl, string[, count]):</strong><br/>
使用repl替換string中每一個匹配的子串後返回替換後的字符串。<br/>
當repl是一個字符串時，可以使用\id或\g<id>、\g<name>引用分組，但不能使用編號0。<br/>
當repl是一個方法時，這個方法應當只接受一個參數（Match對象），並返回一個字符串用於替換（返回的字符串中不能再引用分組）。<br/>
count用於指定最多替換次數，不指定時全部替換。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;(\w+) (\w+)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&#39;i say, hello world!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">p</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r&#39;\2 \1&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">title</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">title</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">p</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### output ###</span>
</span><span class='line'><span class="c"># say i, world hello!</span>
</span><span class='line'><span class="c"># I Say, Hello World!</span>
</span></code></pre></td></tr></table></div></figure>


<p>
7) <strong>subn(repl, string[, count]) |re.sub(pattern, repl, string[, count]):</strong><br/>
返回 (sub(repl, string[, count]), 替換次數)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;(\w+) (\w+)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&#39;i say, hello world!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">p</span><span class="o">.</span><span class="n">subn</span><span class="p">(</span><span class="s">r&#39;\2 \1&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">title</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">title</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">p</span><span class="o">.</span><span class="n">subn</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### output ###</span>
</span><span class='line'><span class="c"># (&#39;say i, world hello!&#39;, 2)</span>
</span><span class='line'><span class="c"># (&#39;I Say, Hello World!&#39;, 2)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><a href="http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Writing(Fw)]]></title>
    <link href="http://www.aprilzephyr.com/blog/05022014/tips-on-writing/"/>
    <updated>2014-05-02T16:41:00+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/05022014/tips-on-writing</id>
    <content type="html"><![CDATA[<h4>Decide What You Think First</h4>

<p>When working on a challenging task — writing a speech, preparing an important presentation, or developing a new idea — it&rsquo;s helpful to get feedback from others. Do they think it&rsquo;s any good? In what direction do they think you should take it? But sometimes, too much feedback can drown out the most important opinion: your own. If you feel like you&rsquo;re getting too much input or are no longer sure what you think of your own work, take a break from the feedback. Decide what you think. This will build your confidence and trust in yourself. Once you&rsquo;ve articulated and refined your own perspective, reach back out to your trusted advisors to get theirs.<br/>
Adapted from <a href="http://blogs.hbr.org/2010/11/how-to-teach-yourself-to-trust/">&ldquo;How to Teach Yourself to Trust Yourself&rdquo; by Peter Bregman.</a><!--more--></p>

<h4>Three Ways to Tighten Your Writing</h4>

<p>Writing today—a report, memo, or email—must be short if you want people to read it. But succinctly expressing yourself can be tough. Here are three ways to trim your writing and say what you want in fewer words:<br/>
* <strong>Refine it.</strong> Take a hard look at the structure of your writing. Only include sections that are necessary to support your points.<br/>
* <strong>Consider an informal tone.</strong> Just because you&rsquo;re writing a report doesn&rsquo;t mean you need to be formal. Writing like a bureaucrat makes you use longer words and a complicated sentence structure. Adopting a more informal tone often helps you be direct and concise.<br/>
* <strong>Cut and then cut more.</strong> Look over your document sentence by sentence. If a sentence doesn&rsquo;t serve an important purpose, get rid of it.<br/>
Adapted from <a href="http://hbr.org/product/guide-to-better-business-writing-2nd-edition/an/10919-PDF-ENG">Guide to Better Business Writing.</a></p>

<h4>Choose Clarity over Brevity</h4>

<p>Writing experts emphasize the importance of using as few words as possible to deliver your message. The evolution of technology has supported this trend toward brevity; see tweets, status updates, and text messages as examples. But we may have gone too far. Sometimes messages that are too brief sacrifice clarity and leave out crucial information. When crafting your next message, choose clarity over brevity; include all relevant information and be sure it is logically organized. This is as true for PowerPoint presentations and research reports as it is for emails. Being brief is important but not at the risk of being misunderstood.<br/>
Adapted from <a href="http://blogs.hbr.org/2009/10/when-clarity-is-not-the-same-a/">&ldquo;When Clarity is Not the Same as Brevity&rdquo; by David Silverman.</a></p>

<h4>Three Tips for Writing Reader-Friendly Memos</h4>

<p>In business today, readers are time-pressed, content-driven, and decision-focused. To write effectively, remember that they want simple and direct communications. Here are three tips for giving readers what they want and need:<br/>
* <strong>Avoid complex phrasing.</strong> Writing elegantly is not important; delivering smart content is. Let the message stand out more than your language.<br/>
* <strong>Be concise.</strong> Many memo writers get hung up on &ldquo;flow.&rdquo; But flowing sentences tend to be long and dense. You don&rsquo;t need choppy sentences, just hardworking ones that deliver content concisely.<br/>
* <strong>Skip the jargon.</strong> Jargon can be a useful way to communicate among experts, but you should never use jargon if it&rsquo;s meaningless, if you don&rsquo;t understand it, or when your audience isn&rsquo;t familiar with it.<br/>
Adapted from <a href="http://hbr.org/product/guide-to-better-business-writing-2nd-edition/an/10919-PDF-ENG">Guide to Better Business Writing.</a></p>

<h4>Three Rules for Making Your Writing Clear</h4>

<p>In business writing, you get points for clarity, not style. Instead of trying to wax poetic about your division&rsquo;s plans for the next 60 days, just make your point. Here are three ways to do that:<br/>
* <strong>One idea per paragraph.</strong> Novels hold several complex ideas and emotions in a single paragraph. In business writing, limit your thoughts to one per paragraph. When you have another suggestion, thought or idea, start a  new paragraph.<br/>
* <strong>Put your point in the first sentence.</strong> Don&rsquo;t entice your readers with background information and build-up. No one has time for that. Make your primary point first. Then go into supporting detail.<br/>
* <strong>Make it &ldquo;scannable.&rdquo;</strong> Few people read every word in an email. Use headers and bullet points so that your audience can quickly scan your message and understand your point.<br/>
Adapted from <a href="http://blogs.hbr.org/2011/03/how-to-succeed-in-business-wri/">&ldquo;How to Succeed in Business Writing: Don&rsquo;t Be Dickens&rdquo; by David Silverman.</a></p>

<p><a href="http://hbr.org/web/management-tip/tips-on-writing">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[這樣寫英文Email]]></title>
    <link href="http://www.aprilzephyr.com/blog/04172014/zhe-yang-xie-ying-wen-email/"/>
    <updated>2014-04-17T17:15:01+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04172014/zhe-yang-xie-ying-wen-email</id>
    <content type="html"><![CDATA[<p><strong>1. 郵件的開頭</strong><br/>
感謝讀者是郵件開場白的好辦法。感謝您的讀者能讓對方感到高興，特別是之後你有事相求的情況下會很有幫助。</p>

<p>Thank you for contacting us.如果有人寫信來詢問公司的服務，就可以使用這句句子開頭。向他們對公司的興趣表示感謝。</p>

<p>Thank you for your prompt reply.當一個客戶或是同事很快就回復了你的郵件，一定記得要感謝他們。如果回復並不及時，只要將“prompt”除去即可，你還可以說，“Thank you for getting back to me.”<!--more--></p>

<p>Thank you for providing the requested information.如果你詢問某人一些信息，他們花了點時間才發送給你，那就用這句句子表示你仍然對他們的付出表示感激。</p>

<p>Thank you for all your assistance.如果有人給了你特別的幫助，那一定要感謝他們！如果你想對他們表示特別的感激，就用這個句子，“I truly appreciate … your help in resolving the problem.”Thank you raising your concerns.</p>

<p>就算某個客戶或是經理寫郵件給你對你的工作提出了一定的質疑，你還是要感謝他們。這樣你能表現出你對他們的認真態度表示尊重及感激。同時，你也可以使用，“Thank you for your feedback.”</p>

<p><strong>2. 郵件的結尾</strong> <br/>
在郵件開頭表示感謝一般是表示對對方過去付出的感謝，而在郵件結尾處表示感謝是對將來的幫助表示感謝。事先表示感謝，能讓對方在行動時更主動更樂意。</p>

<p>Thank you for your kind cooperation.如果你需要讀者幫助你做某事，那就先得表示感謝。</p>

<p>Thank you for your attention to this matter.與以上的類似，本句包含了你對對方將來可能的幫助表示感謝。</p>

<p>Thank you for your understanding.如果你寫到任何會對讀者產生負面影響的內容那就使用這句句子吧。</p>

<p>Thank you for your consideration.如果您是在尋求機會或是福利，例如你在求職的話，就用這封郵件結尾。</p>

<p>Thank you again for everything you&rsquo;ve done.這句句子可以用在結尾，和以上有所不同。如果你在郵件開頭已經謝過了讀者，你就可以使用這句話，但是因為他們的幫助，你可以著重再次感謝你們的付出。</p>

<p><strong>3. 十種場合的表達</strong><br/>
1) <em>Greeting message 祝福</em></p>

<p>Hope you have a good trip back. 祝旅途愉快。</p>

<p>How are you? 你好嗎?</p>

<p>How is the project going? 項目進行順利嗎?</p>

<p><em>2) Initiate a meeting 發起會議</em><br/>
I suggest we have a call tonight at 9:30pm (China Time) with you and Brown. Please let me know if the time is okay for you and Ben.<br/>
我建議我們今晚九點半和Brown小聚一下,你和Ben有沒有空?</p>

<p>I would like to hold a meeting in the afternoon about our development planning for the project A.<br/>
今天下午我建議我們就A項目的發展計劃開會討論一下。</p>

<p>We’d like to have the meeting on Thu Oct 30. Same time.<br/>
十月三十號(周四),老時間,開會。</p>

<p>Let’s make a meeting next Monday at 5:30 PM SLC time.<br/>
下周一鹽湖城時區下午五點半開會。</p>

<p>I want to talk to you over the phone regarding issues about report development and the XXX project.<br/>
我想跟你電話討論下報告進展和XXX項目的情況。</p>

<p><em>3) Seeking for more information/feedbacks/suggestions 咨詢信息/反饋/建議</em></p>

<p>Should you have any problem accessing the folders, please let me know.<br/>
如果存取文件有任何問題請和我聯系。</p>

<p>Thank you and look forward to having your opinion on the estimation and schedule.<br/>
謝謝你,希望能聽到更多你對評估和日程計劃的建議。</p>

<p>Look forward to your feedbacks and suggestions soon.<br/>
期待您的反饋建議!</p>

<p>What is your opinion on the schedule and next steps we proposed?<br/>
你對計劃方面有什麽想法?下一步我們應該怎麽做?</p>

<p>What do you think about this?<br/>
這個你怎麽想?</p>

<p>Feel free to give your comments.<br/>
請隨意提出您的建議。</p>

<p>Any question, please don’t hesitate to let me know.<br/>
有任何問題,歡迎和我們聯系。</p>

<p>Any question, please let me know.<br/>
有任何問題,歡迎和我們聯系。</p>

<p>Please contact me if you have any questions.<br/>
有任何問題,歡迎和我們聯系。</p>

<p>Please let me know if you have any question on this.<br/>
有任何問題,歡迎和我聯系。</p>

<p>Your comments and suggestions are welcome!<br/>
歡迎您的評論和建議!</p>

<p>Please let me know what you think?<br/>
歡迎您的評論和建議!</p>

<p>Do you have any idea about this?<br/>
對於這個您有什麽建議嗎?</p>

<p>It would be nice if you could provide a bit more information on the user’s behavior.<br/>
您若是能夠就用戶行為方面提供更多的信息就太感激了!</p>

<p>At your convenience, I would really appreciate you looking into this matter/issue.<br/>
如果可以,我希望你能負責這件事情。</p>

<p><em>4) Give feedback 意見反饋</em><br/>
Please see comments below.<br/>
請看下面的評論。</p>

<p>My answers are in blue below.<br/>
我的回答已標藍。</p>

<p>I add some comments to the document for your reference.<br/>
我加了些評論給你參考。</p>

<p><em>5) Attachment 附件</em><br/>
I enclose the evaluation report for your reference.<br/>
我附加了評估報告供您閱讀。</p>

<p>Attached please find today’s meeting notes.<br/>
今天的會議記錄在附件裏。</p>

<p>Attach is the design document, please review it.<br/>
設計文檔在附件裏,請評閱。</p>

<p>For other known issues related to individual features, please see attached release notes.<br/>
其他個人特征方面的信息請見附件。</p>

<p><em>6) Point listing 列表</em><br/>
Today we would like to finish following tasks by the end of today:1…….2…….<br/>
今天我們要完成的任務:1…….2…….</p>

<p>Some known issues in this release:1…….2…….<br/>
聲明中涉及的一些問題:1…….2…….</p>

<p>Our team here reviewed the newest SCM policy and has following concerns:1…….2…….<br/>
我們閱讀了最新的供應鏈管理政策,做出如下考慮:1…….2…….</p>

<p>Here are some more questions/issues for your team:1…….2…….<br/>
以下是對你們團隊的一些問題:1…….2…….</p>

<p>The current status is as following: 1…… 2……<br/>
目前數據如下: 1…… 2……</p>

<p>Some items need your attention:1…….2…….<br/>
以下方面需提請註意:1…….2…….</p>

<p><em>7) Raise question 提出問題</em><br/>
I have some questions about the report XX-XXX.<br/>
我對XX-XXX報告有一些疑問。</p>

<p>For the assignment ABC, I have the following questions:…<br/>
就ABC協議,我有以下幾個問題:……</p>

<p><em>8) Proposal 提議</em><br/>
For the next step of platform implementation, I am proposing…<br/>
關於平臺啟動的下一步計劃,我有一個提議……</p>

<p>I suggest we can have a weekly project meeting over the phone call in the near future.<br/>
我建議我們就一周項目開一個電話會議。</p>

<p>Achievo team suggest to adopt option A to solve outstanding issue……<br/>
Achievo團隊建議應對突出問題采用A辦法。</p>

<p><em>9) Thanks note 感謝信</em><br/>
Thank you so much for the cooperation.<br/>
感謝你的合作!</p>

<p>Thanks for the information.<br/>
謝謝您提供的信息!</p>

<p>I really appreciate the effort you all made for this sudden and tight project.<br/>
對如此緊急的項目您做出的努力我表示十分感謝。</p>

<p>Thank you for your attention!</p>

<p>Thanks to your attention!<br/>
謝謝關心!</p>

<p>Your kind assistance on this are very much appreciated.<br/>
我們對您的協助表示感謝。</p>

<p>Really appreciate your help!<br/>
非常感謝您的幫助!</p>

<p><em>10) Apology 道歉</em><br/>
I sincerely apologize for this misunderstanding!<br/>
對造成的誤解我真誠道歉!</p>

<p>I apologize for the late asking but we want to make sure the correctness of our implementation ASAP.<br/>
很抱歉現在才進行詢問,但是我們需要盡快核實執行信息。</p>

<p><strong>4. 分清目標</strong><br/>
Informal – Thanks for the email of 15 February.<br/>
Formal – Thank you for your email received 15 February.</p>

<p>Informal – Sorry, I can’t make it.<br/>
Formal – I am afraid I will not be able to attend.</p>

<p>Informal – Could you…?<br/>
Formal – I was wondering if you could….?</p>

<p><strong>5. 直接與間接表達</strong><br/>
Direct – I need this in half an hour.<br/>
Indirect and polite – Would it be possible to have this in half an hour?</p>

<p>Direct – There will be a delay.<br/>
Indirect – I’m afraid there will be a slight delay.</p>

<p>Direct – It’s a bad idea.<br/>
Indirect – To be honest, I’m not sure it would be a good idea.</p>

<p><strong>6. 用詞正面</strong><br/>
Look at these words: helpful, good question, agreed, together, useful, I’d be delighted, mutual, opportunity.</p>

<p>Now look at these: busy, crisis, failure, forget it, I can’t, it’s impossible, waste, hard.</p>

<p>The words you use show your attitude to life so choose your words wisely.</p>

<p><strong>7. Business Email Format</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Subject: ___________
</span><span class='line'>
</span><span class='line'>Dear Sir,
</span><span class='line'>
</span><span class='line'>Reference to your _______ dated ______ regarding ____, I would like to intimate that ___________. You will soon receive a detailed hard copy regarding the same.
</span><span class='line'>
</span><span class='line'>For any further queries, please feel free to contact me on my email address or phone number xxx-xxxx.
</span><span class='line'>
</span><span class='line'>Thanks and best regards,
</span><span class='line'>
</span><span class='line'>Sender information
</span><span class='line'>Sender Designation
</span><span class='line'>Company Name
</span><span class='line'>Contact number
</span><span class='line'>
</span><span class='line'>PS: This is a computer generated message and thus bears no signatures.</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>To: "Anna Jones" 
</span><span class='line'>Cc: All Staff
</span><span class='line'>From: "James Brown" jamesbrown@abcd.com
</span><span class='line'>Subject: Welcome to our Hive!
</span><span class='line'>
</span><span class='line'>Dear Anna,
</span><span class='line'>
</span><span class='line'>Welcome to our Hive!
</span><span class='line'>
</span><span class='line'>It is a pleasure to welcome you to the team of ___________. We are excited to have you join our team, and we hope that you will enjoy working with our company.
</span><span class='line'>
</span><span class='line'>On the last Saturday of each month we hold a special staff party to welcome any new employees. Please be sure to come next week to meet all of our senior staff and any other new staff members who have joined ___________ this month. You will receive an e-mail regarding the same with further details.
</span><span class='line'>
</span><span class='line'>If you have any questions during your training period, please do not hesitate to contact me. You can reach me at my email address or on my office line at 000-0001.
</span><span class='line'>
</span><span class='line'>Warm regards,
</span><span class='line'>James
</span><span class='line'>
</span><span class='line'>Jackie Brown, Manager, Staff
</span><span class='line'>jamesbrown@abcd.com
</span><span class='line'>Tel: 000-0001
</span><span class='line'>Read more at Buzzle: http://www.buzzle.com/articles/business-email-format.html</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stay Hungry, Stay Foolish]]></title>
    <link href="http://www.aprilzephyr.com/blog/04082014/stay-hungry/"/>
    <updated>2014-04-08T14:43:38+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04082014/stay-hungry</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/stayhsf.png"><br/>
<strong>&ldquo;Stay Hungry, Stay Foolish.&rdquo;</strong> Such resounding words delivered by Steve Jobs in 2005 Stanford Commencement Address which, was actually not the topic today. The quote is just about some reflections of a movie <a href="http://www.imdb.com/title/tt0107048/"><em>Groundhog Day</em></a>.<!--more--></p>

<p><strong>&ldquo;What would you do if you were stuck in one place and every day was exactly the same, and nothing that you did mattered?&rdquo;</strong></p>

<p>Phil Connors, the hero in that movie, an arrogant and egocentric Pittsburgh TV weatherman who, during a disgusted assignment covering the annual Groundhog Day event in Punxsutawney, finds himself in a time loop, repeating the same day over and over and over again. After indulging in periods of hedonism, dismay, bitterness, despair then numerous suicide attempts, he begins to re-examine his life and tries to change &mdash; improving and enriching himself through learning new skills and helping people.</p>

<p>Some plots are interesting that when Phil tries harder and harder to cater to someone he is interested, either terrible consequences(such as slaps on his face) come or void&rsquo;s arising even he succeeds. It might be because Phil attempts to alter the original himself which he actually couldn&rsquo;t. Such alternation would not last long even though he makes it for a flash. Only when Phil accepts the circumstances calmly, patiently and ready to do some &ldquo;changes&rdquo; would he handle the &ldquo;magic&rdquo; to break such time loop and win his queen&rsquo;s heart.</p>

<p>And so is the story telling us.</p>

<p>In real life, things are so similar that few ones are satisfied with their presents living roughly the same days over and over and over again. Senses of helplessness and so far as abomination towards their own never vanish. Sorrowfully that only fewer ones would like or dare to make a change as to be sluggish, revolted and desperate dying finally.</p>

<p>Staying hungry and foolish, is only for adequate constant advances for the nature of oneself could not be changed but the substance. There would be one and the only way to get rid of such suck life rhythm is to get cultured. Never scared, even if looked like deserted weeds temporarily. Just endeavor, struggle, enrich oneself, waiting patiently for the moment handling that fabulous magic to break one&rsquo;s own &ldquo;time loop&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python with語句(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/04062014/python-with-yu-ju/"/>
    <updated>2014-04-06T16:37:46+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04062014/python-with-yu-ju</id>
    <content type="html"><![CDATA[<p><strong>1. With 語句是什麼</strong><br/>
Python’s with statement provides a very convenient way of dealing with the situation where you have to do a setup and teardown to make something happen. A very good example for this is the situation where you want to gain a handler to a file, read data from the file and the close the file handler.<br/>
有一些任務，可能事先需要設置，事後做清理工作。對於這種場景，Python的with語句提供了一種非常方便的處理方式。一個很好的例子是文件處理，你需要獲取一個文件句柄，從文件中讀取數據，然後關閉文件句柄。<!--more--></p>

<p>Without the with statement, one would write something along the lines of:<br/>
如果不用with語句，代碼如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;/tmp/foo.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
There are two annoying things here. First, you end up forgetting to close the file handler. The second is how to handle exceptions that may occur once the file handler has been obtained. One could write something like this to get around this:<br/>
這裏有兩個問題。一是可能忘記關閉文件句柄；二是文件讀取數據發生異常，沒有進行任何處理。下面是處理異常的加強版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;/tmp/foo.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">finally</span><span class="p">:</span>
</span><span class='line'>    <span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
While this works well, it is unnecessarily verbose. This is where with is useful. The good thing about with apart from the better syntax is that it is very good handling exceptions. The above code would look like this, when using with:<br/>
雖然這段代碼運行良好，但是太冗長了。這時候就是with一展身手的時候了。除了有更優雅的語法，with還可以很好的處理上下文環境產生的異常。下面是with版本的代碼：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;/tmp/foo.txt&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2. with如何工作</strong><br/>
while this might look like magic, the way Python handles with is more clever than magic. The basic idea is that the statement after with has to evaluate an object that responds to an __enter__() as well as an __exit__() function.<br/>
這看起來充滿魔法，但不僅僅是魔法，Python對with的處理還很聰明。基本思想是with所求值的對象必須有一個__enter__()方法，一個__exit__()方法。</p>

<p>After the statement that follows with is evaluated, the __enter__() function on the resulting object is called. The value returned by this function is assigned to the variable following as. After every statement in the block is evaluated, the __exit__() function is called.<br/>
緊跟with後面的語句被求值後，返回對象的__enter__()方法被調用，這個方法的返回值將被賦值給as後面的變量。當with後面的代碼塊全部被執行完之後，將調用前面返回對象的__exit__()方法。</p>

<p>This can be demonstrated with the following example:<br/>
下面例子可以具體說明with如何工作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># with_example01.py</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sample</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;In __enter__()&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Foo&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">trace</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;In __exit__()&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_sample</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Sample</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="n">get_sample</span><span class="p">()</span> <span class="k">as</span> <span class="n">sample</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;sample:&quot;</span><span class="p">,</span> <span class="n">sample</span>
</span></code></pre></td></tr></table></div></figure>


<p>
When executed, this will result in:<br/>
運行代碼，輸出如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bash</span><span class="o">-</span><span class="mf">3.2</span><span class="err">$</span> <span class="o">./</span><span class="n">with_example01</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">In</span> <span class="n">__enter__</span><span class="p">()</span>
</span><span class='line'><span class="n">sample</span><span class="p">:</span> <span class="n">Foo</span>
</span><span class='line'><span class="n">In</span> <span class="n">__exit__</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
As you can see,<br/>
The __enter__() function is executed<br/>
The value returned by it &ndash; in this case &ldquo;Foo&rdquo; is assigned to sample<br/>
The body of the block is executed, thereby printing the value of sample ie. &ldquo;Foo&#8221;<br/>
The __exit__() function is called.<br/>
What makes with really powerful is the fact that it can handle exceptions. You would have noticed that the __exit__() function for Sample takes three arguments &ndash; val, type and trace. These are useful in exception handling. Let’s see how this works by modifying the above example.<br/>
正如你看到的，<br/>
1) __enter__()方法被執行<br/>
2) __enter__()方法返回的值 &ndash; 這個例子中是&#8221;Foo&#8221;，賦值給變量&#8217;sample&#8217;<br/>
3) 執行代碼塊，打印變量&#8221;sample&#8221;的值為 &#8220;Foo&#8221;<br/>
4) __exit__()方法被調用<br/>
with真正強大之處是它可以處理異常。可能你已經註意到Sample類的__exit()__方法有三個參數- val, type 和 trace。 這些參數在異常處理中相當有用。我們來改一下代碼，看看具體如何工作的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># with_example02.py</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sample</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">trace</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;type:&quot;</span><span class="p">,</span> <span class="nb">type</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;value:&quot;</span><span class="p">,</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;trace:&quot;</span><span class="p">,</span> <span class="n">trace</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">do_something</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">bar</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bar</span> <span class="o">+</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="n">Sample</span><span class="p">()</span> <span class="k">as</span> <span class="n">sample</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sample</span><span class="o">.</span><span class="n">do_something</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Notice how in this example, instead of get_sample(), with takes Sample(). It does not matter, as long as the statement that follows with evaluates to an object that has an __enter__() and __exit__() functions. In this case, Sample()’s __enter__() returns the newly created instance of Sample and that is what gets passed to sample.<br/>
這個例子中，with後面的get_sample()變成了Sample()。這沒有任何關系，只要緊跟with後面的語句所返回的對象有__enter__()和__exit__()方法即可。此例中，Sample()的__enter__()方法返回新創建的Sample對象，並賦值給變量sample。</p>

<p>When executed:<br/>
代碼執行後：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bash</span><span class="o">-</span><span class="mf">3.2</span><span class="err">$</span> <span class="o">./</span><span class="n">with_example02</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="nb">type</span><span class="p">:</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;exceptions.ZeroDivisionError&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">value</span><span class="p">:</span> <span class="n">integer</span> <span class="n">division</span> <span class="ow">or</span> <span class="n">modulo</span> <span class="n">by</span> <span class="n">zero</span>
</span><span class='line'><span class="n">trace</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">traceback</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x1004a8128</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;./with_example02.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">19</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">sample</span><span class="o">.</span><span class="n">do_something</span><span class="p">()</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;./with_example02.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">15</span><span class="p">,</span> <span class="ow">in</span> <span class="n">do_something</span>
</span><span class='line'>    <span class="n">bar</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'><span class="ne">ZeroDivisionError</span><span class="p">:</span> <span class="n">integer</span> <span class="n">division</span> <span class="ow">or</span> <span class="n">modulo</span> <span class="n">by</span> <span class="n">zero</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Essentially, if there are exceptions being thrown from anywhere inside the block, the __exit__() function for the object is called. As you can see, the type, value and the stack trace associated with the exception thrown is passed to this function. In this case, you can see that there was a ZeroDivisionError exception being thrown. People implementing libraries can write code that clean up resources, close files etc. in their __exit__() functions.<br/>
實際上，在with後面的代碼塊拋出任何異常時，__exit__()方法被執行。正如例子所示，異常拋出時，與之關聯的type，value和stack trace傳給__exit__()方法，因此拋出的ZeroDivisionError異常被打印出來了。開發庫時，清理資源，關閉文件等等操作，都可以放在__exit__方法當中。</p>

<p>Thus, Python’s with is a nifty construct that makes code a little less verbose and makes cleaning up during exceptions a bit easier.<br/>
因此，Python的with語句是提供一個有效的機制，讓代碼更簡練，同時在異常產生時，清理工作更簡單。</p>

<p>I have put the code examples given here on <a href="https://github.com/sdqali/python_dojo/tree/master/with">Github</a>.<br/>
示例代碼可以在<a href="https://github.com/sdqali/python_dojo/tree/master/with">Github</a>上面找到。</p>

<p>譯註：本文原文見<a href="http://blog.sdqali.in/blog/2012/07/09/understanding-pythons-with/">Understanding Python&rsquo;s &ldquo;With&rdquo; Statement</a></p>

<p><a href="http://python.42qu.com/11155501">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fading away]]></title>
    <link href="http://www.aprilzephyr.com/blog/04022014/fading-away/"/>
    <updated>2014-04-02T20:21:50+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04022014/fading-away</id>
    <content type="html"><![CDATA[<p><img src="http://www.aprilzephyr.com/images/fallingleaves.png"></p>

<p>Leaves sway down in sough late autumn winds, desolately, fading away, without one single sign.<!--more--></p>

<p>Fortunately trees&#8217; remaining vigor, notwithstanding in months&#8217; hibernation, new shoots would be pushing out after austere winters eventually.</p>

<p>Be hopeful and persistent, even through quite tough time, leastways&mdash;an opportunity to blossom.</p>

<p>&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 動態類型(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/04022014/python-dong-tai-lei-xing/"/>
    <updated>2014-04-02T15:15:39+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04022014/python-dong-tai-lei-xing</id>
    <content type="html"><![CDATA[<p>Python中只有一個賦值模型</p>

<h4>1. 缺少類型聲明語句的情況</h4>

<p>在Python中，類型是在運行過程中自動決定的，而不是通過代碼聲明。這意味著沒有必要事聲明變量。只要記住，這個概念實質上對變量，對象和它們之間的關系都適用。那麽這個概念也容易理解並掌握。</p>

<p><strong>A 變量，對象和引用</strong><br/>
變量創建：一個變量，當代碼第一次給它賦值時它就被創建了。之後的賦值將會改變已創建的變量名的值。Python在代碼運行之前先檢測變量名，可以當成是最初的賦值創建變量。<!--more--><br/>
變量類型：變量永遠不會有任何的它關聯的類型信息或約束。類型的概念是存在於對象中而不是變量中。變量原本是通用的。它只是在一個特定的時間點，簡單地引用了一個特定的對像而已。<br/>
變量的使用：當變量出現在表達式中時，它會馬上被當前引用的對像所代替，無論這個對象是什麽類型。<br/>
此外，所有的變量都必須在其使用前明確地賦值。使用未賦值的變量會產生錯誤。<br/>
<code>&gt;&gt;&gt;a=3</code></p>

<p>在概念上說，Python將執行三個不同的步驟去完成這個請求。<br/>
1) 創建一個對象來代表值3<br/>
2) 創建一個變量a，如果它還沒有創建的話<br/>
3) 將變量與新的對象3連接</p>

<p>在python中從變量到對象的連接稱作引用。引用是一種關系，以內存中的指針形式實現。<br/>
* 變量 是一個系統表的元素，擁有指向對象的連接空間。<br/>
* 對象 是被分配的一塊內存，有足夠的空間去表現它們所代表的值。<br/>
* 引用 是自動形成的從變量到對象的指針。</p>

<p>每一個對象都用兩個標準的頭部信息：一個類型標誌符去標識這個對象的類型，以及一個引用的計數器，用來決定是不是可以回收這個對象。</p>

<p><strong>B 類型屬於對象，而不是變量</strong><br/>
Python中的類型是與對象相關聯的，而不是和變量關聯。<br/>
變量沒有類型，變量指向對象。對象有類型，知道自己的類型，每個對象都包含了一個頭部信息，其中標記了這個對象的類型。</p>

<p><strong>C 對象的垃圾收集</strong><br/>
對象生命結束時發生了什麽變化？<br/>
每當一個變量名被賦與了一個新的對象，之前的那個對象占用的空間就會被收回（如果它沒有被其他變量名和對象所引用).這種自動回收對象空間的技術稱作垃圾收集。<br/>
在內部，Python是通過保持用每個對象中的計數器記錄引用指到這個對象上的次數來完成這一功能。一旦（並精確在同一時間）這個計數器被設置為零，這個對象的內存空間就會自動收回。垃圾收集最直接的，可感受到的好處就是這意味著可以在腳本中任意使用對象而不需要考慮釋放內存空間。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; x=42
</span><span class='line'>&gt;&gt;&gt; id(x)
</span><span class='line'>674748828
</span><span class='line'>&gt;&gt;&gt; x="cli"
</span><span class='line'>&gt;&gt;&gt; id(x)    
</span><span class='line'>676367648</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>2. 共享引用</h4>

<p>上面所講都是單個變量被賦值引用了多個對象的情況。現在，在交互模式下，引入另一個變量，並看一下變量名和對象的變化。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; a=10
</span><span class='line'>&gt;&gt;&gt; b=a 
</span><span class='line'>&gt;&gt;&gt; id(a)
</span><span class='line'>674749212
</span><span class='line'>&gt;&gt;&gt; id(b)
</span><span class='line'>674749212</span></code></pre></td></tr></table></div></figure>


<p>
第二行會使用python創建變量b。使用的是變量a,並且它在這裏沒有被賦值，所以它被替換成其應用的對象10，從而b也成為這個對象的一個引用。實際效果就是變量a和b都引用相同的對象（也就是說指向了相同的內存空間。在Python中稱作是共享引用&mdash;多個變量名應用了同一個對象。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; a=10 
</span><span class='line'>&gt;&gt;&gt; b=a  
</span><span class='line'>&gt;&gt;&gt; a='cli'
</span><span class='line'>&gt;&gt;&gt; id(a) 
</span><span class='line'>676367648
</span><span class='line'>&gt;&gt;&gt; id(b)
</span><span class='line'>674749212</span></code></pre></td></tr></table></div></figure>


<p>
變量a改變了，但是不影響變量b.這完全可以說明變量b是指向對象10內存空間的。</p>

<p>在ptyhon中，變量總是一個指向對象的指針，而不是可以改變的內存區域的標簽。給一變量賦一個新的值，並不是替換了原始的對象，而是讓這個變量去引用完全不同的一個對象。實際的效果就是對一個變量賦值，僅僅會影響那個被賦值的變量。</p>

<p><strong>A 共享引用和在原處修改</strong><br/>
有一些對象和類型確實會在實地改變對象。例如，在一個列表中對一個偏移進行賦值確實會改變這個列表對象，而不是生成一個新的列表對象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; T1=[11,12,13]
</span><span class='line'>&gt;&gt;&gt; T2=T1
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T1=22
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>22
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>這個和先前一樣T1改變了T2沒有改變，T2改變也不影響T1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; T1=[11,12,13]
</span><span class='line'>&gt;&gt;&gt; T2=T1
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2[1]=33     
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[33, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[33, 12, 13]</span></code></pre></td></tr></table></div></figure>


<p>
發現T2改變了，T1也跟這改變了<br/>
同樣T1改變了，T2也改變了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; T1[1]=99  
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[33, 99, 13]
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[33, 99, 13]</span></code></pre></td></tr></table></div></figure>


<p>
這裏T1沒有改變，改變了T1所引用對象的一個元素。這類修改會覆蓋列表對象中的某部分。因為這個列表對象是與其他對象共享的（被其他對象引用），那麽一個像這樣在原處的改變不僅僅會對T1有影響。必須意識到當做了這樣的修改，它會影響程序的其他部分。</p>

<p>如果不想要這樣的現象發生，需要Python拷貝對象，而不是創建引用。方法包括內置列表函數以及標準庫的copy模塊，最常用的辦法就是從頭到尾的分片T1[:]</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; T1=[11,12,13]
</span><span class='line'>&gt;&gt;&gt; T2=T1[:]
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T1[0]=99
</span><span class='line'>&gt;&gt;&gt; T1
</span><span class='line'>[99, 12, 13]
</span><span class='line'>&gt;&gt;&gt; T2
</span><span class='line'>[11, 12, 13]
</span><span class='line'>&gt;&gt;&gt; id(T1)
</span><span class='line'>676366604
</span><span class='line'>&gt;&gt;&gt; id(T2)
</span><span class='line'>675542060</span></code></pre></td></tr></table></div></figure>


<p>
T1和T2指向不同的對象，所以不會相互影響。<br/>
註意：這種分片技術不會引用在其他的可變的核心類型上（字典，因為它們不是序列），對字典應該使用D.copy（）方法.而且，註意標準庫中的copy模塊有一個通用的拷貝任意對象的調用，也有一個拷貝嵌套對象的結構的調用.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; X={'name':'cli','age':27}  
</span><span class='line'>&gt;&gt;&gt; import copy
</span><span class='line'>&gt;&gt;&gt; Y=copy.copy(X)
</span><span class='line'>&gt;&gt;&gt; X
</span><span class='line'>{'age': 27, 'name': 'cli'}
</span><span class='line'>&gt;&gt;&gt; Y
</span><span class='line'>{'age': 27, 'name': 'cli'}
</span><span class='line'>&gt;&gt;&gt; id(X)
</span><span class='line'>676370468
</span><span class='line'>&gt;&gt;&gt; id(Y)
</span><span class='line'>676414436
</span><span class='line'>&gt;&gt;&gt; X={'name':{'FirstName':'cli','LastName':'cli'},'age':27}    
</span><span class='line'>&gt;&gt;&gt; X
</span><span class='line'>{'age': 27, 'name': {'LastName': 'cli', 'FirstName': 'cli'}}
</span><span class='line'>&gt;&gt;&gt; Y=copy.copy(X)
</span><span class='line'>&gt;&gt;&gt; Y
</span><span class='line'>{'age': 27, 'name': {'LastName': 'cli', 'FirstName': 'cli'}}
</span><span class='line'>&gt;&gt;&gt; Z=copy.deepcopy(X) 
</span><span class='line'>&gt;&gt;&gt; Z
</span><span class='line'>{'age': 27, 'name': {'LastName': 'cli', 'FirstName': 'cli'}}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>B 共享引用和相等</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; x=33
</span><span class='line'>&gt;&gt;&gt; x='cli'</span></code></pre></td></tr></table></div></figure>


<p>
因為Python緩存並復用了小的整數和小的字符串，就像前文提到的那樣，這裏對象33也許不像前期所說的被收回，相反，它將可能仍保持在一個系統表中，等待下一次你的代碼生成另一個33來利用。盡快如此，大多數種類的對象都會在不再引用時馬上回收。對於那些不會被回收的，緩沖機制與代碼並沒有什麽關系。</p>

<p>判斷是否相等</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; L=[1,2,3]
</span><span class='line'>&gt;&gt;&gt; M=L
</span><span class='line'>&gt;&gt;&gt; L==M
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; L is M
</span><span class='line'>True</span></code></pre></td></tr></table></div></figure>


<p>
==檢查對象是否有相同的值。 is操作符，檢查對象的同一性。如果兩個變量名精準地指向同一個對象，它會返回True。所以這是一種更嚴格的相等測試。<br/>
實際上,is只是比較現實引用的指針。所以如果必要的話是代碼中檢測共享引用的一種方法。如果變量名引用值相等。但是為不同的對象，它的返回值將是False.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; L=[1,2,3]
</span><span class='line'>&gt;&gt;&gt; M=[1,2,3]
</span><span class='line'>&gt;&gt;&gt; L==M
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; L is M
</span><span class='line'>False
</span><span class='line'>&gt;&gt;&gt; id(L)
</span><span class='line'>676367788
</span><span class='line'>&gt;&gt;&gt; id(M)
</span><span class='line'>676367724</span></code></pre></td></tr></table></div></figure>


<p>
通過id()函數可以看到兩個變量指向不同的對象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; X=33
</span><span class='line'>&gt;&gt;&gt; Y=33
</span><span class='line'>&gt;&gt;&gt; X==Y
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; X is Y
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; id(X)
</span><span class='line'>674748936
</span><span class='line'>&gt;&gt;&gt; id(Y)
</span><span class='line'>674748936</span></code></pre></td></tr></table></div></figure>


<p>
這個is測試返回True因為小的整數和字符串被緩存被復用了。
如果想更進一步了解，可以向Python查詢一個對象應用的次數：在sys模塊中的getrefcount函數返回對象應用的次數。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import sys
</span><span class='line'>&gt;&gt;&gt; sys.getrefcount(33)
</span><span class='line'>13
</span><span class='line'>&gt;&gt;&gt; sys.getrefcount(1) 
</span><span class='line'>427
</span><span class='line'>&gt;&gt;&gt; sys.getrefcount(00)
</span><span class='line'>296
</span><span class='line'>&gt;&gt;&gt; sys.getrefcount(99)
</span><span class='line'>6</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><a href="http://ipseek.blog.51cto.com/1041109/786518">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[網頁重定向的方法(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/04022014/wang-ye-zhong-ding-xiang-de-fang-fa/"/>
    <updated>2014-04-02T10:58:43+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04022014/wang-ye-zhong-ding-xiang-de-fang-fa</id>
    <content type="html"><![CDATA[<h4>1. 使用HTTP通訊協定301 Moved Permanently來完成轉導網址(永久轉址)</h4>

<p><em>建議使用，不會對SEO有不良影響</em></p>

<h5>PHP程式範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nx">header</span><span class="p">(</span><span class="err">“</span><span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">301</span> <span class="nx">Moved</span> <span class="nx">Permanently</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">    header(“Location: http://www.new-url.com/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;p&gt;The document has moved &lt;a href=&quot;http://www.new-url.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <!--more-->
註<br/>
1) 使用者的瀏覽器必須根據HTTP header的Location欄位值(稱做URI)來轉導網址。<br/>
2) 除非Request Method是HEAD，不然伺服器端回覆的訊息內必須包含一短的新網址的連結(hyperlink)資訊。</p>

<h5>ASP程式範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;%@</span> <span class="nx">Language</span><span class="o">=</span><span class="nx">VBScript</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>    <span class="nx">Response</span><span class="o">.</span><span class="nx">Status</span><span class="o">=</span><span class="s2">&quot;301 Moved Permanently&quot;</span>
</span><span class='line'>    <span class="nx">Response</span><span class="o">.</span><span class="nx">AddHeader</span> <span class="err">“</span><span class="nx">Location</span><span class="s2">&quot;, &quot;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="k">new</span><span class="o">-</span><span class="nx">url</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    Response.End</span>
</span><span class='line'><span class="s2">%&gt;</span>
</span><span class='line'><span class="s2">&lt;p&gt;The document has moved &lt;a href=&quot;</span><span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="k">new</span><span class="o">-</span><span class="nx">url</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="s2">&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>ASP.NET程式範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">runat</span><span class="o">=</span><span class="s2">&quot;server&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="nx">void</span> <span class="nx">Page_Load</span><span class="p">(</span><span class="nx">object</span> <span class="nx">sender</span><span class="p">,</span> <span class="nx">System</span><span class="o">.</span><span class="nx">EventArgs</span> <span class="nx">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">Response</span><span class="o">.</span><span class="nx">Status</span> <span class="o">=</span> <span class="err">“</span><span class="mi">301</span> <span class="nx">Moved</span> <span class="nx">Permanently</span><span class="s2">&quot;;</span>
</span><span class='line'><span class="s2">    Response.AddHeader(“Location&quot;</span><span class="p">,</span><span class="s2">&quot;http://www.new-url.com/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">The</span> <span class="nx">document</span> <span class="nx">has</span> <span class="nx">moved</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://www.new-url.com/&quot;</span><span class="o">&gt;</span><span class="nx">here</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>在 .htaccess/httpd.conf檔案中設定—轉整domain</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Options</span> <span class="o">+</span><span class="nx">FollowSymLinks</span>
</span><span class='line'><span class="nx">RewriteEngine</span> <span class="nx">on</span>
</span><span class='line'><span class="nx">RewriteRule</span> <span class="o">^</span><span class="p">(</span><span class="o">.*</span><span class="p">)</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="k">new</span><span class="o">-</span><span class="nx">domain</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="err">$</span><span class="mi">1</span> <span class="p">[</span><span class="nx">R</span><span class="o">=</span><span class="mi">301</span><span class="p">,</span><span class="nx">L</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>在 .htaccess/httpd.conf檔案中設定—轉到新的www.</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Options</span> <span class="o">+</span><span class="nx">FollowSymlinks</span>
</span><span class='line'><span class="nx">RewriteEngine</span> <span class="nx">on</span>
</span><span class='line'><span class="nx">RewriteCond</span> <span class="o">%</span><span class="p">{</span><span class="nx">http_host</span><span class="p">}</span> <span class="o">^</span><span class="nx">old</span><span class="o">-</span><span class="nx">domain</span><span class="o">.</span><span class="nx">com</span> <span class="p">[</span><span class="nx">NC</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RewriteRule</span> <span class="o">^</span><span class="p">(</span><span class="o">.*</span><span class="p">)</span><span class="err">$</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="k">new</span><span class="o">-</span><span class="nx">domain</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="err">$</span><span class="mi">1</span> <span class="p">[</span><span class="nx">R</span><span class="o">=</span><span class="mi">301</span><span class="p">,</span><span class="nx">NC</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>2. 使用HTTP/1.1通訊協定302 Found來完成轉導網址</h4>

<p><em>不建議使用，會對新網站SEO有不良影響</em></p>

<h5>PHP程式範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nx">header</span><span class="p">(</span><span class="err">“</span><span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">302</span> <span class="nx">Found</span><span class="s2">&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    header(“Location: http://www.new-url.com/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;p&gt;The document has moved &lt;a href=&quot;http://www.new-url.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>(…其他ASP, ASP.NET程式及設定.htaccess/httpd.conf方法，此處略…)</p>

<p>註<br/>
1) 302，在HTTP/1.0是『Moved Temporarily』；HTTP/1.1是『Found』，會根據HTTP header的Location欄位值(稱做URI)來轉導網址。但是很多網路上的文章會直接稱302是Moved Temporatily。<br/>
2) 除非Request Method是HEAD，不然伺服器端回覆的訊息內必須包含一短的新網址的連結(hyperlink)資訊。<br/>
3) HTTP 1.1中增訂了『307 Temporary Redirect』，307碼時只會根據GET Request轉導網址。<br/>
4) 更多的HTTP 302細節和307會被再增訂出來的原因<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">請參考</a>。</p>

<h4>3. HTML的refresh meta tag來轉導網址</h4>

<p><em>非常不建議使用，會對新網站SEO有不良影響。有些文章寫說要用時最好秒數設定大於10秒以避免對頁面的SEO不利。</em></p>

<h5>在HTML檔案的HEAD中，範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;refresh&quot;</span> <span class="na">content=</span><span class="s">&quot;0;url=http://www.new-url.com/&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>4. 用JavaScript來達到轉導網址(放在 HTML的<head>…</head>或<body>…<body>中</h4>

<p><em>因為搜尋引擎的bot一般都不理會JavaScript，所以做什麼動作不會被檢查。這意味著要實做『點擊計算(click counting)後再轉導到目的網址的話，用這個方法比較好(302或refresh都是不好的方法)』。如果使用者按瀏覽器的『上一頁』按鈕，不會跳回轉導頁面。</em></p>

<h5>直接在HTML的HEAD中用轉導網址JavaScript範例:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;JavaScript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="err">–</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="err">“</span><span class="nx">http</span><span class="o">:</span><span class="c1">//www.new-url.com&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//–&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>JavaScript內容同上例，但是把它放到外部的一個 .js 檔案，然後<head>…</head>中只要寫:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;JavaScript&quot;</span> <span class="na">src=</span><span class="s">&quot;redirect.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>也是使用JavaScript，但是額外透過『表單』來完成:</h5>

<p><em>因為搜尋引擎的bot一般都不理會『表單』，所以做什麼動作不會被檢查。</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;JavaScript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="err">–</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">myform</span><span class="p">.</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="c1">//–&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;myform&quot;</span> <span class="na">action=</span><span class="s">&quot;http://www.new-url.com/&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>額外討論:</h4>

<ol>
<li>301/302有時會被一些人用作旁門走道方法，在玩『PR劫持』(如<a href="http://www.seozac.com/google/pr-hijack/">這篇文章</a>所述)，更多的一些手法討論請看<a href="http://www.loriswebs.com/hijacking_web_pages.html">這篇文章</a>或用 hijack 當 KeyWord 去查查。</li>
<li>302在之前會造成bot誤以為是轉導到的網站在惡搞，而將轉導到的網站從索引中除名。所以會變得無法防止別人以此方法攻擊自己的 URL。現或許已更正。(詳情請看<a href="http://www.tonyspencer.com/2004/12/10/tracker2php-pagejacking-via-http-302-redirect-google-bug/">這裡</a>)</li>
<li>當然，refresh也能如上述302一樣去惡搞別人的網站。</li>
</ol>


<p><a href="http://rental.zhupiter.com/postshow_184_1_1.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Testing]]></title>
    <link href="http://www.aprilzephyr.com/blog/04012014/software-testing/"/>
    <updated>2014-04-01T16:24:56+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/04012014/software-testing</id>
    <content type="html"><![CDATA[<h3>1. Overview</h3>

<p>Software testing provide an objective, independent view to allow the business to appreciate and understand the risks of software, product or service implementation. Test techniques include, but are not limited to the process of executing a program or application with the intent of finding software bugs (errors or other defects).<!--more--></p>

<p>Software testing can be stated as the process of validating and verifying that a computer program/application/product:<br/>
* meets the requirements that guided its design and development,<br/>
* works as expected,<br/>
* can be implemented with the same characteristics,
and satisfies the needs of stakeholders.</p>

<p>Software testing, depending on the testing method employed, can be implemented at any time in the software development process.</p>

<p>Testing can never completely identify all the defects within software. Instead, it furnishes a criticism or comparison that compares the state and behavior of the product against oracles—principles or mechanisms by which someone might recognize a problem. These oracles may include (but are not limited to) specifications, contracts, comparable products, past versions of the same product, inferences about intended or expected purpose, user or customer expectations, relevant standards, applicable laws, or other criteria.</p>

<p>A primary purpose of testing is to detect software failures so that defects may be discovered and corrected. Testing cannot establish that a product functions properly under all conditions but can only establish that it does not function properly under specific conditions. The scope of software testing often includes examination of code as well as execution of that code in various environments and conditions as well as examining the aspects of code: does it do what it is supposed to do and do what it needs to do. A testing organization may be separate from the development team. There are various roles for testing team members. Information derived from software testing may be used to correct the process by which software is developed.</p>

<p>Software testing is the process of attempting to make the assessment that whether the software product will be acceptable to its end users, its target audience, its purchasers and other stakeholders..</p>

<h4>A Defects and failures</h4>

<p>Not all software defects are caused by coding errors. One common source of expensive defects is requirement gaps, e.g., unrecognized requirements which result in errors of omission by the program designer. Requirement gaps can often be non-functional requirements such as testability, scalability, maintainability, usability, performance, and security.</p>

<h4>B Input combinations and preconditions</h4>

<p>A fundamental problem with software testing is that testing under all combinations of inputs and preconditions (initial state) is not feasible. More significantly, non-functional dimensions of quality (how it is supposed to be versus what it is supposed to do)—usability, scalability, performance, compatibility, reliability—can be highly subjective; something that constitutes sufficient value to one person may be intolerable to another.</p>

<p>Software developers can&rsquo;t test everything, but they can use combinatorial test design to identify the minimum number of tests needed to get the coverage they want.</p>

<h3>2. Testing methods</h3>

<h4>A Static vs. dynamic testing</h4>

<p>Reviews, walkthroughs, or inspections are referred to as static testing, whereas actually executing programmed code with a given set of test cases is referred to as dynamic testing.</p>

<p>Static testing involves verification, whereas dynamic testing involves validation.</p>

<h4>B The box approach</h4>

<p><em>1) White-box testing</em><br/>
White-box testing (also known as clear box testing, glass box testing, transparent box testing and structural testing) tests internal structures or workings of a program, as opposed to the functionality exposed to the end-user. In white-box testing an internal perspective of the system, as well as programming skills, are used to design test cases. The tester chooses inputs to exercise paths through the code and determine the appropriate outputs. This is analogous to testing nodes in a circuit.</p>

<p>While white-box testing can be applied at the unit, integration and system levels of the software testing process, it is usually done at the unit level. It can test paths within a unit, paths between units during integration, and between subsystems during a system–level test. Though this method of test design can uncover many errors or problems, it might not detect unimplemented parts of the specification or missing requirements.</p>

<p>Techniques used in white-box testing include:<br/>
* API testing (application programming interface) – testing of the application using public and private APIs<br/>
* Code coverage – creating tests to satisfy some criteria of code coverage (e.g., the test designer can create tests to cause all statements in the program to be executed at least once)<br/>
* Fault injection methods – intentionally introducing faults to gauge the efficacy of testing strategies<br/>
* Mutation testing methods<br/>
* Static testing methods</p>

<p>Code coverage tools can evaluate the completeness of a test suite that was created with any method, including black-box testing. This allows the software team to examine parts of a system that are rarely tested and ensures that the most important function points have been tested. Code coverage as a software metric can be reported as a percentage for:<br/>
* Function coverage, which reports on functions executed<br/>
* Statement coverage, which reports on the number of lines executed to complete the test</p>

<p>100% statement coverage ensures that all code paths, or branches (in terms of control flow) are executed at least once. This is helpful in ensuring correct functionality, but not sufficient since the same code may process different inputs correctly or incorrectly.</p>

<p><em>2) Black-box testing</em><br/>
Black-box testing treats the software as a &ldquo;black box&rdquo;, examining functionality without any knowledge of internal implementation. The testers are only aware of what the software is supposed to do, not how it does it. Black-box testing methods include: equivalence partitioning, boundary value analysis, all-pairs testing, state transition tables, decision table testing, fuzz testing, model-based testing, use case testing, exploratory testing and specification-based testing.</p>

<p>One advantage of the black box technique is that no programming knowledge is required. Whatever biases the programmers may have had, the tester likely has a different set and may emphasize different areas of functionality.</p>

<p>This method of test can be applied to all levels of software testing: unit, integration, system and acceptance. It typically comprises most if not all testing at higher levels, but can also dominate unit testing as well.</p>

<p><em>3) Grey-box testing</em><br/>
Grey-box testing involves having knowledge of internal data structures and algorithms for purposes of designing tests, while executing those tests at the user, or black-box level. The tester is not required to have full access to the software&rsquo;s source code. Manipulating input data and formatting output do not qualify as grey-box, because the input and output are clearly outside of the &ldquo;black box&rdquo; that we are calling the system under test. This distinction is particularly important when conducting integration testing between two modules of code written by two different developers, where only the interfaces are exposed for test.</p>

<p>Typically, a grey-box tester will be permitted to set up an isolated testing environment with activities such as seeding a database. The tester can observe the state of the product being tested after performing certain actions such as executing SQL statements against the database and then executing queries to ensure that the expected changes have been reflected. Grey-box testing implements intelligent test scenarios, based on limited information. This will particularly apply to data type handling, exception handling, and so on.</p>

<h3>3. Testing levels</h3>

<h4>A Unit testing</h4>

<p>Unit testing, also known as component testing, refers to tests that verify the functionality of a specific section of code, usually at the function level. In an object-oriented environment, this is usually at the class level, and the minimal unit tests include the constructors and destructors.</p>

<p>Unit testing aims to eliminate construction errors before code is promoted to QA; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and QA process.</p>

<p>Depending on the organization&rsquo;s expectations for software development, unit testing might include static code analysis, data flow analysis metrics analysis, peer code reviews, code coverage analysis and other software verification practices.</p>

<h4>B Integration testing</h4>

<p>Integration testing is any type of software testing that seeks to verify the interfaces between components against a software design. Software components may be integrated in an iterative way or all together.</p>

<p>Integration testing works to expose defects in the interfaces and interaction between integrated components (modules). Progressively larger groups of tested software components corresponding to elements of the architectural design are integrated and tested until the software works as a system.</p>

<h4>C Component interface testing</h4>

<p>The practice of component interface testing can be used to check the handling of data passed between various units, or subsystem components, beyond full integration testing between those units. The data being passed can be considered as &ldquo;message packets&rdquo; and the range or data types can be checked, for data generated from one unit, and tested for validity before being passed into another unit. Tests can include checking the handling of some extreme data values while other interface variables are passed as normal values. Unusual data values in an interface can help explain unexpected performance in the next unit. Component interface testing is a variation of black-box testing, with the focus on the data values beyond just the related actions of a subsystem component.</p>

<h4>D System testing</h4>

<p>System testing, or end-to-end testing, tests a completely integrated system to verify that it meets its requirements. For example, a system test might involve testing a logon interface, then creating and editing an entry, plus sending or printing results, followed by summary processing or deletion (or archiving) of entries, then logoff.</p>

<p>In addition, the software testing should ensure that the program, as well as working as expected, does not also destroy or partially corrupt its operating environment or cause other processes within that environment to become inoperative (this includes not corrupting shared memory, not consuming or locking up excessive resources and leaving any parallel processes unharmed by its presence).</p>

<h4>E Acceptance testing</h4>

<p>At last the system is delivered to the user for Acceptance testing.</p>

<h3>4. Testing types</h3>

<h4>A Installation testing</h4>

<p>An installation test assures that the system is installed correctly and working at actual customer&rsquo;s hardware.</p>

<h4>B Compatibility testing</h4>

<p>A common cause of software failure (real or perceived) is a lack of its compatibility with other application software, operating systems (or operating system versions), or target environments that differ greatly from the original (such as a terminal or GUI application intended to be run on the desktop now being required to become a web application, which must render in a web browser).  This results in the unintended consequence that the latest work may not function on earlier versions of the target environment, or on older hardware that earlier versions of the target environment was capable of using.</p>

<h4>C Smoke and sanity testing</h4>

<p>Sanity testing determines whether it is reasonable to proceed with further testing. Smoke testing consists of minimal attempts to operate the software, designed to determine whether there are any basic problems that will prevent it from working at all. Such tests can be used as build verification test.</p>

<h4>D Regression testing</h4>

<p>Regression testing focuses on finding defects after a major code change has occurred. Specifically, it seeks to uncover software regressions, as degraded or lost features, including old bugs that have come back. Such regressions occur whenever software functionality that was previously working, correctly, stops working as intended. Typically, regressions occur as an unintended consequence of program changes, when the newly developed part of the software collides with the previously existing code.</p>

<h4>E Acceptance testing</h4>

<h4>F Alpha testing</h4>

<p>Alpha testing is simulated or actual operational testing by potential users/customers or an independent test team at the developers&#8217; site. Alpha testing is often employed for off-the-shelf software as a form of internal acceptance testing, before the software goes to beta testing.</p>

<h4>G Beta testing</h4>

<p>Beta testing comes after alpha testing and can be considered a form of external user acceptance testing. Beta versions, of software are released to a limited audience outside of the programming team.</p>

<h4>H Functional vs non-functional testing</h4>

<p>Functional testing refers to activities that verify a specific action or function of the code. These are usually found in the code requirements documentation, although some development methodologies work from use cases or user stories.
Non-functional testing refers to aspects of the software that may not be related to a specific function or user action, such as scalability or other performance, behavior under certain constraints, or security. Testing will determine the breaking point, the point at which extremes of scalability or performance leads to unstable execution. Non-functional requirements tend to be those that reflect the quality of the product, particularly in the context of the suitability perspective of its users.</p>

<h4>I Destructive testing</h4>

<p>Destructive testing attempts to cause the software or a sub-system to fail. It verifies that the software functions properly even when it receives invalid or unexpected inputs, thereby establishing the robustness of input validation and error-management routines.</p>

<h4>J Software performance testing</h4>

<p>Performance testing is generally executed to determine how a system or sub-system performs in terms of responsiveness and stability under a particular workload. It can also serve to investigate, measure, validate or verify other quality attributes of the system, such as scalability, reliability and resource usage.</p>

<p>Load testing is primarily concerned with testing that the system can continue to operate under a specific load, whether that be large quantities of data or a large number of users. This is generally referred to as software scalability. The related load testing activity of when performed as a non-functional activity is often referred to as endurance testing. Volume testing is a way to test software functions even when certain components (for example a file or database) increase radically in size. Stress testing is a way to test reliability under unexpected or rare workloads. Stability testing (often referred to as load or endurance testing) checks to see if the software can continuously function well in or above an acceptable period.</p>

<p>The terms load testing, performance testing, scalability testing, and volume testing, are often used interchangeably. Real-time software systems have strict timing constraints.</p>

<h4>K Usability testing</h4>

<p>Usability testing is needed to check if the user interface is easy to use and understand. It is concerned mainly with the use of the application.</p>

<h4>L Accessibility testing</h4>

<h4>M Security testing</h4>

<h4>N Other testings</h4>

<h3>5. Testing process</h3>

<h4>A Traditional waterfall development model</h4>

<p>A common practice of software testing is that testing is performed by an independent group of testers after the functionality is developed, before it is shipped to the customer. This practice often results in the testing phase being used as a project buffer to compensate for project delays, thereby compromising the time devoted to testing.</p>

<p>Another practice is to start software testing at the same moment the project starts and it is a continuous process until the project finishes.</p>

<h4>B Agile or Extreme development model</h4>

<p>In contrast, some emerging software disciplines such as extreme programming and the agile software development movement, adhere to a &ldquo;test-driven software development&rdquo; model. In this process, unit tests are written first, by the software engineers (often with pair programming in the extreme programming methodology). Of course these tests fail initially; as they are expected to. Then as code is written it passes incrementally larger portions of the test suites. The test suites are continuously updated as new failure conditions and corner cases are discovered, and they are integrated with any regression tests that are developed. Unit tests are maintained along with the rest of the software source code and generally integrated into the build process (with inherently interactive tests being relegated to a partially manual build acceptance process). The ultimate goal of this test process is to achieve continuous integration where software updates can be published to the public frequently.</p>

<p>This methodology increases the testing effort done by development, before reaching any formal testing team. In some other development models, most of the test execution occurs after the requirements have been defined and the coding process has been completed.</p>

<h4>C Top-down and bottom-up</h4>

<p>Bottom Up Testing is an approach to integrated testing where the lowest level components (modules, procedures, and functions) are tested first, then integrated and used to facilitate the testing of higher level components. After the integration testing of lower level integrated modules, the next level of modules will be formed and can be used for integration testing. The process is repeated until the components at the top of the hierarchy are tested. This approach is helpful only when all or most of the modules of the same development level are ready. This method also helps to determine the levels of software developed and makes it easier to report testing progress in the form of a percentage.</p>

<p>Top Down Testing is an approach to integrated testing where the top integrated modules are tested and the branch of the module is tested step by step until the end of the related module.</p>

<h4>D A sample testing cycle</h4>

<ul>
<li>Requirement analysis</li>
<li>Test planning</li>
<li>Test development</li>
<li>Test execution</li>
<li>Test reporting</li>
<li>Test result analysis</li>
<li>Defect retesting</li>
<li>Regression testing</li>
<li>Test closure</li>
</ul>


<h3>6. Automated testing</h3>

<h4>A Testing tools</h4>

<ul>
<li>Program monitors, permitting full or partial monitoring of program code including:

<ul>
<li>Instruction set simulator, permitting complete instruction level monitoring and trace facilities</li>
<li>Program animation, permitting step-by-step execution and conditional breakpoint at source level or in machine code</li>
<li>Code coverage reports</li>
</ul>
</li>
<li>Formatted dump or symbolic debugging, tools allowing inspection of program variables on error or at chosen points</li>
<li>Automated functional GUI testing tools are used to repeat system-level tests through the GUI</li>
<li>Benchmarks, allowing run-time performance comparisons to be made</li>
<li>Performance analysis (or profiling tools) that can help to highlight hot spots and resource usage</li>
</ul>


<h4>B Measurement in software testing</h4>

<p>Usually, quality is constrained to such topics as correctness, completeness, security, but can also include more technical requirements as described under the ISO standard ISO/IEC 9126, such as capability, reliability, efficiency, portability, maintainability, compatibility, and usability.</p>

<p>There are a number of frequently used software metrics, or measures, which are used to assist in determining the state of the software or the adequacy of the testing.</p>

<h3>7. Testing artifacts</h3>

<ul>
<li>Test plan</li>
<li>Traceability matrix</li>
<li>Test case</li>
<li>Test script</li>
<li>Test suite</li>
<li>Test fixture or test data</li>
<li>Test harness</li>
</ul>


<h3>8. Related process</h3>

<h4>A Software verification and validation</h4>

<ul>
<li>Verification: Have we built the software right? (i.e., does it implement the requirements).</li>
<li>Validation: Have we built the right software? (i.e., do the requirements satisfy the customer).</li>
</ul>


<p>According to the IEEE Standard Glossary of Software Engineering Terminology:<br/>
* Verification is the process of evaluating a system or component to determine whether the products of a given development phase satisfy the conditions imposed at the start of that phase.<br/>
* Validation is the process of evaluating a system or component during or at the end of the development process to determine whether it satisfies specified requirements.</p>

<p>According to the ISO 9000 standard:<br/>
* Verification is confirmation by examination and through provision of objective evidence that specified requirements have been fulfilled.
* Validation is confirmation by examination and through provision of objective evidence that the requirements for a specific intended use or application have been fulfilled.</p>

<h4>B Software quality assurance</h4>

<p>Software testing is a part of the software quality assurance (SQA) process. In SQA, software process specialists and auditors are concerned for the software development process rather than just the artifacts such as documentation, code and systems. They examine and change the software engineering process itself to reduce the number of faults that end up in the delivered software: the so-called &ldquo;defect rate&rdquo;. What constitutes an &ldquo;acceptable defect rate&rdquo; depends on the nature of the software; A flight simulator video game would have much higher defect tolerance than software for an actual airplane. Although there are close links with SQA, testing departments often exist independently, and there may be no SQA function in some companies.</p>

<p>Software testing is a task intended to detect defects in software by contrasting a computer program&rsquo;s expected results with its actual results for a given set of inputs. By contrast, QA (quality assurance) is the implementation of policies and procedures intended to prevent defects from occurring in the first place.</p>

<p><a href="http://en.wikipedia.org/wiki/Software_testing">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 文件處理]]></title>
    <link href="http://www.aprilzephyr.com/blog/03312014/python-wen-jian-chu-li/"/>
    <updated>2014-03-31T17:48:17+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03312014/python-wen-jian-chu-li</id>
    <content type="html"><![CDATA[<p>python對文件的處理的兩個內建函數：<br/>
open()、file()，這個兩函數提供了初始化輸入\輸出（I\O）操作的通用接口。兩函數的功能相同。<br/>
基本用法：<br/>
file_object=open(filename, access_mode=&lsquo;r&rsquo;, buffering=-1）
file_object 是定義一個打開文件的對象<br/>
access_mode 是打開文件的模式；通常，文件使用模式  &lsquo;r&rsquo;,&lsquo;w&rsquo;,&lsquo;a&rsquo; 來打開，分別代表，讀取，寫入，追加。<br/>
&lsquo;r&rsquo; 模式打開已經存在的文件<br/>
&lsquo;w&rsquo; 模式打開的文件若存在則首先清空，再加入內容。<br/>
&lsquo;a&rsquo; 這個模式是追加內容到文件中<!--more--><br/>
註. &lsquo;b&rsquo; 模式這個是打開二進制文件，對於unix-like/unix類型的系統&#8217;b&#8217;模式是可有可無的。<br/>
buffering 訪問文件所采用的緩沖方式。其中0表示不緩沖，1表示只緩沖一行數據，任何其它大於1的值代表使用給定的值作為緩沖區大小。不給定此參數或者參數為負數都表示使用系統默認的緩沖機制。<br/>
使用open打開文件之後一定記得調用close()關閉文件。</p>

<p>常用的文件訪問方式如下：<br/>
r        以讀方式打開<br/>
rU或Ua   以讀方式打開同時提供通用換行符支持<br/>
w        以寫方式打開<br/>
a        以追加方式打開<br/>
r+       以讀寫方式打開<br/>
w+       以讀寫方式打開<br/>
a+       以讀寫方式打開</p>

<p>文件的輸入：<br/>
python中有三個方法來處理文件內容的輸入：<br/>
read() 一次讀取全部的文件內容。<br/>
readline() 每次讀取文件的一行。<br/>
readlines() 讀取文件的所有行，返回一個字符串列表。</p>

<p>寫數據：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">file_object</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;thefile.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">file_object</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">all_the_text</span><span class="p">)</span>
</span><span class='line'><span class="n">file_object</span><span class="o">.</span><span class="n">close</span><span class="p">(</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>寫入多行：<br/>
<code>file_object.writelines(list_of_text_strings)</code></p>

<p>seek(offset,where):  默認值where=0表示從起始位置移動&#8221;offset&#8221;個字節，where=1表示從當前位置移動&#8221;offset&#8221;個字節，where=2表示從結束位置移動&#8221;offset&#8221;個字節。當有換行時，會被換行截斷。seek()無返回值，故值為None。</p>

<p>tell():  文件的當前位置,即tell是獲得文件指針位置，受seek、readline、read、readlines影響，不受truncate影響。</p>

<p>truncate(n):  從文件的首行首字符開始截斷，截斷文件為n個字符；無n表示從當前位置起截斷；截斷之後n後面的所有字符被刪除。其中win下的換行代表2個字符大小。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="n">fso</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;f:</span><span class="se">\\</span><span class="s">a.txt&quot;</span><span class="p">,</span><span class="s">&#39;w+&#39;</span><span class="p">)</span>    <span class="c">#以w+方式，並非a方式打開文件，故文件原內容被清空</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>    <span class="c">#文件原內容被清空，故此時tell()=0</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;abcde</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>  <span class="c">#寫入文件abcde\n，因為換行\n占兩個字符，故共寫入7個字符</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>  <span class="c">#此時tell()=7</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;fghwm&quot;</span><span class="p">)</span>  <span class="c">#又寫入文件fghwm，故此時文件共寫入7+5 =142個字符</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>  <span class="c">#此時tell()=12 </span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c">#從起始位置即文件首行首字符開始移動1個字符</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>   <span class="c">#此時tell() =1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span>  <span class="n">fso</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>  <span class="c">#讀取當前行，即文件的第1行，但是從第二個字符(tell()+1)開始讀，結果為:bcde。&#39;若換成for讀取整個文件或read讀取整個文件則結果為bcdefghwm     </span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>   <span class="c">#因為readline此時tell() =7,</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">truncate</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>  <span class="c">#從寫入後文件的首行首字符開始階段，截斷為8個字符，即abcde\nf，即文件的內容為：abcde\nf</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">fso</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>   <span class="c">#tell() 依舊為7,並為受truncate(8)影響，但是此時文件內容為abcde\nf</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span>  <span class="n">fso</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>  <span class="c">#從tell()+1=8開始讀取，讀取當前行內容：f</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fso</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python os &amp; sys模塊]]></title>
    <link href="http://www.aprilzephyr.com/blog/03312014/python-os-sys/"/>
    <updated>2014-03-31T16:06:01+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03312014/python-os-sys</id>
    <content type="html"><![CDATA[<p><strong>1. os模塊</strong><br/>
Python os模塊包含普遍的操作系統功能。如果你希望你的程序能夠與平臺無關的話，這個模塊是尤為重要的。</p>

<p>1) os.name<br/>
輸出字符串指示正在使用的平臺。如果是window 則用&#8217;nt&#8217;表示，對於Linux/Unix用戶，它是&#8217;posix&#8217;。<br/>
2) os.mkdir(path [,mode=0777])<br/>
創建目錄<br/>
3) os.rmdir()<br/>
刪除目錄<!--more--><br/>
4) os.mkdirs()<br/>
創建多層目錄，類似系統makedir -p<br/>
5) os.removedirs()<br/>
刪除多層目錄，每層都是空的，除了要刪除的目錄外。<br/>
6) os.getcwd()<br/>
函數得到當前工作目錄，即當前Python腳本工作的目錄路徑。<br/>
7) os.listdir()<br/>
返回指定目錄下的所有文件和目錄名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;.bash_history&#39;</span><span class="p">,</span> <span class="s">&#39;.bundler&#39;</span><span class="p">,</span> <span class="s">&#39;.CFUserTextEncoding&#39;</span><span class="p">,</span> <span class="s">&#39;.config&#39;</span><span class="p">,</span> <span class="s">&#39;.DS_Store&#39;</span><span class="p">,</span> <span class="s">&#39;.gem&#39;</span><span class="p">,</span> <span class="s">&#39;.gitconfig&#39;</span><span class="p">,</span> <span class="s">&#39;.matplotlib&#39;</span><span class="p">,</span> <span class="s">&#39;.ssh&#39;</span><span class="p">,</span> <span class="s">&#39;.Trash&#39;</span><span class="p">,</span> <span class="s">&#39;.Trash-500&#39;</span><span class="p">,</span> <span class="s">&#39;.vim&#39;</span><span class="p">,</span> <span class="s">&#39;.viminfo&#39;</span><span class="p">,</span> <span class="s">&#39;Applications&#39;</span><span class="p">,</span> <span class="s">&#39;Applications (Parallels)&#39;</span><span class="p">,</span> <span class="s">&#39;Desktop&#39;</span><span class="p">,</span> <span class="s">&#39;Documents&#39;</span><span class="p">,</span> <span class="s">&#39;Downloads&#39;</span><span class="p">,</span> <span class="s">&#39;Library&#39;</span><span class="p">,</span> <span class="s">&#39;Movies&#39;</span><span class="p">,</span> <span class="s">&#39;Music&#39;</span><span class="p">,</span> <span class="s">&#39;octopress&#39;</span><span class="p">,</span> <span class="s">&#39;Pictures&#39;</span><span class="p">,</span> <span class="s">&#39;Public&#39;</span><span class="p">,</span> <span class="s">&#39;PycharmProjects&#39;</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\xe7\x99\xbe\xe5\xba\xa6\xe4\xba\x91\xe5\x90\x8c\xe6\xad\xa5\xe7\x9b\x98</span><span class="s">&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
8) os.remove()<br/>
刪除一個文件。<br/>
9) os.system()<br/>
運行shell命令。<br/>
10) os.sep<br/>
可以取代操作系統特定的路徑分隔符。<br/>
11) os.linesep<br/>
給出當前平台使用的行終止符。<br/>
12) os.path.split()<br/>
函數返回一個路徑的目錄名和文件名<br/>
13) os.path.isfile()和os.path.isdir()函數<br/>
分別檢驗給出的路徑是一個文件還是目錄，給出True或者False。<br/>
14) os.path.exists()<br/>
檢驗給出的路徑是否真實的存在，給出True或者False。<br/>
15) os.path.abspath(name)<br/>
獲得絕對路徑。<br/>
16) os.path.normpath(path)<br/>
規範path的字符串形式。<br/>
17) os.path.getsize(name)<br/>
獲得文件大小，如果name是目錄返回0L。<br/>
18) os.path.splitext()<br/>
分離文件名與擴展名。<br/>
19) os.path.join(path,name)<br/>
連接目錄與文件名或目錄。<br/>
20) os.path.basename(path)<br/>
返回文件名。<br/>
21) os.path.dirname(path)<br/>
返回文件路徑。</p>

<p><strong>2. sys模塊</strong><br/>
1) sys.argv<br/>
命令行參數List，第一個元素是程序本身路徑。<br/>
2) sys.modules.keys()<br/>
返回所有已經導入的模塊列表。<br/>
3) sys.exc_info()<br/>
獲取當前正在處理的異常類,exc_type、4) exc_value、exc_traceback當前處理的異常詳細信息。<br/>
5) sys.exit(n)<br/>
退出程序，正常退出時exit(0)。<br/>
6) sys.hexversion<br/>
獲取Python解釋程序的版本值，16進制格式如：0x020403F0。<br/>
7) sys.version<br/>
獲取Python解釋程序的版本信息。<br/>
8) sys.maxint<br/>
最大的Int值。<br/>
9) sys.maxunicode<br/>
最大的Unicode值。<br/>
10) sys.modules<br/>
返回系統導入的模塊字段，key是模塊名，value是模塊。<br/>
11) sys.path<br/>
返回模塊的搜索路徑，初始化時使用PYTHONPATH環境變量的值。<br/>
12) sys.platform<br/>
返回操作系統平臺名稱。<br/>
13) sys.stdout<br/>
標準輸出。<br/>
14) sys.stdin<br/>
標準輸入。<br/>
15) sys.stderr<br/>
錯誤輸出。<br/>
16) sys.exc_clear()<br/>
用來清除當前線程所出現的當前的或最近的錯誤信息。<br/>
17) sys.exec_prefix<br/>
返回平臺獨立的python文件安裝的位置。<br/>
18) sys.byteorder<br/>
本地字節規則的指示器，big-endian平臺的值是&#8217;big&#8217;,little-endian平臺的值是&#8217;little&#8217;。<br/>
19) sys.copyright<br/>
記錄python版權相關的東西。<br/>
20) sys.api_version<br/>
解釋器的C的API版本。<br/>
21) sys.version_info<br/>
<code>&gt;&gt;&gt; sys.version_info(major=2, minor=7, micro=5, releaselevel='final', serial=0)</code><br/>
22) sys.displayhook(value)<br/>
如果value非空，這個函數會把他輸出到sys.stdout，並且將他保存進__builtin__._.指在python的交互式解釋器裏，&#8217;_&lsquo;代表上次你輸入得到的結果，hook是鉤子的意思，將上次的結果鉤過來。<br/>
23) sys.getdefaultencoding()<br/>
返回當前你所用的默認的字符編碼格式。<br/>
24) sys.getfilesystemencoding()<br/>
返回將Unicode文件名轉換成系統文件名的編碼的名字。<br/>
25) sys.setdefaultencoding(name)<br/>
用來設置當前默認的字符編碼，如果name和任何一個可用的編碼都不匹配，拋出LookupError，這個函數只會被site模塊的sitecustomize使用，一旦別site模塊使用了，他會從sys模塊移除。<br/>
26) sys.builtin_module_names<br/>
Python解釋器導入的模塊列表。<br/>
27) sys.executable<br/>
Python解釋程序路徑。<br/>
28) sys.getwindowsversion()<br/>
獲取Windows的版本。<br/>
29) sys.stdin.readline()<br/>
從標準輸入讀一行。<br/>
30) sys.stdout.write(&ldquo;a&rdquo;)<br/>
屏幕輸出a。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 字符串]]></title>
    <link href="http://www.aprilzephyr.com/blog/03282014/python-string/"/>
    <updated>2014-03-28T01:15:00+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03282014/python-string</id>
    <content type="html"><![CDATA[<p><strong>1. 類型轉換</strong><br/>
1) Python是動態類型，是强類型的編程語言。<br/>
2) Python內建函數的實現類型轉換：</p>

<table><tbody>
<tr><td><em> 函數 </em></td><td><em> 描述 </em></td></tr>  
<tr><td>int(x [,base ]) </td><td>將x轉換為一個整數</td></tr>
<tr><td>long(x [,base ]) </td><td>將x轉換為一個長整數</td></tr>
<tr><td>float(x) </td><td>將x轉換為一個浮點數</td></tr>
<tr><td>complax(real [, img ]) </td><td>創建一個複數</td></tr>
<tr><td>str(x) </td><td>將對象x轉換為字符串</td></tr>
<tr><td>repr(x) </td><td>將對象x轉換為表達式字符串</td></tr>
<tr><td>eval(str) </td><td>計算在字符串中的有效python表達式，並返回一個對象</td></tr>
<tr><td>tuple(s) </td><td>將序列s轉換為一個元組</td></tr>
<tr><td>list(s) </td><td>將序列s轉換為一個列表</td></tr>
<tr><td>chr(x) </td><td>將一個整數轉換為一個字符</td></tr>
<tr><td>unichr(x) </td><td>將一個整數轉換為一個Unicode字符</td></tr>
<tr><td>ord(x) </td><td>將一個字符轉換為它的整數值</td></tr>
<tr><td>hex(x) </td><td>將一個整數轉換為一個十六進制字符串</td></tr>
<tr><td>oct(x) </td><td>將一個整數轉換為一個八進制字符串</td></tr>
</tbody>
</table>


<p> <!--more--></p>

<p><strong>2. 轉義字符</strong></p>

<table>
<tbody>
<tr><td><em>轉義字符</em></td><td><em>描述</em></td></tr>  
<tr><td>&#92;(在行尾)</td><td>續行符</td></tr>  
<tr><td>&#92;\ </td><td>反斜槓</td></tr>  
<tr><td>&#92;&#8217; </td><td>單引號</td></tr>  
<tr><td>&#92;&#8221; </td><td>雙引號</td></tr>  
<tr><td>\a</td><td>響鈴</td></tr>  
<tr><td>\b</td><td>退格(Backspace)</td></tr>  
<tr><td>\e</td><td>轉義</td></tr>  
<tr><td>\000</td><td>空</td></tr>  
<tr><td>\n</td><td>換行</td></tr>  
<tr><td>\v</td><td>縱向製表符</td></tr>  
<tr><td>\t</td><td>橫向製表符</td></tr>  
<tr><td>\r</td><td>回車</td></tr>  
<tr><td>\f</td><td>換頁</td></tr>  
<tr><td>\oyy</td><td>八進制數yy代表的字符，例如:\o12代表換行</td></tr>  
<tr><td>\xyy</td><td>十進制數yy代表的字符，例如:\x0a代表換行</td></tr>  
<tr><td>\uhhhh</td><td>Unicode 16位的十六進製值</td></tr>  
<tr><td>\uhhhhhhhh</td><td>Unicode 32位的十六進製值</td></tr>  
<tr><td>\other</td><td>其它的字符以普通格式輸出</td></tr>  
</tbody></table>


<p><strong>3. 格式化表達</strong></p>

<table><tbody>  
<tr><td><em>格式化表達</em></td><td><em>描述</em></td></tr>  
<tr><td>%s</td><td>字符串</td></tr>  
<tr><td>%r</td><td>repr輸出的字符串</td></tr>  
<tr><td>%d</td><td>十進制整數</td></tr>  
<tr><td>%i</td><td>整數</td></tr>  
<tr><td>%u</td><td>無符號整數</td></tr>  
<tr><td>%o</td><td>八進制</td></tr>  
<tr><td>%x</td><td>十六進制</td></tr>  
<tr><td>%X</td><td>十六進制(大寫)</td></tr>  
<tr><td>%e</td><td>指數</td></tr>  
<tr><td>%E</td><td>指數(大寫)</td></tr>  
<tr><td>%f</td><td>十進制浮點數</td></tr>  
<tr><td>%F</td><td>十進制浮點數(大寫)</td></tr>  
<tr><td>%g</td><td>浮點e或f</td></tr>  
<tr><td>%G</td><td>浮點E或F</td></tr>  
</tbody></table>


<p></p>

<p><strong>4. 索引和切片</strong><br/>
Python中的字符串是有序的字符集合，所以可以通過位置（索引）獲取對應的元素。和c語言中一樣，python的索引也是從0開始的，而且支持使用負索引的方法來獲取元素，一個負的索引可以看做是從字符串結尾處反向計數，-1就表示字符串的最後一個字符。當然也可以理解為負索引與字符串長度相加得到的正索引，即s[-n]等於s[-n+len(s)]。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;1&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;h&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;o&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;hel&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'><span class="s">&#39;ello&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;hell&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
其實分片的完整格式為s[start:end:side]，意思就是從start開始到end-1，每隔side個元素取一個元素，返回值為所有取到的元素組成的字符串，side默認值為1。<br/>
side可以取負值，例如s[::-1]會返回”olleh”，實際效果就是對字符串進行了反轉。這裏需要註意的是，如果side為負值，兩個邊界也要進行反轉，s[4:1:-1]就是從4開始反向取到2得到的字符串，如果在sride為負的情況下還是第一個邊界大於第二個邊界那樣的使用的話將返回一個空的字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;hlo&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;olleh&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;oll&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>5. 字符串方法</strong><br/>
<em>A 大小寫</em><br/>
S.upper() 全部大寫<br/>
S.lower() 全部小寫<br/>
S.swapcase() 大小寫互換<br/>
S.capitalize() 首字母大寫，其余都小寫<br/>
S.title() 每個單詞的首字母大寫，其余不變</p>

<p><em>B 對齊</em><br/>
S.ljust(width[, fill]) 獲取固定長度width，左對齊，多余位用fill填充，默認空格<br/>
S.rjust(width[, fill]) 右對齊<br/>
S.center(width[, fill]) 居中<br/>
S.zfill(width) 右對齊，左邊不足的位置用0補齊，相當於S.rjust(width,&ldquo;0&rdquo;)<br/>
如果width&lt;=len(S)，返回於原字符串相同的字符串。</p>

<p><em>C 查找替換</em><br/>
S.find(sub[, start[, end]]) 返回在範圍start到end(不含end)中第一個sub的索引。<br/>
S.rfind(sub[, start[, end]]) 從右邊開始查找，也就是返回在範圍start到end(不含end)中最後一個sub的索引。<br/>
S.index(sub[, start[, end]])功能與find()相同，不同之處在於find()未找到的時候會返回-1，而index()會拋出異常。<br/>
S.rindex(sub[, start[, end]])功能與rfind()相同，不同之處在於find()未找到的時候會返回-1，而index()會拋出異常。<br/>
S.count(sub[, start[, end]]) 返回在範圍start到end(不含end)中sub的個數。<br/>
start默認為0，end默認為len(S)。<br/>
S.replace(old, new[, count])將字符串中的old替換為new，count為替換的次數，未指定的話就是替換所有。<br/>
S.translate(table [,deletechars]) 刪除S中deletechars包含的字符，然後將剩下的字符用table定義的關系進行映射。table是string.maketrans()生成的。</p>

<p><em>D 去空白或指定字符</em><br/>
S.strip([chars]) 去除字符串S兩邊的chars,若chars未指定，則去除兩邊的空白，包括空格、\n、\f、\r、\t和\v。<br/>
S.lstrip([chars]) 去除左邊的chars，未指定同上。<br/>
S.rstrip([chars]) 去除右邊的chars，未指定同上。</p>

<p><em>E 分割和組合</em><br/>
S.split([sep [,maxsplit]]) 以sep為分隔符切割字符串S，不指定sep默認為默認為空白，maxsplit為最大分割次數，未指定則全部分割，返回列表。<br/>
S.rsplit([sep [,maxsplit]]) 只是和split反向相反，split從頭到尾，rsplit從尾到頭。<br/>
S.splitlines([keepends]) 按行分割字符串，若keepends指定並且為True，則保留換行符，反之不保留。<br/>
S.partiton(sep)以sep作為分隔符將S分割為兩個start和end部分，並返回(start,sep, end)這樣格式的元組，若sep沒有找到，則返回S和兩個空串組成的元組(S, &lsquo;&rsquo;, &lsquo;&rsquo;)。<br/>
S.rpartition(sep)從右邊開始，以sep作為分隔符將S分割為兩個start和end部分，並返回(start,sep, end)，若sep沒有找到，則返回兩個空串和S組成的元組(&lsquo;&rsquo;, &lsquo;&rsquo;, S)。<br/>
S.join(iterable) 將叠代器iterable的字符串連接在一起，並用分隔符S隔開，一般來說在連接列表的時候都使用空字符串或者空格作為分隔符，返回字符串。</p>

<p><em>F 判斷</em><br/>
S.startswith(prefix[, start[, end]])判斷字符串start到end(不含end)是否是以prefix開頭，默認start為0，end為len(S)，返回布爾值。<br/>
S.endswith(suffix[, start[, end]]) 判斷字符串start到end(不含end)是否是以suffix結尾，默認start為0，end為len(S)，返回布爾值。<br/>
S.isalnum() 是否全為字母或數字，返回布爾值。<br/>
S.isalpha() 是否全為字母，返回布爾值。<br/>
S.isdigit() 是否全為數字0-9，返回布爾值。<br/>
S.islower() 是否全是小寫。<br/>
S.isupper() 是否全是大寫。<br/>
S.isspace() 是否全是空白。<br/>
S.istitle() 是否符合title的格式——每個單詞的首字母大寫。<br/>
上述這些函數中，若S為空串，則均返回False。</p>

<p><em>G 編碼</em><br/>
S.decode([encoding[,errors]]) 將字符串S解碼為unicode，encoding為S原來的編碼方式。<br/>
S.encode([encoding[,errors]]) 將unicodeS編碼為python中的字符串，參數指定對應的編碼方式。<br/>
errors指定出錯時對應的操作，默認的strict會在編碼/解碼失敗的時候拋出異常，ignore則忽略。<br/>
關於編碼方式還是有很多的知識的，後續再做研究。</p>

<p><em>H 其他</em><br/>
S.format(*args, **kwargs)<br/>
format也是用來格式化字符串的，argv指定的變量可以在S中用{index}來替換，而kwargs則是對應的變量。如果後面的數據為字典，可以使用{&lt;index|var>[key]}來替換其對應的值。當然還可以指定對應的寬度、精度以及對其格式，{index:[fill][&lt;|>|^][width][.precision][typecode]}。<br/>
fill設置填充位，默認為空格；&lt;左對齊，>右對齊，^居中；寬度和類型見後面格式化表達式部分。註意這裏的精度專指說浮點型數據，整型是不能使用精度的，字符創設置了也沒啥作用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0},{2},{1},{s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;1,3,2,four&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0:$&lt;3},{2:^5.2f},{1},{s:&gt;10.6s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;1$$,3.00 ,2,      four&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0:&lt;3},{2:^5d},{1},{s:&gt;10s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;1  ,  3  ,2,      four&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0:&lt;03},{2:^05.2d},{1},{s:&gt;10s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">ValueError</span><span class="p">:</span> <span class="n">Precision</span> <span class="ow">not</span> <span class="n">allowed</span> <span class="ow">in</span> <span class="n">integer</span> <span class="n">format</span> <span class="n">specifier</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;{0:&lt;03},{2:^5.2f},{1},{s:&gt;10.6s}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="s">&quot;four&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;100,3.00 ,2,      four&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
S.expandtabs([tabsize]) 將字符串中的制表符替換為tabsize個空格，默認為8。</p>

<p><em>I 3.0新增</em><br/>
S.isdecimal() 是否全是十進制數字(多語言數字)。<br/>
S.isidentifier() 是否全是合法標識符。<br/>
S.isnumeric() 是否只包含數字字符。<br/>
S.isprintable() 是否全是可打印字符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python import與from...import...(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/03272014/python-import-from-import/"/>
    <updated>2014-03-27T14:23:52+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03272014/python-import-from-import</id>
    <content type="html"><![CDATA[<p><strong>1. 簡單說說python import與from&hellip;import&hellip;.(python模塊)</strong></p>

<p>在python用import或者from&hellip;import來導入相應的模塊。模塊其實就一些函數和類的集合文件，它能實現一些相應的功能，當我們需要使用這些功能的時候，直接把相應的模塊導入到我們的程序中，我們就可以使用了。這類似於C語言中的include頭文件，Python中我們用import導入我們需要的模塊。 <!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;================Python import mode==========================&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">print</span> <span class="p">(</span><span class="s">&#39;The command line arguments are:&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s"> The python path&#39;</span><span class="p">,</span><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span><span class="p">,</span><span class="n">path</span> <span class="c">#導入特定的成員</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;================python from import===================================&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;path:&#39;</span><span class="p">,</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">如果你要使用所有</span><span class="n">sys</span><span class="err">模塊使用的名字，你可以這樣：</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;path:&#39;</span><span class="p">,</span><span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
從以上我們可以簡單看出：</p>

<p>\==========<br/>
導入mode，import與from&hellip;import的不同之處在於，簡單說：
如果你想要直接輸入argv變量到你的程序中而每次使用它時又不想打sys，則可使用：from sys import argv。<br/>
一般說來，應該避免使用from..import而使用import語句，因為這樣可以使你的程序更加易讀，也可以避免名稱的沖突。<br/>
\==========</p>

<p>在使用 from xxx import * 時，如果想精準的控制模塊導入的內容，可以使用 <strong>all</strong> = [xxx,xxx] 來實現，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">]</span> <span class="c">#__為雙橫線</span>
</span><span class='line'><span class="k">class</span> <span class="nc">two</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;this is two&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;this is two a&#39;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s">&#39;this is two b&#39;</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">two</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">one</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">two</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="k">print</span> <span class="n">b</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">two</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="err">這時，類</span><span class="n">two</span><span class="p">()</span><span class="err">將不會被</span> <span class="kn">import</span> <span class="o">*</span><span class="err">導入進來</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2. 關於import中的路徑搜索問題</strong><br/>
類似於頭文件，模塊也是需要系統的搜索路徑的，下面的命令即是系統默認的搜索路徑，當你導入一個模塊時，系統就會在下面的路徑列表中搜索相應的文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python26.zip&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/plat-linux2&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/lib-tk&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/lib-old&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/lib-dynload&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/site-packages&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/site-packages/gst-0.10&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/site-packages/gtk-2.0&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib64/python2.6/site-packages/webkit-1.0&#39;</span><span class="p">,</span> <span class="s">&#39;/usr/lib/python2.6/site-packages&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="err">從例中，我們可以看到</span><span class="n">python</span><span class="err">會首先在當前工作目錄裏去找</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果沒有找導相應的內容，則報錯：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">syss</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">ImportError</span><span class="p">:</span> <span class="n">No</span> <span class="n">module</span> <span class="n">named</span> <span class="n">syss</span>
</span><span class='line'>
</span><span class='line'><span class="err">當然，我們也可以自行添加要搜索的路徑，調用列表的</span><span class="n">append</span><span class="err">方法即可：</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;/usr/xx/python2.6&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>3. 創建自己的模塊</strong><br/>
在創建之前，有一點需要說明一下：每個Python模塊都有它的__name__（就每個對象都自己的__doc__一樣）。通過<strong>name</strong>我們可以找出每一個模塊的名稱，一般__name__的值有種：1 一是主模塊名稱為：&#8221;__main__&ldquo;(可以理解為直接運行的那個文件)，2 那些被主模塊導入的模塊名稱為：文件名字（不加後面的.py）。有__name__是很有用的，因為我們可以通過 if __name__  == &lsquo;xxx&rsquo; 判斷來執行那些模塊，那些模塊不被執行。另外：每個Python程序也是一個模塊。它擴展名為：.py擴展名。</p>

<p>下面，我們通過例子來說明：<br/>
首先：我們創建模塊：mymodel.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/user/bin/python</span>
</span><span class='line'><span class="c">#Filename:mymodel.py</span>
</span><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="s">&#39;1.0&#39;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sayHello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&#39;Hello world&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">modelName</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">__name__</span><span class="c">#返回它自己的名稱</span>
</span><span class='line'><span class="c">#end of model</span>
</span></code></pre></td></tr></table></div></figure>


<p>
以上語句注意：<br/>
1) 這個模塊應該被放置在我們輸入它的程序的同一個目錄中，或者在sys.path所列目錄之一。<br/>
2) 你已經看到，它與我們普通的Python程序相比並沒有什麽特別之處。<br/>
然後：我們在test.py中來調用此模塊：test.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span><span class="nn">mymodel</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;D:/xx/PythonSERVER/python31/Code&#39;</span><span class="p">)</span><span class="c">#提供搜索路径</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span> <span class="c">#此處打印主模塊的名稱：__main__</span>
</span><span class='line'><span class="n">mymodel</span><span class="o">.</span><span class="n">sayHello</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Version&#39;</span><span class="p">,</span><span class="n">mymodel</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Model Name&#39;</span><span class="p">,</span><span class="n">mymodel</span><span class="o">.</span><span class="n">modelName</span><span class="p">())</span><span class="c">#打印被導入模塊的名稱: mymodel</span>
</span><span class='line'>
</span><span class='line'><span class="err">我們使用</span><span class="n">from</span><span class="o">..</span><span class="n">import</span><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;======================from.....import=====================================&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mymodel</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span><span class="c">#此處打印主模塊的名稱：__main__</span>
</span><span class='line'><span class="n">sayHello</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Version&#39;</span><span class="p">,</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Model Name&#39;</span><span class="p">,</span><span class="n">modelName</span><span class="p">())</span> <span class="c">#打印被導入模塊的名稱: mymodel</span>
</span></code></pre></td></tr></table></div></figure>


<p>
以上語句註意：
1) 我們可以通過import來導入多個模塊，用“,”（逗號）分隔。<br/>
2) 註意import與from..import&hellip;..</p>

<p><strong>4. 創建自己的包</strong><br/>
<em>A 一個包的基本組織如下：</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">FC</span><span class="o">/</span>
</span><span class='line'>  <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>  <span class="n">Libr</span><span class="o">/</span>
</span><span class='line'>    <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="n">one</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="n">two</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>  <span class="n">Model</span><span class="o">/</span>
</span><span class='line'>    <span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="n">one</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">在外部加載調用時，有以下方式：</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c">#加載方式一</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Fc.Libr.one</span>
</span><span class='line'><span class="k">print</span> <span class="n">Fc</span><span class="o">.</span><span class="n">Libr</span><span class="o">.</span><span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'><span class="c">#加載方式二</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="n">one</span>
</span><span class='line'><span class="k">print</span> <span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'><span class="c">#加載方式三</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr.one</span> <span class="kn">import</span> <span class="n">a</span>
</span><span class='line'><span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="c">#加載方式四</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span> <span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'><span class="err">註意直接使用第四種方式是不能正確導入</span><span class="n">Libr</span><span class="err">下的</span><span class="n">one</span><span class="err">子模塊的，這就需要在</span><span class="n">Fc</span><span class="err">目錄下的</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span><span class="err">文件中定義好需要加載子模塊的名稱</span>
</span><span class='line'><span class="n">Fc</span><span class="o">/</span><span class="n">Libr</span><span class="o">/</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">__all__</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;one&#39;</span><span class="p">,</span><span class="s">&#39;two&#39;</span><span class="p">]</span> <span class="c">#定義加載子模塊的名稱</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在加載包模塊時，在import語句執行期時，遇到的所有__init__.py文件都會被執行，在上面代碼中
首先會執行Fc目錄中的__int__.py，然後執行Libr目錄中的__init__.py</p>

<p><em>B 子模塊加子模塊問題</em><br/>
同一包的相同目錄中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c">#加載方式一:使用完全限定名稱</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="n">one</span>
</span><span class='line'><span class="n">aa</span> <span class="o">=</span> <span class="s">&#39;libr two load one---&#39;</span><span class="o">+</span><span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="c">#加載方式二:使用相對導入</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">one</span>
</span><span class='line'><span class="n">bb</span> <span class="o">=</span> <span class="s">&#39;libr two load one----&#39;</span><span class="o">+</span><span class="n">one</span><span class="o">.</span><span class="n">b</span>
</span><span class='line'><span class="err">方二中使用</span><span class="o">.</span><span class="err">來表示在同一級目錄中。</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#加載方式三:(這種方式應當避免:最後找不到會轉移到標準庫)</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Fc.Libr.one</span>
</span><span class='line'><span class="n">cc</span> <span class="o">=</span> <span class="s">&#39;libr two load one---&#39;</span><span class="o">+</span><span class="n">Fc</span><span class="o">.</span><span class="n">Libr</span><span class="o">.</span><span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="err">在外部使用時：</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span> <span class="n">two</span><span class="o">.</span><span class="n">aa</span>
</span><span class='line'><span class="k">print</span> <span class="n">two</span><span class="o">.</span><span class="n">bb</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">同一包的不同目錄中：</span>
</span><span class='line'>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">..Model</span> <span class="kn">import</span> <span class="n">one</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;libr two load mode one---&#39;</span><span class="o">+</span><span class="n">one</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="err">使用時：</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Fc.Libr</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">print</span> <span class="n">two</span><span class="o">.</span><span class="n">a</span>
</span><span class='line'><span class="err">將輸出：</span><span class="n">libr</span> <span class="n">two</span> <span class="n">load</span> <span class="n">mode</span> <span class="n">one</span><span class="o">---</span><span class="n">fc</span> <span class="n">model</span> <span class="n">one</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>另外在導入一個包時，會定義一個特殊的變量__path__，該變量包含一個目錄列表。<br/>
__path__可通過__init__.py文件中包含的代碼訪問，最初包含的一項具有包的目錄名稱。我們可以向__path__列表提供更多的目錄，以更改查找子模塊時使用的搜索路徑，大型項目中這個很有用。</p>

<p><strong>5. 特別說明</strong><br/>
1) import執行加載源文件中所有語名（所以模塊是一個文件）。<br/>
2) import語句可以出現在程序中的任何位置。但是有一點是：無論import語句被使用了多少次，每個模塊中的代碼僅加載和執行一次，後續的import語句僅將模塊名稱綁定到前一次導入所創建的模塊對象上。<br/>
3) 使用sys.modules可查看當前加載的所有模塊。</p>

<p><a href="http://www.cnblogs.com/ptfblog/archive/2012/07/15/2592122.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 時間&amp;日期模塊]]></title>
    <link href="http://www.aprilzephyr.com/blog/03262014/python-time-datetime/"/>
    <updated>2014-03-26T16:53:19+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/03262014/python-time-datetime</id>
    <content type="html"><![CDATA[<p>Python提供了time/datetime/calendar等模塊來處理日期和時間。<br/>
<strong>1.time模塊常用的函數</strong><br/>
<em>A. time.time()</em><br/>
1970年1月1日以來的秒數，是一個浮點數。<br/>
<em>B. time.sleep()</em><br/>
可以通過調用time.sleep來挂起當前的進程。time.sleep接收一个浮點型參數，表示進程挂起的時間。<br/>
<em>C. time.clock()</em><br/>
time.clock()返回第一次调用该方法到现在的秒數，其精確度高於1微秒。可以使用该函數來記錄程序執行的時間。 <!--more--><br/>
<em>D. time.gmtime()</em><br/>
該函數原型為time.gmtime([sec])，可選參數sec表示從1970-01-01以來的秒數，默認值為time.time()，函數返回time.struct_time類型的對象。(struct_time是在time模塊中定義的表示時間的對象)，下面是一個簡單的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">gmtime</span><span class="p">()</span>                        <span class="c">#獲取當前時間的struct_time對象   </span>
</span><span class='line'><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">gmtime</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())</span>
</span><span class='line'><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">gmtime</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="mi">24</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>    <span class="c">#獲取昨天這個時間的struct_time對象</span>
</span><span class='line'><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<em>E. time.localtime()</em><br/>
與time.gmtime()非常類似，也返回一個struct_time對象，可以看作是gmtime()的本地化版本。<br/>
<em>F. time.mktime()</em><br/>
time.mktime執行與gmtime(), localtime()相反的操作，它接收struct_time對象作為參數，返回用秒數來表示時間的浮點數。<br/>
<em>G. time.strftime()</em><br/>
time.strftime將日期轉換為字符串表示，它的函數原型為：time.strftime(format[, t])。參數format是格式字符串（格式字符串的知識可以參考：<a href="http://docs.python.org/2/library/time.html">time.strftime</a> ），可選的參數t是一个struct_time對象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="err">參數</span><span class="p">:</span>
</span><span class='line'><span class="n">strftime</span><span class="p">(</span><span class="n">format</span><span class="p">[,</span> <span class="nb">tuple</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">string</span>
</span><span class='line'><span class="err">將指定的</span><span class="n">struct_time</span><span class="p">(</span><span class="err">默認為當前時間</span><span class="p">)</span><span class="err">，根據指定的格式化字符串輸出</span>
</span><span class='line'><span class="n">python</span><span class="err">中時間日期格式化符號：</span>
</span><span class='line'><span class="o">%</span><span class="n">y</span> <span class="err">两位數的年份表示（</span><span class="mo">00</span><span class="o">-</span><span class="mi">99</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">Y</span> <span class="err">四位數的年份表示（</span><span class="mo">000</span><span class="o">-</span><span class="mi">9999</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">m</span> <span class="err">月份（</span><span class="mo">01</span><span class="o">-</span><span class="mi">12</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">d</span> <span class="err">月内中的一天（</span><span class="mi">0</span><span class="o">-</span><span class="mi">31</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">H</span> <span class="mi">24</span><span class="err">小時製小時數（</span><span class="mi">0</span><span class="o">-</span><span class="mi">23</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">I</span> <span class="mi">12</span><span class="err">小時製小時數（</span><span class="mo">01</span><span class="o">-</span><span class="mi">12</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">M</span> <span class="err">分鐘數（</span><span class="mo">00</span><span class="o">=</span><span class="mi">59</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">S</span> <span class="err">秒（</span><span class="mo">00</span><span class="o">-</span><span class="mi">59</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">a</span> <span class="err">本地簡化星期名稱</span>
</span><span class='line'><span class="o">%</span><span class="n">A</span> <span class="err">本地完整星期名稱</span>
</span><span class='line'><span class="o">%</span><span class="n">b</span> <span class="err">本地簡化的月份名稱</span>
</span><span class='line'><span class="o">%</span><span class="n">B</span> <span class="err">本地完整的月份名稱</span>
</span><span class='line'><span class="o">%</span><span class="n">c</span> <span class="err">本地相應的日期表示和時間表示</span>
</span><span class='line'><span class="o">%</span><span class="n">j</span> <span class="err">年内的一天（</span><span class="mo">001</span><span class="o">-</span><span class="mi">366</span><span class="err">）</span>
</span><span class='line'><span class="o">%</span><span class="n">p</span> <span class="err">本地</span><span class="n">A</span><span class="o">.</span><span class="n">M</span><span class="o">.</span><span class="err">或</span><span class="n">P</span><span class="o">.</span><span class="n">M</span><span class="o">.</span><span class="err">的等價符</span>
</span><span class='line'><span class="o">%</span><span class="n">U</span> <span class="err">一年中的星期數（</span><span class="mo">00</span><span class="o">-</span><span class="mi">53</span><span class="err">），星期天為星期的開始</span>
</span><span class='line'><span class="o">%</span><span class="n">w</span> <span class="err">星期（</span><span class="mi">0</span><span class="o">-</span><span class="mi">6</span><span class="err">），星期天為星期的開始</span>
</span><span class='line'><span class="o">%</span><span class="n">W</span> <span class="err">一年中的星期數（</span><span class="mo">00</span><span class="o">-</span><span class="mi">53</span><span class="err">）星期一為星期的開始</span>
</span><span class='line'><span class="o">%</span><span class="n">x</span> <span class="err">本地相應的日期表示</span>
</span><span class='line'><span class="o">%</span><span class="n">X</span> <span class="err">本地相應的時間表示</span>
</span><span class='line'><span class="o">%</span><span class="n">Z</span> <span class="err">當前時區的名稱</span>
</span><span class='line'><span class="o">%%</span> <span class="o">%</span><span class="err">號本身</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<em>H. time.strptime()</em>
按指定格式解析一個表示时间的字符串，返回struct_time對象。該函數原型為：time.strptime(string, format)，两個參數都是字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;2013-04-09 12:30:25&#39;</span><span class="p">,</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2. datetime模塊</strong><br/>
<em>A. 兩個常量</em><br/>
datetime.MINYEAR和datetime.MAXYEAR，分別表示datetime所能表示的最小、最大年份。其中，MINYEAR=1,MAXYEAR=0000。<br/>
<em>B. 幾個重要的類</em><br/>
1) datetime.date:表示日期的類，常用的屬性有tear, month, day:<br/>
year的返回在兩個常量之間；<br/>
month的範圍是[1,12]，月份是從1開始；<br/>
day依據month來決定。 <br/>
2) date類提供了常用的類方法和類屬性：<br/>
date.max, date.min：date對象所能表示的最大、最小日期；
date.today()：返回一個表示當前本地日期的date對象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">26</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">date</span><span class="o">.</span><span class="n">max</span>
</span><span class='line'><span class="mi">9999</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">31</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">date</span><span class="o">.</span><span class="n">min</span>
</span><span class='line'><span class="mo">0001</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mo">01</span>
</span></code></pre></td></tr></table></div></figure>


<p>
3) date提供的實例方法和屬性<br/>
date.year、date.month、date.day：年、月、日；<br/>
date.replace(year, month, day)：生成一个新的日期對象，用參數指定的年，月，日代替原有對象中的屬性。（原有對象仍保持不變）；<br/>
date.timetuple()：返回日期對應的time.struct_time對象；<br/>
date.weekday()：返回weekday，如果是星期一，返回0；如果是星期2，返回1，以此類推；<br/>
data.isoweekday()：返回weekday，如果是星期一，返回1；如果是星期2，返回2，以此類推；<br/>
date.isocalendar()：返回格式如(year，month，day)的元組；<br/>
date.isoformat()：返回格式如&#8217;YYYY-MM-DD’的字符串；<br/>
date.strftime(fmt)：自定義格式化字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">now</span><span class="o">=</span><span class="n">date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mo">03</span><span class="p">,</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">tomorrow</span><span class="o">=</span><span class="n">now</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">day</span><span class="o">=</span><span class="mi">27</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;now:&#39;</span><span class="p">,</span><span class="n">now</span>
</span><span class='line'><span class="n">now</span><span class="p">:</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">26</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;tomorrow:&#39;</span><span class="p">,</span><span class="n">tomorrow</span>
</span><span class='line'><span class="n">tomorrow</span><span class="p">:</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">27</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;timetuple():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">timetuple</span><span class="p">()</span>
</span><span class='line'><span class="n">timetuple</span><span class="p">():</span> <span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;weekday():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">weekday</span><span class="p">()</span>
</span><span class='line'><span class="n">weekday</span><span class="p">():</span> <span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;isoweekday():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">isoweekday</span><span class="p">()</span>
</span><span class='line'><span class="n">isoweekday</span><span class="p">():</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;isocalendar():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">isocalendar</span><span class="p">()</span>
</span><span class='line'><span class="n">isocalendar</span><span class="p">():</span> <span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&#39;isoformat():&#39;</span><span class="p">,</span><span class="n">now</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span>
</span><span class='line'><span class="n">isoformat</span><span class="p">():</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">26</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
4) date還對某些操作進行了重載，它允許我們對日期進行如下一些操作：<br/>
date2 = date1 + timedelta  # 日期加上一個間隔，返回一個新的日期對象（timedelta將在下面介紹，表示時間間隔）
date2 = date1 &ndash; timedelta   # 日期隔去間隔，返回一個新的日期對象
timedelta = date1 &ndash; date2   # 两個日期相減，返回一個時間間隔對象
date1 &lt; date2  # 两個日期進行比較</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">now</span> <span class="o">=</span> <span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'><span class="n">tomorrow</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">day</span> <span class="o">=</span> <span class="mi">7</span> <span class="p">)</span>
</span><span class='line'><span class="n">delta</span> <span class="o">=</span> <span class="n">tomorrow</span> <span class="o">-</span> <span class="n">now</span>
</span><span class='line'><span class="k">print</span>   <span class="s">&#39;now:&#39;</span> <span class="p">,</span> <span class="n">now</span><span class="p">,</span>  <span class="s">&#39; tomorrow:&#39;</span> <span class="p">,</span> <span class="n">tomorrow</span>
</span><span class='line'><span class="k">print</span>   <span class="s">&#39;timedelta:&#39;</span> <span class="p">,</span> <span class="n">delta</span>
</span><span class='line'><span class="k">print</span>  <span class="n">now</span> <span class="o">+</span> <span class="n">delta</span>
</span><span class='line'><span class="k">print</span>  <span class="n">tomorrow</span> <span class="o">&gt;</span> <span class="n">now</span>
</span><span class='line'><span class="c"># # ---- output ----   </span>
</span><span class='line'><span class="c"># now: 2010-04-06  tomorrow: 2010-04-07   </span>
</span><span class='line'><span class="c"># timedelta: 1 day, 0:00:00   </span>
</span><span class='line'><span class="c"># 2010-04-07   </span>
</span><span class='line'><span class="c"># True</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://www.cnblogs.com/BeginMan/archive/2013/04/08/3007403.html">Origin</a></p>
]]></content>
  </entry>
  
</feed>
