<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Themis_Sword's Blog]]></title>
  <link href="http://www.aprilzephyr.com/atom.xml" rel="self"/>
  <link href="http://www.aprilzephyr.com/"/>
  <updated>2014-02-28T00:32:43+08:00</updated>
  <id>http://www.aprilzephyr.com/</id>
  <author>
    <name><![CDATA[Themis_Sword]]></name>
    <email><![CDATA[licong0419@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[書摘_談判力]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/25/shu-zhai-tan-pan-li/"/>
    <updated>2014-02-25T19:36:09+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/25/shu-zhai-tan-pan-li</id>
    <content type="html"><![CDATA[<ol>
<li>(不要在立場上討價還價)談判的任何方法都可以通過三方面的標準來衡量:如果有達成共識的可能,就應該達成明智的協議;談判應該有效率;增進或至少不損害雙方的關係(明智的協議是指協議盡可能保障雙方的合法利益,公平解決雙方的利益衝突,協議持久性強,並考慮了社會效益)。</br>
</br></li>
<li>在立場式談判中,強硬者主導溫和者。如果強硬者堅持要對方作出妥協並不斷威脅對方,而溫和者為避免衝突不斷讓步,堅持以達成協議為重,那這樣的談判是不公平的。強硬者佔了便宜。談判會有結果,但卻不一定明智。它偏向於強硬者而不利於溫和者。</br>
</br></li>
<li>談判有兩個層次:第一個層次是解決實質性問題;第二個層次往往比較含蓄,它關註解決實質性問題的程序。<!--more--></br>
</br></li>
<li>以下四點幾乎適用於任何場合,每一點都圍繞談判的一個基本要素提出建議。</br>人:把人和事分開。</br>利益:著眼於利益,而不是立場。</br>選擇:為共同利益創造選擇方案。</br>標準:堅持使用客觀標準。</br></br></li>
<li>原則談判的四個基本要素從你開始著手談判到達成協議或是你決定不再進行談判都有用,這個過程可分為分析、計劃、協商三個階段。</br>在分析階段你只需要判斷形勢,收集、整理和分析信息。你需要考慮雙方對問題的不同認識、對方對你的敵意程度以及雙方交流的障礙,當然還有雙方各自的利益。你需要認清已經擺在桌面上的選擇以及已經提出的達成協議的基準。</br>在計劃階段你同樣要面對這四個因素,開動腦筋,作出決定。怎樣處理人際關係問題?在對方的利益中,什麼最重要?你的現實目標是什麼?為此你要找出其他選擇和參考標準。</br>
在協商階段,當雙方為達成協議相互交換意見時,四個基本要素是討論的最佳話題。雙方可以消除意見的分歧、克制情緒的衝動以及排除交流過程中的障礙。每一方都應理解對方的利益所在。雙方可以一起尋找對彼此都有利的方案,並根據客觀標準尋求共識以解決利益衝突。</br>
總之,與立場式談判相反,原則談判注重基本利益、互惠方案和公平標準,這通常導致更明智的談判結果。它使你有效地在一系列問題中逐漸與對方達成共識,而無須在死守立場和放棄立場之間徒耗精力。把人和事分割開來,你才能真正把對方當做一個有血有肉的人直接有效地同他打交道,最終得到友善的結果。</br>
</br>6. 雙方的合作關係至少應有助於達成一個兼顧雙方利益的協議。當然還有更重要的目的。多數談判是在人際關係不斷發展的情況下進行的,因此談判是圍繞著促進而不是有損人際關係以及為以後的談判鋪路的目的而展開的。事實上,在和許多長期客戶、商業夥伴、家庭成員、同行、政府官員以及不同的國家進行談判時,維持關係的意義遠遠高於某個談判的結果。</br>
</br>7. 人際關係經常與問題糾纏在一起。談判中人際問題帶來的一個重要後果就是各方面的關係容易與實質問題混淆在一起。無論是給予的一方還是索取的一方,都可能把人和事等同起來。</br>
人際關係與心理問題混淆的另一個原因是談判者經常對別人的話進行毫無根據的推論,並將其與對方對待自己的意願、態度聯繫起來。</br>
</br></li>
<li>解決實質問題和保持良好的合作關係並非互相矛盾,只要談判各方能夠在心理上作好準備,依據其合理性分開處理這些問題,並願為之而付出努力。把人際關係的基礎放在準確的認知,明白無誤的交流,恰當的情感和長遠的目光上,直接與人際問題打交道,不要指望靠犧牲實質利益來換取良好的人際關係。</br>
</br></li>
<li>要想在紛繁複雜的人際問題中找到出路,最好從以下三個基本方面著手:認知、情緒和交流。</br>
</br></li>
<li>瞭解對方的想法不只是幫助你解決自己的問題。他們的想法本身就是問題所在。無論是談生意還是解決糾紛,意見分歧都來源於你和對方思考方式的不同。</br>
</br></li>
<li>突不在於客觀現實本身,而在於人們的思考方式上。在處理分歧時,事實只不過是又一個論據,對消除分歧也許有用,也許無用。分歧的存在是因為它寓於人們的思維之中。恐懼,即使是無端的恐懼,也是切實存在、需要消除的。希望,即使是不太現實的希望,也會引發一場戰爭。縱然是既成的事實,也可能對問題的解決無濟於事。</br>
</br></li>
<li>儘管尋求客觀事實十分有益,但最後構成談判的問題的卻不是這些事實,而是雙方對於事實的不同認識,這才是解決問題的契機。</br>
站在對方角度換位思考。你對世界的認識取決於你所處的位置。人們往往只看他們想要看到的東西。在大量的詳細信息中,他們挑揀出那些能驗證自己最初認知的事實,把注意力放在這些事實上,而忽略或歪曲不符合他們認知的信息。談判中的每一方可能只會看到自己的優勢和對方的不足。</br>
</br></li>
<li>站在對方的角度考慮問題,是談判者應該掌握的最重要的技巧之一,儘管真正做到這一點並不容易。只認識到對方看問題的角度與我們的不同是不夠的。如果想影響對方,則還需要切身理解對方觀點的份量所在,感受對方深信不疑的觀念中所包含的情感力量。</br>
</br></li>
<li>理解對方觀點並不意味著對其表示贊同。的確,更好地瞭解對方想法可能會改變你對形勢的看法,但這並不是理解對方觀點所要付出的代價,而是一種獲益。這樣能使你縮小衝突範圍,幫助你實現新的自我利益。</br>
</br></li>
<li>討論各自對問題的認識。消除認識分歧的一種辦法是,亮出各自的想法,與對方進行討論。只要做到態度坦率、誠懇,雙方不從自己的角度出發指責對方,這樣的討論就能讓雙方懷著一份理解,認真傾聽對方的真正意圖。</br>
認為對方關注的問題「不重要」,因此對達成協議不構成障礙,這是談判中司空見慣的事情。事實上,與別人進行明確而有說服力的交流,把你的想法告訴對方,對方也願意聽取,對於你這位談判者來說是最好的投資。</br>
</br></li>
<li>保全面子既要依據原則達成協議,也要與談判者的自我形象相協調,因此其重要性不可低估。</br>
</br></li>
<li>談判中,特別是在激烈的爭執中,情緒本身也許比說話更重要。雙方可能更容易陷入爭執,而不是攜手就共同問題找出解決辦法。人們往往開始談判時才意識到風險很大,於是神情緊張。一方的情緒會感染另一方。恐懼會引起憤怒,而憤怒也會帶來恐懼。情緒波動會使談判迅速陷入僵局或者致使談判破裂。</br>
</br></li>
<li>當別人發脾氣時,你不要打斷對方或者摔門而去,而應克制自己的情緒,繼續待在那兒,任對方發洩不滿。當他們的委託人也在場時,他們的沮喪情緒也會像談判者那樣得到緩解。對付另一方發脾氣的最好措施也許是靜靜地聽著,並不時地讓對方繼續,直到他說完為止。</br>
</br></li>
<li>流中存在三大障礙。首先,談判者之間並不一定直接交談,或者至少不以這種方式得到對方理解。&hellip;即使你直接明瞭地與對方交談,他們也不一定在聽。這就是交流中的第二大問題。&hellip;交流中的第三個主要問題是誤解。</br>
</br></li>
<li>認真聆聽並理解對方的意思。&hellip;善於聽講的常用技巧是,集中精力聽對方說話,要求對方清楚明瞭地闡述其真正意圖,且在模稜兩可或沒有把握時要求對方重複。對方說話時盡量不要回應,而要去真正理解對方。站在對方的角度,考慮對方的需求,理解對方的壓力。&hellip;說出你的想法,爭取對方理解。&hellip;為了減少媒體、國內觀眾以及第三方對談判施加決定性影響,不分散談判人員的注意力,最好與對方建立私下、秘密的交流渠道,也可以通過限制談判團人數來提高交流的質量。&hellip;只談自己,不說對方。</br>
</br></li>
<li>有的放矢。有時,問題不在於交流太少,而在於溝通過多。&hellip;經驗之談是:在做出重要表態前,先弄清楚自己所要表達的意圖或想得到的信息,做到有的放矢。</br>
</br></li>
<li>處理人際問題的最佳時刻則是在問題發生之前。也就是說,要與對方建立個人及組織間的良好關係,以緩衝談判中的摩擦。這也意味著,在構建談判策略時,要把人際關係與實質問題分開,避免將個人意識牽扯到實質問題的討論中來。</br>
</br></li>
<li>對談判各方更為有效的策略是,視彼此為合作者,大家一起冷靜地去尋求有利於雙方的公平協議。</br>
</br></li>
<li>(著眼於利益,而不是立場)明智的解決辦法:協調雙方利益而不是立場。&hellip;利益是問題的關鍵。談判的根本問題不在於雙方立場上的衝突,而在於雙方需求、願望、想法乃至恐懼等方面的衝突。</br>
</br></li>
<li>在整個過程中,力求完全準確是錯誤的。你很難碰到有哪位決策者寫下得失利弊,進行權衡。畢竟你是在試著理解一個非常人性化的選擇,而不是做一道數學計算題。要認識到雙方都有多重利益。在幾乎所有的談判中,每一方都有多種利益,而不只是一種。</br>
</br></li>
<li>人類的基本需求包括:安全感，經濟利益，歸屬感，獲得他人認同，能主宰自己的生活。</br>
</br>27. 談判的目的是實現自己的利益。只有與對方就此溝通,才能增加實現這些利益的可能性。對方可能並不知道你的利益是什麼,你也可能不知道對方的利益所在,你們中有一方或者雙方只顧抱怨已經過去的事情,而不考慮下一步該怎麼做,或許你們根本就沒有聽對方在說些什麼。&hellip;如果希望對方認真考慮你的利益,那就明確告訴他們怎樣做才符合你的利益。&hellip;首要原則就是:具體。具體的細節不僅讓你的敘述真實可信,還能增加影響力。&hellip;只要你沒有表現出認為對方利益不重要或不合理,你就可以採取堅定的立場來陳述自己所關注問題的嚴重性。&hellip;如果你希望對方重視你的利益,那麼首先你就應當表明你重視對方的利益。&hellip;先說問題,再拿出你的答案。&hellip;如果你希望對方傾聽並且理解你的解釋,那麼就先說出自己的考慮,然後再得出結論或提出建議。</br>
</br>28. 問「為什麼」這個問題通常有兩種截然不同的意思。一種是回頭看,找原因,認為我們的行為是由已經發生的事情決定的;另一種是向前看,找目的,我們的行為取決於自己的意志。&hellip;向前看比回頭看更符合你的利益。不要與對方爭論已經發生的事情。&hellip;具體而不失靈活。在談判中,既要站穩立場,又要樂於接受各種新想法。&hellip;要將利益轉化成具體的選擇方案,首先應當問一下自己:「如果對方明天同意接受我的建議,那麼我希望對方同意什麼?」為了保持靈活性,你制訂的每一份選擇方案都視作是在闡明自己的利益。多考慮幾種能滿足你利益的方案。闡明自己的利益是關鍵。&hellip;對問題強硬,對人要溫和。&hellip;有努力捍衛自己的利益,談判才能取得明智的結果,也就是自己獲益最大、對方損失最小。談判雙方都力主自己的利益,這往往會激發創造性,找出對雙方都有利的方案。</br>
</br>29. 就事論事,但不要指責對方。不僅不要指責對方,還要對他們表示支持:洗耳恭聽對方的意見,對他們彬彬有禮,感謝對方付出的時間和精力,強調你也考慮到他們的基本要求等。你要讓對方知道,你對事不對人。一個有用的經驗法則是,不僅要全力對付問題,而且要全力支持對方。這看似矛盾,而從心理學角度而言,這的確是一組矛盾,但正是這種矛盾促使問題得以解決。心理學上一個很著名的理論就是認知不一致理論。</br>
</br>30. (為共同利益創造選擇方案)在大多數談判中,有四大障礙阻止了人們創造多種選擇的方案:(1)不成熟的判斷;(2)尋求單一的答案;(3)以為餡餅的大小是不變的;(4)認為「他們的問題應該由他們自己解決」。為了克服這些障礙,你必須瞭解它們。</br>
</br>31. 對創造力最有害的是那種總是抓住一切新事物的不足大做文章的批判意識。評判妨礙了想像力的發揮。對即將而來的談判壓力,你的批判意識可能會變得更強。實際談判需要的似乎是切實可行的想法,而不是憑空想像。</br>
</br>32. 為了尋求富有創造性的選擇方案,你需要做到:(1)將創造選擇方案與評判方案二者分開;(2)擴大談判桌上的選擇,不要只尋求唯一的方案;(3)尋求共同利益;(4)找到讓對方容易決策的方法。</br>
</br>33. 於共同利益,有三點值得牢記:首先,共同利益潛藏在每項談判中,它們往往不是即時可見的。&hellip;第二,共同利益只是機遇,不是天上掉下來的餡餅。&hellip;第三,強調你們的共同利益可以使談判變得愉快、順利。</br>
</br>34. 最利於雙方達成協議的差異類型是利益差異、觀念差異、不同的時間觀、不同預期和對風險的不同態度等。</br>
</br>35. 許多談判者都不能肯定自己要的是方案還是實際行動。然而,區分二者是至關重要的。如果你要的是行動,就不要再增加「談判空間」。</br>
</br>36. 由於大多數人受到合理觀念的強烈影響,所以,找到讓對方容易接受的解決方案的有效途徑是,對方案進行稍許加工,讓對方覺得合理。當對方覺得自己做事正確時,他們就更容易接受這個方案。所謂正確,即認為是公平、合法、令人自豪的等等。有先例最能促成決定,所以要努力尋找這樣的先例。尋找一個對方在類似情況下作過的決定或聲明,並盡量在此基礎上提出一個協議,這樣就為你的要求提供了一個客觀標準,讓對方容易接受。意識到對方願望的連貫性,想想對方做過的事或說過的話,這樣可以幫助你擬定你能接受,又能照顧到對方利益的選擇方案。</br>
</br>37. 原則談判能愉快、有效地達成明智的協議。越是用公平原則、效率原則或科學標準解決具體問題,就越有可能最終達成明智而公平的一攬子協議。你和對方越重視先例以及社會慣例,就越有可能從以往的經驗中獲益。</br>
</br>38. 如果雙方都用客觀標準來解決問題,而不是強迫對方妥協,談判就變得輕鬆多了。</br>
</br>39. 進行原則談判存在兩個問題:即如何制定客觀標準,以及如何在談判中運用客觀標準。</br>
</br>40. 在考慮程序方案時,還可以參考其他解決分歧的基本手段:如排序、抽籤、由他人來決定等。</br>
</br>41. 壓力的形式有多種:賄賂、威脅、強迫別人相信或是全然拒絕讓步。對於所有這些,原則性反應都是一樣的:讓對方擺出理由,提出你認為適用的客觀標準。除非基於客觀標準,否則絕不妥協。遵從原則,絕不屈服於壓力。</br>
</br>42. 假如對方不肯在立場上作任何讓步,而你又找不到可以接受它的原則基礎,你應該做一個估計,與自己的最佳選擇相比,接受對方不合理條件,你是否能有所得。你應該在實際利益和維護你自己身為原則談判者名聲之間權衡輕重。談判中,將討論的重心從對方願意做什麼轉為討論應如何解決問題,並不能結束爭論,也不能保證有滿意的結果。但它卻提供了你可以採取的有力戰術,避免了在立場上討價還價所要付出的高昂代價。</br>
</br>43. (如果對方實力更強大怎麼辦?)缺乏最佳替代方案的風險。如果你還沒有認真考慮協議失敗後的措施,就等於是毫無目的地在談判。&hellip;人們常犯的錯誤是,從心理上傾向從總量上來看替代方案。&hellip;但是問題在於,你不能同時擁有所有的選擇。如果達不成協議,你只能從中選擇一個替代方案。&hellip;果你期望明智地進行談判,你至少應該有一個初步的想法,這是極其重要的。談判是否達成協議,完全取決於最佳替代方案對於你的吸引力。制定一條警戒線。雖然你的最佳替代方案是衡量一切擬訂協議的可靠標準,你還需要另外的衡量標準。如果可能達成的協議在內容上會有令人極不滿意的地方,那麼確定一個雖不理想但卻比最佳替代方案更好接受的協議會幫助你及早發現問題。</br>
</br>44. 拿出最佳替代方案需要三個步驟:第一,提出如果不能達成協議自己所要採取的措施;第二,完善其中最有希望的想法,並把它們轉化成具體的替代方案;第三,初步選定看上去最好的替代方案。&hellip;你的最佳替代方案是你面對看似強大的談判者所能採取的最有效措施。</br>
</br>45. (如果對方不合作怎麼辦?)讓對方注重事情本身的是非曲直,有三種基本策略。第一是基於你能做什麼。&hellip;第二種策略,即關注對方能做什麼。&hellip;第三種策略是,關注第三方能做什麼。</br>
</br>46. 如何避免陷入攻擊和辯解的惡性循環中?答案是不要回擊。一般來說,對方的「攻擊」包括三種手段:直截了當地表明自己的立場;反駁你的觀點;對你進行人身攻擊。下面,我們看看一名原則談判者是如何應對這些攻擊的。不要攻擊對方的立場,而是透過立場看利益。在對方提出自己的立場時,既不接受也不拒絕,而是把對方的立場當作一種可能的選擇,尋找立場背後的利益,找到其遵循的原則,並考慮改進的方法。&hellip;不要替自己的想法辯護,歡迎批評和建議。&hellip;把批評引向建設性軌道的另一種方法是,轉換雙方的位置,徵求對方的意見。&hellip;變人身攻擊為針對問題的批評。</br>
</br>47. 注重談判柔術的人使用兩個關鍵手段。第一是提問而不是陳述。陳述容易導致對抗,而提問得到的則是答案。&hellip;提問不是批評,而是啟發。&hellip;沉默是你最好的武器,要充分利用它。如果對方提出不合理方案或是採取在你看來站不住腳的攻擊,最好的手段是一言不發。</br>
</br>48. (如果對方使用卑鄙手段怎麼辦?)當對方使用詭計時,商定談判規則有三個步驟:發現詭計,揭穿詭計,質疑詭計的合理性與可取性——談判就圍繞這三步展開。採取應對措施你必須先瞭解情況。要學會識別哪些是欺騙伎倆,哪些是故意讓你難受的計謀,哪些會使對方陷入立場之爭而不能自拔。通常,詭計一旦被識破,也就失去了它應有的效力。&hellip;指出對方的伎倆不僅讓伎倆本身失效,也讓對方擔心會惹惱你。對於對方的詭計,一個簡單的發問就足以讓他們罷手。然而,揭穿詭計最重要的目的是你有了一個協商遊戲規則的機會,這就是第三步。這種協商針對的是程序性問題,而不是實質性問題,其目的仍然是有效、愉快地達成明智協議(這裡是關於程序方面的協議)。&hellip;把人和事分開。不要因為對方使用了某種你認為不正當的手段,就對其進行人身攻擊。</br>
</br>49. 詭計策略可以分為三類:故意欺騙、心理戰術和在立場上施壓。你要準備措施應對這三種策略。把人與事分開。除非有充分的理由,否則,不要相信別人。這並不意味著把對方看成騙子,而是說把談判與信任問題分開。&hellip;不能只因為對方在和你談判就認為他們擁有全權。&hellip;在互相讓步之前,首先確定對方的權限。&hellip;如果對方含糊其辭,你可能希望與真正管事的人談判,或是表明你這一方保留重新考慮任何提議的同等自由。如果對方出乎意外地宣佈把你認定的協議作為進一步談判的基礎,你要堅持對等原則。&hellip;如果懷疑對方有不遵守協議的意圖,你可以把遵守協議本身作為協議的一部分。&hellip;誠實的談判並不需要完全透露自己的想法。</br>
</br>50. 果發現周圍環境對你不利,要立即指出來。&hellip;在任何情況下,你的任務都是發現問題,向對方指明問題,然後以客觀、講原則的態度與他們商定一個更好的談判環境。</br>
</br>51. 你可以用阻斷對方傳達信息的方式來應對強硬的破釜沉舟戰術。&hellip;不管怎樣,不要把對方的鎖定當回事,將它的重要性淡化,這樣對方才能體面地作出讓步。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思維點滴_關於未來]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/22/si-wei-dian-di-guan-yu-wei-lai/"/>
    <updated>2014-02-22T21:36:20+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/22/si-wei-dian-di-guan-yu-wei-lai</id>
    <content type="html"><![CDATA[<p>今天上午，參加大連春季招聘會，未有合適崗位可應聘。午飯和下午與摯友聚會，暢談關於現狀，關於未來。</p>

<p>將所聊的脈絡、思維點滴記錄如下：</p>

<ol>
<li><p>即將而立之年，可轉行，前提是所轉行業、方向對於自己有持續性(持久性)，需以事業(開拓)而非工作(餬口)之心面對；若非如此，需以已有經驗爲依託繼續深入，不可浮躁變換目標。</p></li>
<li><p>尋求可持續發展之道，至少使得自己(家人)的生活水平維持現狀(單身時期)。考慮年工資水平與漲幅、物價水平與漲幅、未來因組建家庭等原因的消費支出以及其他各方面因素，所選職業方向是否能夠完成上述目標。</p></li>
<li><p>尋求揚長避短的發展軌跡，考慮自身的絕對優勢與相對優勢(參考<a href="http://wiki.mbalib.com/zh-tw/%E7%BB%9D%E5%AF%B9%E4%BC%98%E5%8A%BF%E7%90%86%E8%AE%BA">絕對優勢理論</a>)，選擇最適合自己的職業方向。</p></li>
<li><p>針對現狀，或者投資有較高回報率和持續性的項目，或者投資自身——MBA、研究生或其他，努力擴大自己的視野、思考高度和人際關係高度。<!--more--></p></li>
<li><p>原始積累的獲取最為困難，如何借助外力，彼此協助，取得進展。</p></li>
<li><p>創業優先，就業其次。</p></li>
<li><p>不可急躁，不可輕易放棄；機遇若來，努力抓住；機遇未來，盡心準備。</p></li>
<li><p>最為可貴，在於知道自己想要什麼，正在做什麼，怎麼改變，怎麼改善。</p></li>
<li><p>正業副業並不矛盾，相互轉化，關鍵在於戰略性思考。</p></li>
<li><p>小心計劃，大膽嘗試，決斷方向，解決細節，不懼失敗，步步為營。</p></li>
<li><p>多看書，獨立、主動、批判性思考。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[100 Interview Questions for Software Developers(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/20/100-interview-questions-for-software-developers/"/>
    <updated>2014-02-20T15:46:36+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/20/100-interview-questions-for-software-developers</id>
    <content type="html"><![CDATA[<p>1月13日，著名博客作者<a href="http://www.noop.nl">Jurgen Appelo</a>寫了一篇博文：<a href="http://www.noop.nl/2009/01/100-interview-questions-for-software-developers.html">“軟件開發者面試百問”</a>。該文甚受讀者歡迎，15日便登上了delicious，Popurls.com，Reddit的首頁。InfoQ中文站在得到作者許可之後，将其全文翻譯爲中文，希望可以對國內讀者有所助益。</br>
</br>
以下爲文章全文：</br>
</br>
想雇到搞軟件開發的聰明人可不容易。萬一一不小心，就會搞到一堆低能大狒狒。我去年就碰到这種事了。你肯定不想這樣吧。聽我的，没錯。在樹上開站立會議門都没有。</br>
</br>
問點有難度的問題能幫你把聰明人跟狒狒們分開。我决定把我自己整理出來的軟件開發者面視百問發出来，希望能幫到你們的忙。<!--more--></br>
</br>
這個列表涵蓋了軟件工程知識體系中定義的大多數知識域。當然，如果你只想找出類拔萃的程序員，便只需涉及結構、算法、數據結構、測試这幾個話題。如果想雇架構師，也可以只考慮需求、功能設計、技術設計这些地方。</br>
</br>
不過不管你怎麼做，都要牢記一點：</br>
</br>
這裡大多數問題的答案都没有對错之分！</br>
</br>
你可以把我的這些問題作為引子，展開討論。例如下面有個問題是使用静態方法或是單例的缘由。如果那個面試者就此展開長篇大論，那他很有可能是個聰明能幹的家伙！如果他一臉茫然的看著你，發出這種聲音，很明顯這就是只狒狒了。同樣，想知道一個數是不是2的乘方也有很多方法，不過要是面試的人想用mod運算符，嗯……你知道我的意思吧。（你不知道也没關係，來根香蕉？）</br>
</br>
<strong>需求</strong></br>
</br>
1) 你能給出一些非功能性（或者質量）需求的例子么？</br>
2) 如果客户需要高性能、使用极其方便而又高度安全，你會给他什麼建議？</br>
3) 你能給出一些用來描述需求的不同技術么？它們各自適用於什麼場景？</br>
4) 需求跟蹤是什麼意思？什麼是向前追溯，什麼是向後追溯？</br>
5) 你喜歡用什麼工具跟蹤需求？</br>
6) 你怎麼看待需求變化？它是好是壞？給出你的理由。</br>
7) 你怎樣研究需求，發現需求？有哪些資源可以用到？</br>
8) 你怎麼給需求製定優先級？有哪些技術？</br>
9) 在需求過程中，用户、客户、開發人員各自的職責是什麼？</br>
10) 你怎麼對待不完整或是令人費解的需求？</br>
</br>
<strong>功能設計</strong></br>
</br>
1) 在功能設計中有哪些隱喻？給出幾個成功的例子。</br>
2) 如果有些功能的執行時間很长，怎麼能讓用户感觉不到太長的等待？</br>
3) 如果用户必須要在一個很小的區域内，從一個常常的列表中選擇多个條目，你會用什么控件？</br>
4) 有哪些方法可以保证數據項的完整？</br>
5) 建立系統原型有哪些技術？</br>
6) 应用程序怎樣建立對用户行为的预期？給出一些例子。</br>
7) 如何入手設計一組數量龐大而又複雜的特性，你能舉出一些設計思路吗？</br>
8) 有一個列表，其中有10個元素，每個元素都有20個字段可以編輯，你怎樣設計這種情况？如果是1000個元素，每個元素有3個字段呢？</br>
9) 用不同的顏色對一段文本中的文字標記高亮，這種做法有什麼問題？</br>
10) Web環境和Windows環境各有些什么限制？</br>
</br>
<strong>技術設計</strong></br>
</br>
1) 什麼是低耦合和高聚合？封裝原則又是什麼意思？</br>
2) 在Web應用中，你怎樣避免几個人編輯同一段數據所造成的衝突？</br>
3) 你知道設計模式吗？你用过哪些設計模式？在什麼场合下用的？</br>
4) 是否了解什麼是無狀態的業務層？長事物如何與之相適應？</br>
5) 在搭建一個架構，或是技術設計時，你用過幾種圖？</br>
6) 在N層架構中都有哪些層？它們各自的職責是什麼？</br>
7) 有哪些方法可以確保架構中數據的正確和健壮？</br>
8) 面向对象設計和面向組件設計有哪些不同之處？</br>
9) 怎樣在數據庫中對用户授權、用户配置、權限管理這幾項功能建模？</br>
10) 怎樣按照等級制度給动物王國（包括各種物種和各自的行爲）建模？</br>
</br>
<strong>程序設計</strong></br>
</br>
1) 你怎樣保證你的代碼可以處理各種錯誤事件？</br>
2) 解釋一下什麼是測試驅動開發，舉出極限編程中的一些原則。</br>
3) 看别人代碼的時候，你最關心什麼地方？</br>
4) 什麼時候使用抽象類，什麼時候使用接口？</br>
5) 除了IDE以外，你還喜歡哪些必不可少的工具？</br>
6) 你怎麼保證代碼執行速度快，而又不出問題？</br>
7) 什麼時候用多態，什麼時候用委派？</br>
8) 什麼時候使用帶有靜態成員的類，什麼時候使用單例？</br>
9) 你在代碼裏面怎麼提前處理需求的變化？給一些例子。</br>
10) 描述一下實現一段代碼的過程，從需求到最终交付。</br>
</br>
<strong>算法</strong></br>
</br>
1) 怎樣知道一個數字是不是2的乘方？怎樣判斷一個数是不是奇數？</br>
2) 怎樣找出鏈表中間的元素？</br>
3) 怎樣改變10,000個靜態HTML頁面中所有電話號碼的格式？</br>
4) 舉出一個你所用過的遞歸的例子。</br>
5) 在散列表和排序後的列表中找一個元素，哪個查找速度最快？</br>
6) 不管是書、雜誌还是網絡，你從中所學到的最後一點算法知識是什麼？</br>
7) 怎樣把字符串反轉？你能不用臨時的字符串么？</br>
8) 你願意用什么類型的語言來編寫複雜的算法？</br>
9) 有一個數組，裏面是從1到1,000,000的整数，其中有一個數字出現了两次，你怎麼找出那個重複的數字？</br>
10) 你知道“旅行商問題（Traveling Salesman Problem）”么？</br>
</br>
<strong>數據結構</strong></br>
</br>
1) 怎樣在内存中實現倫敦地鐵的結構？</br>
2) 怎樣以最有效的方式在數據庫中存儲顏色值？</br>
3) 队列和堆棧區別是什麼？</br>
4) 用堆或者棧存儲數據的區別是什麼？</br>
5) 怎樣在數據庫中存儲N維向量？</br>
6) 你倾向於用哪种類型的語言編寫複雜的數據結構？</br>
7) 21的二進製值是什么？十六進製值呢？</br>
8) 不管是書、雜誌还是網絡，你從中所學到的最後一點數據結構的知識是什麼？</br>
9) 怎樣在XML文檔中存儲足球比赛結果（包括队伍和比分）？</br>
10) 有哪些文本格式可以保存Unicode字符？</br>
</br>
<strong>測試</strong></br>
</br>
1) 什麼是回歸測試？怎樣知道新引入的變化没有給現有的功能造成破壞？</br>
2) 如果業務層和數據層之間有依赖關係，你該怎麼寫單元測試？</br>
3) 你用哪些工具測試代碼質量？</br>
4) 在產品部署之後，你最常碰到的是什麼類型的問题？</br>
5) 什麼是代碼覆蓋率？有多少種代碼覆盖率？</br>
6) 功能測試和探索性測試的區別是什麼？你怎麼對網站進行測試？</br>
7) 測試套件、測試用例、測試計劃，這三者之間的區別是什麼？你怎麼組織測試？</br>
8) 要對電子商務網站做冒煙測試，你會做哪些類型的測試？</br>
9) 客户在驗收測試中會發現不满意的東西，怎樣减少這種情况的發生？</br>
10) 你去年在測試和質量保證方面學到了哪些東西？</br>
</br>
<strong>維護</strong></br>
</br>
1) 你用哪些工具在維護階段對產品進行監控？</br>
2) 要想對一個正在產品環境中被使用的產品進行升級，該注意哪些重要事項？</br>
3) 如果在一个龐大的文件中有錯誤，而代碼又無法逐步跟蹤，你怎麼找出錯誤？</br>
4) 你怎樣保證代碼中的變化不會影響產品的其他部分？</br>
5) 你怎樣爲產品編寫技術文檔？</br>
6) 你用过哪些方式保證軟件產品容易維護？</br>
7) 怎樣在產品運行的環境中進行系統調試？</br>
8) 什麼是負載均衡？負載均衡的方式有哪些？</br>
9) 為什麼在應用程序的生命週期中，軟件維護費用所佔的份額最高？</br>
10) 再造工程（re-engineering）和逆向工程（reverse engineering）的區別是什麼？</br>
</br>
<strong>配置管理</strong></br>
</br>
1) 你知道配置管理中基線的含義麼？怎樣把項目中某個重要的時刻凍結？</br>
2) 你一般會把哪些東西纳入版本控制？</br>
3) 怎樣可以保證團隊中每個人都知道誰改變了哪些東西？</br>
4) Tag和Branch的區別是什么？在什麼情况下该使用tag，什麼時候用branch？</br>
5) 怎樣管理技術文檔——如產品架構文檔——的變化？</br>
6) 你用什麼工具管理項目中所有數字信息的狀態？你最喜歡哪种工具？</br>
7) 如果客户想要對一款已經發佈的產品做出變動，你怎麼處理？</br>
8) 版本管理和發佈管理有什麼差異？</br>
9) 對文本文件的變化和二進製文件的變化進行管理，這二者有什麼不同？</br>
10) 同時處理多個變更請求，或是同時進行增量開發和維護，這種事情你怎麼看待？</br>
</br>
<strong>項目管理</strong></br>
</br>
1) 範圍、時間、成本，这三項中哪些是可以由客户控制的？</br>
2) 誰該對項目中所要付出的一切做出估算？誰有權設置最後期限？</br>
3) 减少交付的次數，或是减少每個交付中的工作量，你喜歡哪種做法？</br>
4) 你喜歡用哪種圖來跟蹤項目進度？</br>
5) 迭代和增量的區別在哪里？</br>
6) 試著解释一下風險管理中用到的實踐。風險該如何管理？</br>
7) 你喜歡任務分解还是滾動式計劃？</br>
8) 你需要哪些东西幫助你判斷項目是否符合時間要求，在預算範圍内運作？</br>
9) DSDM、Prince2、Scrum，这三者之間有哪些區别？</br>
10) 如果客户想要的東西太多，你在範圍和時間上怎樣跟他達成一致呢？</br>
</br>
閱讀英文原文：<a href="http://www.noop.nl/2009/01/100-interview-questions-for-software-developers.html">100 Interview Questions for Software Developers</a></br>
</br>
<a href="http://www.infoq.com/cn/articles/programmer-interview">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excerpt_Software Engineering: A Practitioner Approach]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/19/excerpt-software-engineering-a-practitioner-approach/"/>
    <updated>2014-02-19T18:44:39+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/19/excerpt-software-engineering-a-practitioner-approach</id>
    <content type="html"><![CDATA[<ol>
<li><p>&hellip; a set of quality factors that were a first step toward the development of metrics for software quality. These factors assess software from three distinct points of view: (1) product operation (using it), (2) product revision (changing it), and (3) product transition (modifying it to work in a different environment; i.e., &ldquo;porting&rdquo; it). (P95-96)</p></li>
<li><p>Gilb suggests definitions and measures for each.</br>
<strong>Correctness</strong>. A program must operate correctly or it provides little value to its users. Correctness is the degree to which the software performs its required function. The most common measure for correctness is defects per KLOC, where a defect is defined as a verified lack of conformance to requirements. When considering the overall quality of a software product, defects are those problems reported by a user of the program after the program has been released for general use. For quality assessment purposes, defects are counted over a standard period of time, typically one year.<!--more--></br><strong>Maintainability</strong>. Software maintenance accounts for more effort than any other software engineering activity. Maintainability is the ease with which a program can be corrected if an error is encountered, adapted if its environment changes, or enhanced if the customer desires a change in requirements. There is no way to measure maintainability directly; therefore, we must use indirect measures. A simple time-oriented metric is mean-time-to-change (MTTC), the time it takes to analyze the change request, design an appropriate modification, implement the change, test it, and distribute the change to all users. On average, programs that are maintainable will have a lower MTTC (for equivalent types of changes) than programs that are not maintainable.</br>Hitachi has used a cost-oriented metric for maintainability called spoilage—the cost to correct defects encountered after the software has been released to its end-users. When the ratio of spoilage to overall project cost (for many projects) is plotted as a function of time, a manager can determine whether the overall maintainability of software produced by a software development organization is improving. Actions can then be taken in response to the insight gained from this information.  </br><strong>Integrity</strong>. Software integrity has become increasingly important in the age of hackers and firewalls. This attribute measures a system&rsquo;s ability to withstand attacks (both accidental and intentional) to its security. Attacks can be made on all three components of software: programs, data, and documents.  To measure integrity, two additional attributes must be defined: threat and security. Threat is the probability (which can be estimated or derived from empirical evidence) that an attack of a specific type will occur within a given time. Security is the probability (which can be estimated or derived from empirical evidence) that the attack of a specific type will be repelled. The integrity of a system can then be defined as</br><strong>integrity = summation [(1 – threat)*(1 – security)]</strong></br>where threat and security are summed over each type of attack.</br><strong>Usability</strong>. The catch phrase &ldquo;user-friendliness&rdquo; has become ubiquitous in discussions of software products. If a program is not user-friendly, it is often doomed to failure, even if the functions that it performs are valuable. Usability is an attempt to quantify user-friendliness and can be measured in terms of four characteristics: (1) the physical and or intellectual skill required to learn the system, (2) the time required to become moderately efficient in the use of the system, (3) the net increase in productivity (over the approach that the system replaces) measured when the system is used by someone who is moderately efficient, and (4) a subjective assessment (sometimes obtained through a questionnaire) of users attitudes toward the system. (P96-97)</br></p></li>
<li><p>A leading executive was once asked what single characteristic was most important when selecting a project manager. His response: &ldquo;a person with the ability to know what will go wrong before it actually does &hellip;&rdquo; We might add: &ldquo;and the courage to estimate when the future is cloudy.&rdquo; (P114)</br></p></li>
<li><p>A considerably more intelligent strategy for risk management is to be proactive. A proactive strategy begins long before technical work is initiated. Potential risks are identified, their probability and impact are assessed, and they are ranked by importance. Then, the software team establishes a plan for managing risk. The primary objective is to avoid risk, but because not all risks can be avoided, the team works to develop a contingency plan that will enable it to respond in a controlled and effective manner. (P146)</br></p></li>
<li><p>When risks are analyzed, it is important to quantify the level of uncertainty and the degree of loss associated with each risk. To accomplish this, different categories of risks are considered.</br><strong>Project risks</strong> threaten the project plan. That is, if project risks become real, it is likely that project schedule will slip and that costs will increase. Project risks identify potential budgetary, schedule, personnel (staffing and organization), resource, customer, and requirements problems and their impact on a software project. Project complexity, size, and the degree of structural uncertainty were also defined as project (and estimation) risk factors.</br><strong>Technical risks</strong> threaten the quality and timeliness of the software to be produced. If a technical risk becomes a reality, implementation may become difficult or impossible. Technical risks identify potential design, implementation, interface, verification, and maintenance problems. In addition, specification ambiguity, technical uncertainty, technical obsolescence, and &ldquo;leading-edge&rdquo; technology are also risk factors. Technical risks occur because the problem is harder to solve than we thought it would be.</br><strong>Business risks</strong> threaten the viability of the software to be built. Business risks often jeopardize the project or the product. Candidates for the top five business risks are (1) building a excellent product or system that no one really wants (market risk), (2) building a product that no longer fits into the overall business strategy for the company (strategic risk), (3) building a product that the sales force doesn&rsquo;t understand how to sell, (4) losing the support of senior management due to a change in focus or a change in people (management risk), and (5) losing budgetary or personnel commitment (budget risks). It is extremely important to note that simple categorization won&rsquo;t always work. Some risks are simply unpredictable in advance. (P147)</br></p></li>
<li><p>One method for identifying risks is to create a risk item checklist. The checklist can be used for risk identification and focuses on some subset of known and predictable risks in the following generic subcategories:</br>• Product size—risks associated with the overall size of the software to be built or modified.</br>• Business impact—risks associated with constraints imposed by management or the marketplace.</br>• Customer characteristics—risks associated with the sophistication of the customer and the developer&rsquo;s ability to communicate with the customer in a timely manner.</br>• Process definition—risks associated with the degree to which the software process has been defined and is followed by the development organization.</br>• Development environment—risks associated with the availability and quality of the tools to be used to build the product.</br>• Technology to be built—risks associated with the complexity of the system to be built and the &ldquo;newness&rdquo; of the technology that is packaged by the system.</br>• Staff size and experience—risks associated with the overall technical and project experience of the software engineers who will do the work. (P148)</br></p></li>
<li><p>Some software developers continue to believe that software quality is something you begin to worry about after code has been generated. Nothing could be further from the truth! Software quality assurance (SQA) is an umbrella activity that is applied throughout the software process.</br>
SQA encompasses (1) a quality management approach, (2) effective software engineering technology (methods and tools), (3) formal technical reviews that are applied throughout the software process, (4) a multitiered testing strategy, (5) control of soft- ware documentation and the changes made to it, (6) a procedure to ensure compliance with software development standards (when applicable), and (7) measurement and reporting mechanisms. (P193-194)</br></p></li>
<li><p>Variation control is the heart of quality control. (P194)</br></p></li>
<li><p>When we examine an item based on its measurable characteristics, two kinds of quality may be encountered: quality of design and quality of conformance.</br><strong>Quality of design</strong> refers to the characteristics that designers specify for an item. The grade of materials, tolerances, and performance specifications all contribute to the quality of design. As higher-grade materials are used, tighter tolerances and greater levels of performance are specified, the design quality of a product increases, if the product is manufactured according to specifications.</br><strong>Quality of conformance</strong> is the degree to which the design specifications are followed during manufacturing. Again, the greater the degree of conformance, the higher is the level of quality of conformance.</br>In software development, quality of design encompasses requirements, specifications, and the design of the system. Quality of conformance is an issue focused primarily on implementation. If the implementation follows the design and the result- ing system meets its requirements and performance goals, conformance quality is high.  </br>But are quality of design and quality of conformance the only issues that software engineers must consider? Robert Glass argues that a more “intuitive” relationship is in order:  </br><strong>User satisfaction = compliant product + good quality + delivery within budget and schedule</strong>  </br>At the bottom line, Glass contends that quality is important, but if the user isn’t satisfied, nothing else really matters. DeMarco reinforces this view when he states: “A product’s quality is a function of how much it changes the world for the better.” This view of quality contends that if a software product provides substantial benefit to its end-users, they may be willing to tolerate occasional reliability or performance problems. (P195-196)</br></p></li>
<li><p>Technical work needs reviewing for the same reason that pencils need erasers: To err is human. The second reason we need technical reviews is that although people are good at catching some of their own errors, large classes of errors escape the originator more easily than they escape anyone else. The review process is, therefore, the answer to the prayer of Robert Burns:</br><strong>O wad some power the giftie give us</br>
to see ourselves as other see us</strong></br>A review—any review—is a way of using the diversity of a group of people to:</br>1) Point out needed improvements in the product of a single person or team;</br>2) Confirm those parts of a product in which improvement is either not desired or not needed;</br>3) Achieve technical work of more uniform, or at least more predictable, quality than can be achieved without reviews, in order to make technical work more manageable. (P202)</br></p></li>
<li><p>The following represents a minimum set of guidelines for formal technical reviews:</br>
1) Review the product, not the producer.</br>
2) Set an agenda and maintain it.</br>
3) Limit debate and rebuttal.</br>
4) Enunciate problem areas, but don&rsquo;t attempt to solve every problem noted.</br>
5) Take written notes.</br>
6) Limit the number of participants and insist upon advance preparation.</br>
7) Develop a checklist for each product that is likely to be reviewed.</br>
8) Allocate resources and schedule time for FTRs(Formal Technical Reviews).</br>
9) Conduct meaningful training for all reviewers.</br>
10) Review your early reviews. (P208)</br></p></li>
<li><p>If we consider a computer-based system, a simple measure of reliability is mean-time-between-failure (MTBF), where </br><strong>MTBF = MTTF + MTTR</strong></br>The acronyms MTTF and MTTR are mean-time-to-failure and mean-time-to-repair, respectively.</br>
&hellip;</br>In addition to a reliability measure, we must develop a measure of availability. Software availability is the probability that a program is operating according to requirements at a given point in time and is defined as</br><strong>Availability = [MTTF/(MTTF + MTTR)] * 100%</strong></br>The MTBF reliability measure is equally sensitive to MTTF and MTTR. The availability measure is somewhat more sensitive to MTTR, an indirect measure of the maintainability of software. (P212-213)</br></p></li>
<li><p>System engineering is a modeling process. Whether the focus is on the world view or the detailed view, the engineer creates models that</br>• Define the processes that serve the needs of the view under consideration.</br>• Represent the behavior of the processes and the assumptions on which the behavior is based.</br>• Explicitly define both exogenous and endogenous input3 to the model.</br>• Represent all linkages (including output) that will enable the engineer to better understand the view.</br>
To construct a system model, the engineer should consider a number of restraining factors:</br>
1) Assumptions that reduce the number of possible permutations and variations, thus enabling a model to reflect the problem in a reasonable manner. As an example, consider a three-dimensional rendering product used by the entertainment industry to create realistic animation. One domain of the product enables the representation of 3D human forms. Input to this domain encompasses the ability to specify movement from a live human actor, from video, or by the creation of graphical models. The system engineer makes certain assumptions about the range of allowable human movement (e.g., legs cannot be wrapped around the torso) so that the range of inputs and processing can be limited.</br>2) Simplifications that enable the model to be created in a timely manner. To illustrate, consider an office products company that sells and services a broad range of copiers, faxes, and related equipment. The system engineer is modeling the needs of the service organization and is working to understand the flow of information that spawns a service order. Although a service order can be derived from many origins, the engineer categorizes only two sources: internal demand and external request. This enables a simplified partitioning of input that is required to generate the service order.</br>3) Limitations that help to bound the system. For example, an aircraft avionics system is being modeled for a next generation aircraft. Since the aircraft will be a two-engine design, the monitoring domain for propulsion will be modeled to accommodate a maximum of two engines and associated redundant systems.</br>4) Constraints that will guide the manner in which the model is created and the approach taken when the model is implemented. For example, the technology infrastructure for the three-dimensional rendering system described previously is a single G4-based processor. The computational complexity of problems must be constrained to fit within the processing bounds imposed by the processor.</br>5) Preferences that indicate the preferred architecture for all data, functions, and technology. The preferred solution sometimes comes into conflict with other restraining factors. Yet, customer satisfaction is often predicated on the degree to which the preferred approach is realized. (P249-250)</br></p></li>
<li><p>Software requirements analysis may be divided into five areas of effort: (1) problem recognition, (2) evaluation and synthesis, (3) modeling, (4) specification, and (5) review. (P272)</br></p></li>
<li><p>Over the past two decades, a large number of analysis modeling methods have been developed. Investigators have identified analysis problems and their causes and have developed a variety of modeling notations and corresponding sets of heuristics to overcome them. Each analysis method has a unique point of view. However, all analysis methods are related by a set of operational principles:</br>1) The information domain of a problem must be represented and understood.</br>2) The functions that the software is to perform must be defined.</br>3) The behavior of the software (as a consequence of external events) must be represented.</br>4) The models that depict information, function, and behavior must be partitioned in a manner that uncovers detail in a layered (or hierarchical) fashion.</br>
5) The analysis process should move from essential information toward implementation detail.</br>By applying these principles, the analyst approaches a problem systematically. The information domain is examined so that function may be understood more completely. Models are used so that the characteristics of function and behavior can be communicated in a compact fashion. Partitioning is applied to reduce complexity. Essential and implementation views of the software are necessary to accommodate the logical constraints imposed by processing requirements and the physical constraints imposed by other system elements.</br>In addition to these operational analysis principles, Davis suggests a set of guiding principles for requirements engineering:</br>• Understand the problem before you begin to create the analysis model. There is a tendency to rush to a solution, even before the problem is understood. This often leads to elegant software that solves the wrong problem!</br>• Develop prototypes that enable a user to understand how human/machine inter- action will occur. Since the perception of the quality of software is often based on the perception of the “friendliness” of the interface, prototyping (and the iteration that results) are highly recommended.</br>• Record the origin of and the reason for every requirement. This is the first step in establishing traceability back to the customer.</br>• Use multiple views of requirements. Building data, functional, and behavioral models provide the software engineer with three different views. This reduces the likelihood that something will be missed and increases the likelihood that inconsistency will be recognized.</br>• Rank requirements. Tight deadlines may preclude the implementation of every software requirement. If an incremental process model is applied, those requirements to be delivered in the first increment must be identified.</br>• Work to eliminate ambiguity. Because most requirements are described in a natural language, the opportunity for ambiguity abounds. The use of formal technical reviews is one way to uncover and eliminate ambiguity.</br>A software engineer who takes these principles to heart is more likely to develop a software specification that will provide an excellent foundation for design. (P282-283)</br></p></li>
<li><p>In an excellent book on software testing, Glen Myers states a number of rules that can serve well as testing objectives:</br>1) Testing is a process of executing a program with the intent of finding an error.</br>2) A good test case is one that has a high probability of finding an as-yet- undiscovered error.</br>3) A successful test is one that uncovers an as-yet-undiscovered error.</br></p></li>
<li><p>Before applying methods to design effective test cases, a software engineer must understand the basic principles that guide software testing. Davis suggests a set1 of testing principles that have been adapted for use in this book:</br>• <strong>All tests should be traceable to customer requirements.</strong> As we have seen, the objective of software testing is to uncover errors. It follows that the most severe defects (from the customer’s point of view) are those that cause the program to fail to meet its requirements.</br>• <strong>Tests should be planned long before testing begins.</strong> Test planning can begin as soon as the requirements model is complete. Detailed definition of test cases can begin as soon as the design model has been solidified. Therefore, all tests can be planned and designed before any code has been generated.</br>• <strong>The Pareto principle applies to software testing.</strong> Stated simply, the Pareto principle implies that 80 percent of all errors uncovered during testing will likely be traceable to 20 percent of all program components. The problem, of course, is to isolate these suspect components and to thoroughly test them.</br>• <strong>Testing should begin “in the small” and progress toward testing “in the large.”</strong> The first tests planned and executed generally focus on individual components. As testing progresses, focus shifts in an attempt to find errors in integrated clusters of components and ultimately in the entire system.</br>• <strong>Exhaustive testing is not possible.</strong> The number of path permutations for even a moderately sized program is exceptionally large. For this reason, it is impossible to execute every combination of paths during testing. It is possible, however, to adequately cover program logic and to ensure that all conditions in the component-level design have been exercised.</br>• <strong>To be most effective, testing should be conducted by an independent third party.</strong> By most effective, we mean testing that has the highest probability of finding errors (the primary objective of testing). For reasons that have been introduced earlier in this chapter and are considered in more detail in Chapter 18, the software engineer who created the system is not the best person to conduct all tests for the software. (P439-440)</br></p></li>
<li>And what about the tests themselves? Kaner, Falk, and Nguyen suggest the following attributes of a “good” test:</br>1) A good test has a high probability of finding an error. To achieve this goal, the tester must understand the software and attempt to develop a mental picture of how the software might fail. Ideally, the classes of failure are probed. For example, one class of potential failure in a GUI (graphical user interface) is a failure to recognize proper mouse position. A set of tests would be designed to exercise the mouse in an attempt to demonstrate an error in mouse position recognition.</br>2) A good test is not redundant. Testing time and resources are limited. There is no point in conducting a test that has the same purpose as another test. Every test should have a different purpose (even if it is subtly different). For example, a module of the SafeHome software (discussed in earlier chapters) is designed to recognize a user password to activate and deactivate the system. In an effort to uncover an error in password input, the tester designs a series of tests that input a sequence of passwords. Valid and invalid pass- words (four numeral sequences) are input as separate tests. However, each valid/invalid password should probe a different mode of failure. For example, the invalid password 1234 should not be accepted by a system programmed to recognize 8080 as the valid password. If it is accepted, an error is present. Another test input, say 1235, would have the same purpose as 1234 and is therefore redundant. However, the invalid input 8081 or 8180 has a subtle difference, attempting to demonstrate that an error exists for passwords “close to” but not identical with the valid password.</br>3) A good test should be “best of breed”. In a group of tests that have a similar intent, time and resource limitations may mitigate toward the execution of only a subset of these tests. In such cases, the test that has the highest likelihood of uncovering a whole class of errors should be used.</br>4) A good test should be neither too simple nor too complex. Although it is sometimes possible to combine a series of tests into one test case, the possible side effects associated with this approach may mask errors. In general, each test should be executed separately. (P442-443)</br></li>
<li><p>White-box testing, sometimes called glass-box testing, is a test case design method that uses the control structure of the procedural design to derive test cases. Using white-box testing methods, the software engineer can derive test cases that (1) guarantee that all independent paths within a module have been exercised at least once, (2) exercise all logical decisions on their true and false sides, (3) execute all loops at their boundaries and within their operational bounds, and (4) exercise internal data structures to ensure their validity. (P444)</br></p></li>
<li><p>Black-box testing, also called behavioral testing, focuses on the functional requirements of the software. That is, black-box testing enables the software engineer to derive sets of input conditions that will fully exercise all functional requirements for a program. Black-box testing is not an alternative to white-box techniques. Rather, it is a complementary approach that is likely to uncover a different class of errors than white-box methods.</br>
Black-box testing attempts to find errors in the following categories: (1) incorrect or missing functions, (2) interface errors, (3) errors in data structures or external data base access, (4) behavior or performance errors, and (5) initialization and termination errors.</br>Unlike white-box testing, which is performed early in the testing process, black- box testing tends to be applied during later stages of testing. Because black-box testing purposely disregards control structure, attention is focused on the information domain. Tests are designed to answer the following questions:</br>• How is functional validity tested?</br>• How is system behavior and performance tested? </br>• What classes of input will make good test cases?</br>• Is the system particularly sensitive to certain input values?</br>• How are the boundaries of a data class isolated?</br>• What data rates and data volume can the system tolerate?</br>• What effect will specific combinations of data have on system operation? (P459-460)</br></p></li>
<li><p>Quality of software:</br>
1) Software requirements are the foundation from which quality is measured. Lack of conformance to requirements is lack of quality.</br>
2) Specified standards define a set of development criteria that guide the manner in which software is engineered. If the criteria are not followed, lack of quality will almost surely result.</br>3) There is a set of implicit requirements that often goes unmentioned (e.g., the desire for ease of use). If software conforms to its explicit requirements but fails to meet implicit requirements, software quality is suspect. (P508-509)</br></p></li>
<li><p>The factors that affect software quality can be categorized in two broad groups: (1) factors that can be directly measured (e.g., defects per function-point) and (2) factors that can be measured only indirectly (e.g., usability or maintainability). In each case measurement must occur. We must compare the software (documents, pro- grams, data) to some datum and arrive at an indication of quality.  McCall, Richards, and Walters propose a useful categorization of factors that affect software quality. These software quality factors, focus on three important aspects of a software product: its operational characteristics, its ability to undergo change, and its adaptability to new environments.</br>McCall and his colleagues provide the following descriptions:</br><strong>Correctness</strong>. The extent to which a program satisfies its specification and fulfills the customer&rsquo;s mission objectives.</br><strong>Reliability</strong>. The extent to which a program can be expected to perform its intended function with required precision. [It should be noted that other, more complete definitions of reliability have been proposed.</br>
<strong>Efficiency</strong>. The amount of computing resources and code required by a program to perform its function.</br><strong>Integrity</strong>. Extent to which access to software or data by unauthorized persons can be controlled.</br><strong>Usability</strong>. Effort required to learn, operate, prepare input, and interpret output of a program.</br>
<strong>Maintainability</strong>. Effort required to locate and fix an error in a program. [This is a very limited definition.]</br><strong>Flexibility</strong>. Effort required to modify an operational program.</br><strong>Testability</strong>. Effort required to test a program to ensure that it performs its intended function.</br><strong>Portability</strong>. Effort required to transfer the program from one hardware and/or software system environment to another.</br><strong>Reusability</strong>. Extent to which a program [or parts of a program] can be reused in other applications—related to the packaging and scope of the functions that the program performs.</br><strong>Interoperability</strong>. Effort required to couple one system to another.<br/>
It is difficult, and in some cases impossible, to develop direct measures of these quality factors. Therefore, a set of metrics are defined and used to develop expressions for each of the factors according to the following relationship:</br><strong>Fq = c1 * m1 + c2 * m2 + &hellip; + cn * mn</strong></br>where Fq is a software quality factor, cn are regression coefficients, mn are the metrics that affect the quality factor. Unfortunately, many of the metrics defined by McCall et al. can be measured only subjectively. The metrics may be in the form of a check-list that is used to &ldquo;grade&rdquo; specific attributes of the software. The grading scheme proposed by McCall et al. is a 0 (low) to 10 (high) scale. The following metrics are used in the grading scheme:</br><strong>Auditability</strong>. The ease with which conformance to standards can be checked.</br>
<strong>Accuracy</strong>. The precision of computations and control.</br><strong>Communication commonality</strong>. The degree to which standard interfaces, protocols, and bandwidth are used.</br><strong>Completeness</strong>. The degree to which full implementation of required function has been achieved.</br><strong>Conciseness</strong>. The compactness of the program in terms of lines of code.</br>
<strong>Consistency</strong>. The use of uniform design and documentation technique throughout the software development project.</br><strong>Data commonality</strong>. The use of standard data structures and types throughout the program.</br>
<strong>Error tolerance</strong>. The damage that occurs when the program encounters an error.</br><strong>Execution efficiency</strong>. The run-time performance of a program.</br><strong>Expandability</strong>. The degree to which architectural, data, or procedural design can be extended.</br><strong>Generality</strong>. The breadth of potential application of program components.</br>
<strong>Hardware independence</strong>. The degree to which the software is decoupled from the hardware on which it operates.</br><strong>Instrumentation</strong>. The degree to which the program monitors its own operation and identifies errors that do occur.</br><strong>Modularity</strong>. The functional independence of program components.</br><strong>Operability</strong>. The ease of operation of a program.</br><strong>Security</strong>. The availability of mechanisms that control or protect programs and data.</br><strong>Self-documentation</strong>. The degree to which the source code provides meaningful documentation.</br><strong>Simplicity</strong>. The degree to which a program can be understood without difficulty.</br><strong>Software system independence</strong>. The degree to which the program is independent of nonstandard programming language features, operating system characteristics, and other environmental constraints.</br><strong>Traceability</strong>. The ability to trace a design representation or actual program component back to requirements.</br><strong>Training</strong>. The degree to which the software assists in enabling new users to apply the system. (P509-511)</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平衡點問題和支配點問題之Python求解(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/18/ping-heng-dian-wen-ti-he-zhi-pei-dian-wen-ti-zhi-pythonqiu-jie-zhuan/"/>
    <updated>2014-02-18T21:46:13+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/18/ping-heng-dian-wen-ti-he-zhi-pei-dian-wen-ti-zhi-pythonqiu-jie-zhuan</id>
    <content type="html"><![CDATA[<ol>
<li>平衡點問題<br/>
平衡點：比如int[] numbers = {1,3,5,7,8,25,4,20}; 25前面的總和爲24，25後面的總和也是24，25這個點就是平衡點；假如一個數組中的元素，其前面的部分等於後面的部分，那麼這個點的位序就是平衡點。 <br/>
要求：返回任何一個平衡點<br/>
使用sum函数累加所有的数。
使用一个变量fore来累加序列的前部。直到满足条件fore&lt;(total-number)/2;</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span>
</span><span class='line'><span class="c">#find total  </span>
</span><span class='line'><span class="n">total</span><span class="o">=</span><span class="nb">sum</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="c">#find num  </span>
</span><span class='line'><span class="n">fore</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">fore</span><span class="o">&lt;</span><span class="p">(</span><span class="n">total</span><span class="o">-</span><span class="n">number</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="p">:</span>
</span><span class='line'>      <span class="n">fore</span><span class="o">+=</span><span class="n">number</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'><span class="c">#print answer  </span>
</span><span class='line'><span class="k">if</span> <span class="n">fore</span> <span class="o">==</span> <span class="p">(</span><span class="n">total</span><span class="o">-</span><span class="n">number</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="p">:</span>
</span><span class='line'>   <span class="k">print</span> <span class="n">number</span>
</span><span class='line'><span class="k">else</span> <span class="p">:</span>
</span><span class='line'>   <span class="k">print</span> <span class="s">r&#39;not found&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
算法簡單，而且是O(n)的。<br/>
<strong>PS</strong> 上述解題思路爲題目只考慮序列只包括正數的情況(有唯一平衡點)，當序列中有負數的時候，平衡點不一定唯一。<!--more--></p>

<ol>
<li>支配點問題<br/>
支配數：數組中某個元素出現的次數大於數組總數的一半時就成爲支配數，其所在位序成為支配點；比如int[] a = {3,3,1,2,3};3爲支配數，0，1，4分别爲支配點。<br/>
要求：返回任何一個支配點<br/>
《編程之美》中有答案，就是尋找水王那篇。<br/>
具體方法是：將序列排序，取中位數——注意，如果一個數出現次數大於整體的一半，那麼排序之後支配數一定在中間，然後驗證是否正確。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="c">#calculate  </span>
</span><span class='line'><span class="n">numbers</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span><span class='line'><span class="n">lens</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="n">candidate</span><span class="o">=</span><span class="n">numbers</span><span class="p">[</span><span class="n">lens</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="c">#validate  </span>
</span><span class='line'><span class="n">N</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number</span><span class="o">==</span><span class="n">candidate</span><span class="p">:</span>
</span><span class='line'>       <span class="n">N</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'><span class="c">#print answer  </span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">N</span><span class="o">&gt;=</span><span class="n">lens</span><span class="o">/</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>     <span class="k">print</span> <span class="n">numbers</span><span class="p">[</span><span class="n">lens</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="k">else</span> <span class="p">:</span>
</span><span class='line'>   <span class="k">print</span> <span class="s">&#39;not found&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://hi.baidu.com/ruclin/item/f2706f26b1d2db140975086b">Origin</a>
<a href="http://www.iteye.com/topic/600079">Reference</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes of Python]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/18/notes-of-python/"/>
    <updated>2014-02-18T14:09:05+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/18/notes-of-python</id>
    <content type="html"><![CDATA[<ol>
<li><p>Python 是怎樣進行類型轉換的？<br/>
1) Python是動態類型，是强類型的編程語言。<br/>
2) Python內建函數的實現類型轉換：<br/>
     <table>
<tbody>
<tr><td><em> 函數 </em></td><td><em> 描述 </em></td></tr><br/>
<tr><td>int(x [,base ]) </td><td>將x轉換為一個整數</td></tr>
<tr><td>long(x [,base ]) </td><td>將x轉換為一個長整數</td></tr>
<tr><td>float(x) </td><td>將x轉換為一個浮點數</td></tr>
<tr><td>complax(real [, img ]) </td><td>創建一個複數</td></tr>
<tr><td>str(x) </td><td>將對象x轉換為字符串</td></tr>
<tr><td>repr(x) </td><td>將對象x轉換為表達式字符串</td></tr>
<tr><td>eval(str) </td><td>計算在字符串中的有效python表達式，並返回一個對象</td></tr>
<tr><td>tuple(s) </td><td>將序列s轉換為一個元組</td></tr>
<tr><td>list(s) </td><td>將序列s轉換為一個列表</td></tr>
<tr><td>chr(x) </td><td>將一個整數轉換為一個字符</td></tr>
<tr><td>unichr(x) </td><td>將一個整數轉換為一個Unicode字符</td></tr>
<tr><td>ord(x) </td><td>將一個字符轉換為它的整數值</td></tr>
<tr><td>hex(x) </td><td>將一個整數轉換為一個十六進制字符串</td></tr>
<tr><td>oct(x) </td><td>將一個整數轉換為一個八進制字符串</td></tr>
<tbody>
</table> <!--more--></p></li>
<li><p>range()函數的用法<br/>
<strong>range(start, stop[, step])</strong><br/>
Example:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>生成隨機數<br/>
1) <strong>random.random</strong><br/>
用於生成一個0到1的隨機浮點數：0&lt;=n&lt;1.0。<br/>
2) <strong>random.uniform</strong><br/>
原型爲randon.uniform(a,b)，用於生成一個制定範圍內的隨機浮點數，兩個參數分別爲上下限：如果a>b，生成的浮點數：b&lt;=n&lt;a；如果a&lt;b，生成的浮點數：a&lt;=n&lt;b。<br/>
3) <strong>random.randint</strong><br/>
原型爲random.randint(a,b)，用於生成一個制定範圍內的整數。參數a爲下限，b爲上限，生成的隨機數：a&lt;=n&lt;=b。<br/>
4) <strong>random.randrange</strong><br/>
原型爲random.randrange([start], stop[, step])，從指定範圍內，按指定基數递增的集合中獲取一個隨機數。如：random.randrange(10, 100, 2)，结果相當於從[10, 12, 14, 16, &hellip; 96, 98]序列中獲取一個隨機數。random.randrange(10, 100, 2)在結果上於 random.choice(range(10, 100, 2)等效。<br/>
5) <strong>random.choice</strong><br/>
原型爲random.choice(sequence)。參數sequence表示一個有序類型，其不是一種特定的類型，而是泛指一系列的類型，如list，tuple，string等。<br/>
6) <strong>random.shuffle</strong><br/>
原型爲random.shufle(x[, random])，用於將一個列表中的元素打亂後輸出。<br/>
7) <strong>random.sample</strong><br/>
原型爲random.sample(sequence, k)，從指定序列中隨機獲取制定長度的片段，sample函數不會修改原有序列。</p></li>
<li><p>如何查詢和替換一個文本字符串。<br/>
1) sub()<br/>
格式為sub(replacement, string[,count=0])<br/>
replacement是被替換成的文本；<br/>
string是需要被替換的文本；<br/>
count是一個可選參數，指最大被替換的數量。<br/>
2) subn()
執行的效果跟sub()一样，不過它會返回一個二維數組，包括替換後的新的字符串和總共替換的數量。</p></li>
<li><p>兩個序列的和的差最小<br/>
有两個序列a,b，大小都爲n,序列元素的值任意整数，無序；<br/>
要求：通過交換a,b 中的元素，使[序列a 元素的和]与[序列b 元素的和]之間的差最小。<br/>
例如:<br/>
var a=[100,99,98,1,2,3];<br/>
var b=[1,2,3,4,5,40];<br/>
<strong>分析：</strong><br/>
當數組a和b的和之差爲A = sum(a) &ndash; sum(b)，a的第i個元素和b的第j個元素交換後，a和b的和之差爲：<br/>
A&#8217; = sum(a) &ndash; a[i] + b[j] &ndash; (sum(b) &ndash; b[j] + a[i])<br/>
= sum(a) &ndash; sum(b) &ndash; 2 (a[i] &ndash; b[j])<br/>
= A &ndash; 2 (a[i] &ndash; b[j])<br/>
設 x = a[i] &ndash; b[j]<br/>
|A| &ndash; |A&#8217;| = |A| &ndash; |A &ndash; 2x|<br/>
假設A > 0，<br/>
當x在(0, A)之間時，做這樣的交換才能使得交換後的a和b的和之差變小，x越接近A/2效果越好，如果找不到在(0, A)之间的x，則當前的a和b就是答案。<br/>
所以大概算法如下：在a和b中尋找使得x在(0, A)之間，並且最接近A/2的i和j，交換相應的i和j元素，重新計算A後，重複前面的步骤直到找不到(0, A)之間的x為止。</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">mean</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">sum</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>        <span class="n">array</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>    <span class="n">diff_sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">-</span> <span class="nb">sum</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="n">loop</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">loop</span><span class="p">:</span>
</span><span class='line'>        <span class="n">loop</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">md</span> <span class="o">=</span> <span class="n">diff_sum</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)):</span>
</span><span class='line'>                <span class="n">x</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">diff_sum</span> <span class="ow">and</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">loop</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>                    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">diff_sum</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">md</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">md</span> <span class="o">=</span> <span class="nb">abs</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">diff_sum</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">mi</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>                        <span class="n">mj</span> <span class="o">=</span> <span class="n">j</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">loop</span><span class="p">:</span>
</span><span class='line'>            <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span>
</span><span class='line'>            <span class="n">a</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">mj</span><span class="p">]</span>
</span><span class='line'>            <span class="n">b</span><span class="p">[</span><span class="n">mj</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class='line'>            <span class="n">diff_sum</span> <span class="o">=</span> <span class="n">diff_sum</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">mj</span><span class="p">]</span> <span class="o">-</span> <span class="n">a</span><span class="p">[</span><span class="n">mi</span><span class="p">])</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">diff_sum</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">array</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>                <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>                <span class="n">b</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>                <span class="n">diff_sum</span> <span class="o">=</span> <span class="o">-</span> <span class="n">diff_sum</span>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'>    <span class="n">mean</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.smallqiao.com/31.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Destiny]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/17/destiny/"/>
    <updated>2014-02-17T22:21:48+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/17/destiny</id>
    <content type="html"><![CDATA[<p><img src="http://c.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=4a265a35f9f2b211e02e854bfabb1405/5243fbf2b2119313ea60c3f667380cd791238d50.jpg?referer=bd0f999974c6a7efe0319d16eb4e&amp;x=.jpg" alt="Plum Blossom" /></p>

<p>If it&rsquo;s meant to be, it will be.</p>

<p>Most things in the life seem to be predestined. Emotion, fortunes, jobs&hellip; No idea when it would burst into your life rather than when it would be going to vanish.<!--more--></p>

<p>You are always desperate and hopeless when you are insulated from love or career you urgently desired days and nights.</p>

<p>Hallucination comes then, talks to yourself you are abandoned. Your doubt the Lord leaves you uncared even omitted.</p>

<p>Some grieving emotions aroused as patients are told to face with impending death &mdash; denial, anger, bargaining, depression and acceptance. Maybe the stages evolves faster than the instance, however, someone are so easy to fall into the abyss of self-denial (rather than condition-denial) and
 accept you yourself are indeed a loser afterwards giving up even not trying once again.</p>

<p>Actually, the period is for you to rest, retrospect, think, and be improved. The best strategy is getting armed, with everything you could access to, to enrich yourself.</p>

<p>Just like the saying &ldquo;Opportunity favors only the prepared mind&rdquo;. Not to emphasize you would surely get the chance when prepared. Instead, a prepared one is easier to grasp the fortune.</p>

<p>Watching the videos <em>Paul Potts</em> and <em>Susan Boyle</em> of <em>Britain&rsquo;s Talent Show</em> again, undoubtedly bursting into tears another time. No one is easy to impress others.</p>

<p>Getting prepared and showing, the whole world would make way for you. Besides, don&rsquo;t let the passing time agitated you referring to the conception of “sunk cost”.</p>

<p>Well, be a man, and you will enjoy it! So, if it&rsquo;s meant to be, it will be, only when you are prepared.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python列表刪除重複元素的三種方法及效率分析(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/15/pythonlie-biao-shan-chu-zhong-fu-yuan-su-de-san-zhong-fang-fa-ji-xiao-lu-fen-xi-zhuan/"/>
    <updated>2014-02-15T17:53:01+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/15/pythonlie-biao-shan-chu-zhong-fu-yuan-su-de-san-zhong-fang-fa-ji-xiao-lu-fen-xi-zhuan</id>
    <content type="html"><![CDATA[<h4>方法一：</h4>

<p>使用列表對象的sort()方法對列表進行排序，從最後一個元素開始循環迭代列表，判斷相鄰的兩個元素是否相同。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">methodONE</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">list</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span><span class='line'>    <span class="n">lenList</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lastItem</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">lenList</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lenList</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>     <span class="k">if</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">lastItem</span><span class="p">:</span>
</span><span class='line'>      <span class="nb">list</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>     <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">lastItem</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">list</span>
</span></code></pre></td></tr></table></div></figure>


<p>    <!--more--></p>

<h4>方法二：</h4>

<p>定義一個臨時列表，循環迭代出的元素如果不在循環列表中，則加入，最後返回列表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">methodTWO</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class='line'>    <span class="n">templist</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
</span><span class='line'>     <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">temp</span> <span class="nb">list</span><span class="p">:</span>
</span><span class='line'>      <span class="n">templist</span><span class="o">.</span><span class="n">addend</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">templist</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>方法三：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">27</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">lists</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>分析：</h4>

<ol>
<li>方法一相對方法二來說，有更多的額外操作如：排序、賦值。因爲在Python中，變量是不可變的，每迭代出一个元素比較不相等後的操作都是新建立一个局部變量、賦值並丟棄原變量，這需要消耗更多的内存!同時因爲排序操作，破壞了相對位置。</li>
<li>方法二建立一个臨時列表進行操作，而列表是可變的，每次追加元素都只是在原列表上增加一个索引及值,因而相對方法一來說效率會更高!</li>
<li>方法三无疑是效率最好的(無論是代碼的簡潔還是運行效率)。set()是內置的數據類型“集合類型”，它是無序的且值是唯一的！所以set()執行的结果就是轉為集合且直接去除了重複的元素，list()則將集合轉回列表類型。<br/>
但是，set()會破壞排列順序，如果要保留排序，list(set(lists))可改為sorted(set(lists), key=lists.index)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blabla]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/14/blabla/"/>
    <updated>2014-02-14T12:37:02+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/14/blabla</id>
    <content type="html"><![CDATA[<p><img src="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=58f8ae73a38b87d65442ab1a37335905/8601a18b87d6277f75cb2e7a2a381f30e824fc93.jpg?referer=cb406f510bf79052b608730e3c71&amp;x=.jpg" alt="Time" /></p>

<p><strong>It becomes a torture which the state between-jobs&#8217; lasting more than four months.</strong></p>

<p>Retrospecting my travel itinerary last year from Thai to South Korea, nearly 50 days across eight countries and districts, I know, traveling is indispensable in my life notwithstanding being not the life itself.<!--more--></p>

<p>Actually, I love challenges no matter in travel or in daily life, especially from emotions and work. The point is that future is worth expecting and exploring.</p>

<p>Watching kinds of TV series, reading books, reviewing English vocabularies, learning Python, celebrating Chinese Spring Festival&hellip; I might feel a hallucination of time&rsquo;s fleeing.</p>

<p>So a new spring has come already.</p>

<p>I believe I am lost, in a deserted corner of the world.</p>

<p>Though it feels no worse, please cheer up! I urgently need a fresh air and a breakthrough.</p>

<p><strong>PS</strong><br/>
Happy Lantern Festival and single&rsquo;s Valentine&rsquo;s Day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging with Octopress]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/13/blogging-with-octopress/"/>
    <updated>2014-02-13T21:32:44+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/13/blogging-with-octopress</id>
    <content type="html"><![CDATA[<h3>1. 安裝Ruby</h3>

<h3>2. 安裝Octopress</h3>

<p>確保安裝了git，在終端輸入git &mdash;version可以看到計算機中的git版本。<br/>
利用命令將octopress從github上clone到本機：<br/>
<code>$ git clone git://github.com/imathis/octopress.git octopress</code><br/>
<code>$ cd octopress</code><br/>
<code>$ ruby --version</code><br/>
安裝相關依賴項：<br/>
<code>$ sudo gem install bundler #需要輸入root密碼</code><br/>
<code>$ bundle install</code><br/>
安裝默認的Octopress主題：<br/>
<code>$ rake install</code>   <!--more--></p>

<h3>3. 配置Octopress</h3>

<p><code>$ vim ./_config.yml</code></p>

<h3>4. 在本機創建ssh</h3>

<p><code>$ cd ~/.ssh</code><br/>
<code>$ ssh-keygen -t rsa -C 你註冊github時的email</code><br/>
彈出Enter file in which to save the key (/Users/twer/.ssh/id_rsa): 直接按空格<br/>
彈出Enter passphrase(empty for no passphrase):輸入你GitHub帳號的密碼。Enter same passphrase again: 再次輸入你的密碼。<br/>
打開~/.ssh下的id_rsa.pub文件複製裡面的所有內容。<br/>
登錄GitHub，選擇Account Settings&mdash;>SSH Public Keys添加ssh，把剪貼板的內容複製到key輸入框內直接保存。<br/>
測試ssh：<br/>
<code>$ ssh git@github.com</code><br/>
輸出：<br/>
PTY allocation request failed on channel 0<br/>
Hi username! You&rsquo;ve successfully authenticated, but GitHub does not provide shell access.<br/>
Connection to github.com closed.<br/>
代表成功。</p>

<h3>5. 在本機創建ssh</h3>

<p><code>$ cd ~/.ssh</code><br/>
<code>$ ssh-keygen -t rsa -C 你註冊github時的email</code><br/>
彈出Enter file in which to save the key (/Users/twer/.ssh/id_rsa): 直接按空格<br/>
彈出Enter passphrase(empty for no passphrase):輸入你GitHub帳號的密碼。Enter same passphrase again: 再次輸入你的密碼。<br/>
打開~/.ssh下的id_rsa.pub文件複製裡面的所有內容。<br/>
登錄GitHub，選擇Account Settings—>SSH Public Keys添加ssh，把剪貼板的內容複製到key輸入框內直接保存。<br/>
測試ssh：<br/>
<code>$ ssh git@github.com</code><br/>
輸出：<br/>
PTY allocation request failed on channel 0<br/>
Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.<br/>
Connection to github.com closed.<br/>
代表成功。</p>

<h3>6. 將Blog部署到GitHub上</h3>

<p>在GitHub上創建一個倉庫，命名為username.github.com。等全部配置完後，可以通過在瀏覽器中輸入<a href="http://username.github.com">http://username.github.com</a>來訪問。一般來說，將Blog的源碼放在source分支，把生成的內容提交到master分支。<br/>
創建好倉庫之後，需要利用octopress的一個配置rake任務來自動配置上面創建的倉庫：<br/>
<code>$ rake setup_github_pages</code><br/>
上面的命令最主要的是創建一個_deploy目錄，用來存放部署到master分支的內容。期間會要求你輸入倉庫的url，根據提示，去GitHub.com上複製粘貼即可。<br/>
完成上面的命令之後，我們就可以生成Blog並真正部署到倉庫中了。執行如下命令：<br/>
<code>$ rake generate</code><br/>
<code>$ rake deploy</code><br/>
上面的命令首先生成Blog文件，並將生成的Blog文件拷貝到_deploy 目錄下，然後將這些內容添加到git中，並commit和push到倉庫的master分支。<br/>
現在可以訪問<a href="http://username.github.com">http://username.github.com</a>了。注意，由於會發生延時，要等大約10分鐘才能打開。至此，我們已經基本完成對Blog的部署，不過Blog的source要單獨提交。</p>

<h3>7. 開始寫Blog</h3>

<p>Octopress為我們提供了一些task來創建Blog和頁面。博文必須存儲在source/_posts 目錄下，並且需要按照Jekyll的命名規範對文章進行命名：YYYY-MM-DD-post-title.markdown。文章的名字會被當作url的一部分，而其中的日期用於對博文的區分和排序。創建博文命令爲：<br/>
<code>$ rake new_post["title"]</code><br/>
然後在source/_posts/YY-MM-DD-post-title.markdown中寫博文。<br/>
如果想讓文章在首頁只顯示一部分，只需要在文章中相應的位置添加<code>&lt;!--more--&gt;</code>即可。<br/>
之後，按照如下命令部署：<br/>
<code>$ rake generate</code><br/>
<code>$ git add .</code><br/>
<code>$ git commit -am "Some comments here."</code><br/>
<code>$ git push origin source</code><br/>
<code>$ rake deploy</code></p>

<h3>8. 添加頁面(pages)</h3>

<p>在Octopress中，有兩個默認的頁面，即blog/archives，可以參考它來完成自己的頁面。首先在source中創建一個目錄，例如author，然後在這個目錄中新建一個名為index.html的文件，根據需要進行編輯這個文件。<br/>
重要的是，我們需要在首頁將這個頁面的鏈接顯示出來，此時需要編輯source/_includes/custom/navigation.html，仿照已有的內容添加一個新行，指向新創建的目錄即可。<br/>
當rake generate正常之後，就可以rake deploy到GitHub上了。</p>

<h3>9. 獨立域名</h3>

<p>在域名管理中，建立一個CNAME指向，將你的域名指向username.github.com<br/>
建一個名為CNAME的文件在source目錄下，然後將自己的域名輸入進去。<br/>
將內容push到GitHub後，第一次生效大概需要一個小時，之後就可以用自己的域名進行訪問了。</p>

<h3>10. 安裝模板</h3>

<p>常用第三方模板有：<br/>
<a href="http://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes</a><br/>
進入選擇好的模板鏈接，根據說明進行安裝。(本Blog使用的模板爲：<a href="https://github.com/macjasp/cleanpress">CleanPress</a>)<br/>
首先在source/_includes/post目錄下添加license.html文件，內容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Copyright Info BEGIN --&gt;</span>
</span><span class='line'>{ % if site.post_license % }
</span><span class='line'><span class="nt">&lt;b&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;entry-content&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;a</span> <span class="na">rel=</span><span class="s">&quot;license&quot;</span>   <span class="na">href=</span><span class="s">&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh&quot;</span> <span class="nt">&gt;&lt;/a&gt;</span>版權聲明：非商用-非衍生-保持署名
</span><span class='line'><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">rel=</span><span class="s">&quot;license&quot;</span> <span class="na">href=</span><span class="s">&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh&quot;</span><span class="nt">&gt;</span>Creative Commons BY-NC-ND 3.0
</span><span class='line'><span class="nt">&lt;/a&gt;&lt;/div&gt;&lt;/b&gt;</span>
</span><span class='line'>{ % endif % }
</span><span class='line'><span class="c">&lt;!-- Copyright Info END --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>11. Octopress添加Google Analytics統計與SEO</h3>

<h4>1) 在各搜索引擎中提交本博客的地址：</h4>

<p><a href="http://urlc.cn/tool/addurl.html">免费收录网站搜索引擎登录口大全</a><br/>
爲網站、文章添加描述信息(description)、關鍵字(keywords)、標簽(tags)，以此幫助用戶準確的搜索到本博客。描述信息和關鍵字是指網頁head部分的元標簽(meta)，是給搜索引擎看的。<br/>
爲每一篇文章都添加描述，可以在Octopress模板中修改source/_includes/head.html中的代碼</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{ % capture description % }{ % if page.description % }{\{ page.description }\}{ % else % }{\{ content | raw_content }\}{ % endif % }{ % endcapture % }
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;{\{ description | strip_html | condense_spaces | truncate:150 }\}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{ % if page.keywords % }<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span>
</span><span class='line'><span class="na">content=</span><span class="s">&quot;{\{ page.keywords }\}&quot;</span><span class="nt">&gt;</span>{ % endif % }
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>2) 添加Google Analytics</h4>

<p>註冊<a href="http://www.google.com/analytics/">Google Analytics</a>獲得一個google_analytics_tracking_id，添加到_config.yml中對應位置，並對網站進行驗證即可。然後通過Google Analytics分析網站流量。而且可以通過<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN">Google站長工具</a>，對網站進行更全面的分析和SEO。<br/>
對自己的網站進行驗證，只需將Google Analytics提供的用於驗證的代碼添加到source/_includes/head.html的<head>標簽之間，網站部署到網上之後，過幾分鐘即可驗證通過，其他需要驗證的也同樣操作。</p>

<h3>12. 參考</h3>

<p><a href="http://octopress.org/help/">Octopress Help</a><br/>
<a href="http://justcoding.iteye.com/blog/1954645">利用Octopress搭建一個GitHub博客</a><br/>
<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客</a><br/>
<a href="http://blog.segmentfault.com/yaashion_xiang/1190000000364677">在Mac上从零开始搭建基于Github的Octopress博客</a><br/>
<a href="http://icodeit.org/2013/01/add-new-page-to-octopress/">为octopress添加新的页面(page)</a><br/>
<a href="http://www.yanjiuyanjiu.com/blog/20130402/">我的Octopress配置</a><br/>
<a href="http://blog.csdn.net/lcliliil/article/details/13725895">Octopress侧边栏及评论系统定制</a><br/>
<a href="https://github.com/nswbmw/N-blog/wiki/_pages">N-blog</a><br/>
<a href="http://blog.csdn.net/lcliliil/article/details/13727927">Octopress添加统计与SEO</a></p>

<h3>PS:</h3>

<p>受限於格式要求，本文代碼中<strong>{</strong>或<strong>}</strong>與旁邊<strong>%</strong>之間的空格請刪去；兩個<strong>{</strong>或者兩個<strong>}</strong>之間的<strong>\</strong>請刪去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commencement]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/13/commencement/"/>
    <updated>2014-02-13T20:23:32+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/13/commencement</id>
    <content type="html"><![CDATA[<p>This is my first blog here.</p>

<p>Octopress and Github, I&rsquo;m coming!</p>
]]></content>
  </entry>
  
</feed>
