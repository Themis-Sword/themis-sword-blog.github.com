<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Themis_Sword's Blog]]></title>
  <link href="http://www.aprilzephyr.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.aprilzephyr.com/"/>
  <updated>2014-03-26T17:39:32+08:00</updated>
  <id>http://www.aprilzephyr.com/</id>
  <author>
    <name><![CDATA[Themis_Sword]]></name>
    <email><![CDATA[licong0419@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 時間&amp;日期模塊]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/03/26/python-shi-jian-and-ri-qi-mo-kuai/"/>
    <updated>2014-03-26T16:53:19+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/03/26/python-shi-jian-and-ri-qi-mo-kuai</id>
    <content type="html"><![CDATA[<p>Python提供了time/datetime/calendar等模塊來處理日期和時間。<br/>
<strong>1.time模塊常用的函數</strong><br/>
<em>A. time.time()</em><br/>
1970年1月1日以來的秒數，是一個浮點數。<br/>
<em>B. time.sleep()</em><br/>
可以通過调用time.sleep來挂起當前的進程。time.sleep接收一个浮點型參數，表示進程挂起的時間。<br/>
<em>C. time.clock()</em><br/>
time.clock()返回第一次调用该方法到现在的秒數，其精確度高於1微秒。可以使用该函數來記錄程序執行的時間。 <!--more-->
<em>D. time.gmtime()</em><br/>
該函數原型為time.gmtime([sec])，可選參數sec表示從1970-01-01以來的秒數，默認值為time.time()，函數返回time.struct_time類型的對象。(struct_time是在time模塊中定義的表示時間的對象)，下面是一個簡單的例子：<br/>
``` python</p>

<blockquote><blockquote><blockquote><p>print time.gmtime()                        #獲取當前時間的struct_time對象 <br/>
(2013, 4, 8, 4, 28, 30, 0, 98, 0)
print time.gmtime(time.time())
(2013, 4, 8, 4, 28, 50, 0, 98, 0)
print time.gmtime(time.time()-24<em>60</em>60)    #獲取昨天這個時間的struct_time對象
(2013, 4, 7, 4, 29, 10, 6, 97, 0)
<code>  
*E. time.localtime()*  
與time.gmtime()非常類似，也返回一個struct_time對象，可以看作是gmtime()的本地化版本。  
*F. time.mktime()*  
time.mktime執行與gmtime(), localtime()相反的操作，它接收struct_time對象作為參數，返回用秒數來表示時間的浮點數。  
*G. time.strftime()*  
time.strftime將日期轉換為字符串表示，它的函數原型為：time.strftime(format[, t])。參數format是格式字符串（格式字符串的知識可以參考：[time.strftime](http://docs.python.org/2/library/time.html) ），可選的參數t是一个struct_time對象。  
</code> python
time.strftime參數:
strftime(format[, tuple]) &ndash;> string
將指定的struct_time(默認為當前時間)，根據指定的格式化字符串輸出
python中時間日期格式化符號：
%y 两位數的年份表示（00-99）
%Y 四位數的年份表示（000-9999）
%m 月份（01-12）
%d 月内中的一天（0-31）
%H 24小時製小時數（0-23）
%I 12小時製小時數（01-12）
%M 分鐘數（00=59）
%S 秒（00-59）
%a 本地簡化星期名稱
%A 本地完整星期名稱
%b 本地簡化的月份名稱
%B 本地完整的月份名稱
%c 本地相應的日期表示和時間表示
%j 年内的一天（001-366）
%p 本地A.M.或P.M.的等價符
%U 一年中的星期數（00-53），星期天為星期的開始
%w 星期（0-6），星期天為星期的開始
%W 一年中的星期數（00-53）星期一為星期的開始
%x 本地相應的日期表示
%X 本地相應的時間表示
%Z 當前時區的名稱
%% %號本身
<code>  
*H. time.strptime()*
按指定格式解析一個表示时间的字符串，返回struct_time對象。該函數原型為：time.strptime(string, format)，两個參數都是字符串。  
</code> python
print time.strptime(&lsquo;2013-04-09 12:30:25&rsquo;,&lsquo;%Y-%m-%d %H:%M:%S&rsquo;)
(2013, 4, 9, 12, 30, 25, 1, 99, -1)
```</p></blockquote></blockquote></blockquote>

<p><strong>2. datetime模塊</strong><br/>
A. 兩個常量<br/>
datetime.MINYEAR和datetime.MAXYEAR，分別表示datetime所能表示的最小、最大年份。其中，MINYEAR=1,MAXYEAR=0000。</p>

<ol type="a">
<li>幾個重要的類<br/>
1) datetime.date:表示日期的類，常用的屬性有tear, month, day:<br/>
year的返回在兩個常量之間；<br/>
month的範圍是[1,12]，月份是從1開始；<br/>
day依據month來決定。</li>
</ol>


<p>2) date類提供了常用的類方法和類屬性：<br/>
date.max, date.min：date對象所能表示的最大、最小日期；
date.today()：返回一個表示當前本地日期的date對象。<br/>
``` python</p>

<blockquote><blockquote><blockquote><p>from datetime import *
import time
print date.today()
2014-03-26
print date.max
9999-12-31
print date.min
0001-01-01
```</p></blockquote></blockquote></blockquote>

<p>3) date提供的實例方法和屬性<br/>
date.year、date.month、date.day：年、月、日；<br/>
date.replace(year, month, day)：生成一个新的日期對象，用參數指定的年，月，日代替原有對象中的屬性。（原有對象仍保持不變）；<br/>
date.timetuple()：返回日期對應的time.struct_time對象；<br/>
date.weekday()：返回weekday，如果是星期一，返回0；如果是星期2，返回1，以此類推；<br/>
data.isoweekday()：返回weekday，如果是星期一，返回1；如果是星期2，返回2，以此類推；<br/>
date.isocalendar()：返回格式如(year，month，day)的元組；<br/>
date.isoformat()：返回格式如'YYYY-MM-DD’的字符串；<br/>
date.strftime(fmt)：自定義格式化字符串。<br/>
``` python</p>

<blockquote><blockquote><blockquote><p>now=date(2014,03,26)
tomorrow=now.replace(day=27)
print &lsquo;now:&rsquo;,now
now: 2014-03-26
print &lsquo;tomorrow:&rsquo;,tomorrow
tomorrow: 2014-03-27
print &lsquo;timetuple():&rsquo;,now.timetuple()
timetuple(): (2013, 4, 8, 0, 0, 0, 2, 85, -1)
print &lsquo;weekday():&rsquo;,now.weekday()
weekday(): 2
print &lsquo;isoweekday():&rsquo;,now.isoweekday()
isoweekday(): 3
print &lsquo;isocalendar():&rsquo;,now.isocalendar()
isocalendar(): (2014, 13, 3)
print &lsquo;isoformat():&rsquo;,now.isoformat()
isoformat(): 2014-03-26
```</p></blockquote></blockquote></blockquote>

<p>4) date還對某些操作進行了重載，它允許我們對日期進行如下一些操作：<br/>
date2 = date1 + timedelta  # 日期加上一個間隔，返回一個新的日期對象（timedelta將在下面介紹，表示時間間隔）
date2 = date1 &ndash; timedelta   # 日期隔去間隔，返回一個新的日期對象
timedelta = date1 &ndash; date2   # 两個日期相減，返回一個時間間隔對象
date1 &lt; date2  # 两個日期進行比較<br/>
``` python
now = date.today()<br/>
tomorrow = now.replace(day = 7 )<br/>
delta = tomorrow &ndash; now<br/>
print   &lsquo;now:&rsquo; , now,  &lsquo; tomorrow:&rsquo; , tomorrow<br/>
print   &lsquo;timedelta:&rsquo; , delta<br/>
print  now + delta<br/>
print  tomorrow > now</p>

<h1># &mdash;&mdash; output &mdash;&mdash;</h1>

<h1>now: 2010-04-06  tomorrow: 2010-04-07</h1>

<h1>timedelta: 1 day, 0:00:00</h1>

<h1>2010-04-07</h1>

<h1>True</h1>

<p>```<br/>
<a href="http://www.cnblogs.com/BeginMan/archive/2013/04/08/3007403.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 常用函數之Join, Split, Zip, Map, Reduce, Filter]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/03/26/python-chang-yong-han-shu-zhi-join/"/>
    <updated>2014-03-26T15:34:48+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/03/26/python-chang-yong-han-shu-zhi-join</id>
    <content type="html"><![CDATA[<p><strong><em>1. Join, Split</em></strong><br/>
<em>A 關於Join和Split方法</em><br/>
1) 只針對字符串進行處理。split:拆分字符串、join連接字符串<br/>
2) string.join(sep): 以string作為分割符，将sep中所有的元素(字符串表示)合併成一個新的字符串<br/>
3) string.split(str=&lsquo; &rsquo;,num=string.count(str)): 以str為分隔符，切片string，如果num有指定值，則僅分隔num個子字符串<br/>
4) 對導入os模塊進行os.path.splie()/os.path.join() 貌似是處理機制不一樣，但是功能上一樣<!--more--></p>

<p><em>B Join</em><br/>
<code>python
a='abcd'
print '.'.join(a)   
print '|'.join(['a','b','c'])　　#可以把['a','b','c']看做是 a='abcd';下面同理
print '.'.join({'a':1,'b':2,'c':3,'d':4})
</code><br/>
注意：'.&lsquo;等做分隔符，將join裏的所有元素(字符串)通過分隔符連接成一個新的字符串。</p>

<p><strong>os.path.join(path1[,path2[,&hellip;&hellip;]])</strong><br/>
``` python
\将多个路径组合后返回，第一个绝对路径之前的参数将被忽略。</p>

<blockquote><blockquote><blockquote><p>os.path.join(&lsquo;c:\&rsquo;, &lsquo;csv&rsquo;, &lsquo;test.csv&rsquo;)
&lsquo;c:\csv\test.csv&rsquo;
os.path.join(&lsquo;windows\temp&rsquo;, &lsquo;c:\&rsquo;, &lsquo;csv&rsquo;, &lsquo;test.csv&rsquo;)
&lsquo;c:\csv\test.csv&rsquo;
os.path.join(&lsquo;/home/aa&rsquo;,&lsquo;/home/aa/bb&rsquo;,&lsquo;/home/aa/bb/c&rsquo;)
&lsquo;/home/aa/bb/c&rsquo;
```</p></blockquote></blockquote></blockquote>

<p><em>C Split</em><br/>
<code>python
s='a b c'
print s.split(' ')
st='hello world'
print st.split('o')
print st.split('o',1)
--------output---------
['a', 'b', 'c']
['hell', ' w', 'rld']
['hell', ' world']
</code><br/>
注意：分隔符不能為空，否則會報錯，但是可以有不含其中的分隔符：<br/>
``` python</p>

<blockquote><blockquote><blockquote><p>s.split(&lsquo;x&rsquo;)
[&lsquo;a b c&rsquo;]
s.split(&lsquo;xsdfadsf&rsquo;)
[&lsquo;a b c&rsquo;]
```</p></blockquote></blockquote></blockquote>

<p><strong>os.path.split()</strong><br/>
os.path.split()是按照路徑將文件名和路徑分隔開，比如d:\python\python.ext，可分割為[&rsquo;d:\python', &lsquo;python.exe&rsquo;]<br/>
<code>python
import os
print os.path.split('c:\\Program File\\123.doc')
print os.path.split('c:\\Program File\\')
-----------------output---------------------
('c:\\Program File', '123.doc')
('c:\\Program File', '')
</code><br/>
<a href="http://www.cnblogs.com/BeginMan/archive/2013/03/21/2972857.html">Origin</a></p>

<p><strong><em>2. Zip</em></strong><br/>
zip()是Python的内建函數，(與序列有關的内建函數有：sorted()、reversed()、enumerate()、zip()),其中sorted()和zip()返回一個序列(列表)對象，reversed()、enumerate()返回一個迭代器(類似序列)。<br/>
定義：zip([seql, &hellip;])接受一系列可迭代對象作為參數，將對象中對應的元素打包成一個個tuple（元组），然後返回由這些tuples組成的list（列表）。若傳入參數的長度不等，则返回list的長度和參數中長度最短的對象相同。<br/>
``` python</p>

<blockquote><blockquote><blockquote><p>z1=[1,2,3]
z2=[4,5,6]
result=zip(z1,z2)
result
[(1, 4), (2, 5), (3, 6)]
z3=[4,5,6,7]
result=zip(z1,z3)
result
[(1, 4), (2, 5), (3, 6)]
<code>  
zip()配合*號操作符，可以將已經zip過的列表對象解壓  
</code> python
zip(<em>result)
[(1, 2, 3), (4, 5, 6)]
<code>  
更近一層了解  
</code> python
* 二維矩陣變換（矩陣的行列互換）
比如我们有一個由列表描述的二維矩陣
a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
通过python列表推导的方法，我们也能轻易完成这个任务
print [ [row[col] for row in a] for col in range(len(a[0]))]
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
另外一種讓人困惑的方法就是利用zip函數：
a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
zip(</em>a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
map(list,zip(<em>a))
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
zip函數接受任意多個序列作為參數，將所有序列按相同的索引組合成一個元素是各個序列合併成的tuple的新序列，新的序列的長度以參數中最短的序列為準。另外(</em>)操作符与zip函數配合可以實現與zip相反的功能，即將合併的序列拆成多個tuple。
①tuple的新序列</p>

<blockquote><p>x=[1,2,3],y=[&lsquo;a&rsquo;,&lsquo;b&rsquo;,&lsquo;c&rsquo;]
zip(x,y)
[(1,&lsquo;a&rsquo;),(2,&lsquo;b&rsquo;),(3,&lsquo;c&rsquo;)]
②新的序列的長度以參數中最短的序列為準.
x=[1,2],y=[&lsquo;a&rsquo;,&lsquo;b&rsquo;,&lsquo;c&rsquo;]
zip(x,y)
[(1,&lsquo;a&rsquo;),(2,&lsquo;b&rsquo;)]
③(<em>)操作符与zip函數配合可以實現與zip相反的功能,即將合併的序列拆成多個tuple。
x=[1,2,3],y=[&lsquo;a&rsquo;,&lsquo;b&rsquo;,&lsquo;c&rsquo;]
zip(</em>zip(x,y))
[(1,2,3),(&lsquo;a&rsquo;,&lsquo;b&rsquo;,&lsquo;c&rsquo;)]
```<br/>
<a href="http://www.cnblogs.com/BeginMan/archive/2013/03/14/2959447.html">Origin</a></p></blockquote></blockquote></blockquote></blockquote>

<p><strong><em>3. Map</em></strong><br/>
對sequence中的item依次執行function(item)，執行結果輸出為list。<br/>
``` python</p>

<blockquote><blockquote><blockquote><p>map(str, range(5))           #對range(5)各項進行str操作
[&lsquo;0&rsquo;, &lsquo;1&rsquo;, &lsquo;2&rsquo;, &lsquo;3&rsquo;, &lsquo;4&rsquo;]        #返回列表
def add(n):return n+n
&hellip;
map(add, range(5))           #對range(5)各項進行add操作
[0, 2, 4, 6, 8]
map(lambda x:x+x,range(5))   #lambda 函數，各項+本身
[0, 2, 4, 6, 8]
map(lambda x:x+1,range(10))  #lambda 函數，各項+1
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
map(add,&lsquo;zhoujy&rsquo;)          <br/>
[&lsquo;zz&rsquo;, &lsquo;hh&rsquo;, &lsquo;oo&rsquo;, &lsquo;uu&rsquo;, &lsquo;jj&rsquo;, &lsquo;yy&rsquo;]
<code>  
想要輸入多個序列，需要支持多個參數的函數，注意的是各序列的長度必須一樣，否則報錯：  
</code> python
def add(x,y):return x+y
&hellip;
map(add,&lsquo;zhoujy&rsquo;,&lsquo;Python&rsquo;)
[&lsquo;zP&rsquo;, &lsquo;hy&rsquo;, &lsquo;ot&rsquo;, &lsquo;uh&rsquo;, &lsquo;jo&rsquo;, &lsquo;yn&rsquo;]
def add(x,y,z):return x+y+z
&hellip;
map(add,&lsquo;zhoujy&rsquo;,&lsquo;Python&rsquo;,&lsquo;test&rsquo;)     #&lsquo;test'的長度比其他2個小
Traceback (most recent call last):
  File &ldquo;<stdin>&rdquo;, line 1, in <module>
TypeError: add() takes exactly 2 arguments (3 given)
map(add,'zhoujy&rsquo;,&lsquo;Python&rsquo;,&lsquo;testop&rsquo;)
[&lsquo;zPt&rsquo;, &lsquo;hye&rsquo;, &lsquo;ots&rsquo;, &lsquo;uht&rsquo;, &lsquo;joo&rsquo;, &lsquo;ynp&rsquo;]
```</p></blockquote></blockquote></blockquote>

<p><strong><em>4. Reduce</em></strong><br/>
對sequence中的item顺序迭代調用function，函數必須要有2個參數。要是有第3個參數，則表示初始值，可以繼續调用初始值，返回一個值。<br/>
``` python</p>

<blockquote><blockquote><blockquote><p>def add(x,y):return x+y
&hellip;
reduce(add,range(10))        #1+2+3+&hellip;+9
45
reduce(add,range(11))        #1+2+3+&hellip;+10
55
reduce(lambda x,y:x<em>y,range(1,3),5)           #lambda 函數，5是初始值， 1</em>2<em>5
10
reduce(lambda x,y:x</em>y,range(1,6))             #阶乘，1<em>2</em>3<em>4</em>5
120
reduce(lambda x,y:x<em>y,range(1,6),3)           #初始值3，结果再</em>3
360
reduce(lambda x,y:x+y,[1,2,3,4,5,6])          #1+2+3+4+5+6
21
```</p></blockquote></blockquote></blockquote>

<p><strong><em>5. Filter</em></strong><br/>
對sequence中的item依次執行function(item)，將執行結果為True（！=0）的item組成一個List/String/Tuple（取決于sequence的類型）返回，False則退出（0），進行過濾。<br/>
``` python</p>

<blockquote><blockquote><blockquote><p>def div(n):return n%2
&hellip;
filter(div,range(5))                    #返回div輸出的不等於0的真值
[1, 3]
filter(div,range(10))
[1, 3, 5, 7, 9]
filter(lambda x : x%2,range(10))        #lambda 函數返回奇數，返回列表
[1, 3, 5, 7, 9]
filter(lambda x : not x%2,range(10))
[0, 2, 4, 6, 8]
def fin(n):return n!=&lsquo;z&rsquo;                #過濾'z' 函數，出现z则返回False
&hellip;
filter(fin,&lsquo;zhoujy&rsquo;)                    #&lsquo;z'被過濾
'houjy&rsquo;
filter(lambda x : x !=&lsquo;z&rsquo;,&lsquo;zhoujy&rsquo;)     #labmda返回True值
&lsquo;houjy&rsquo;
filter(lambda x : not x==&lsquo;z&rsquo;,&lsquo;zhoujy&rsquo;)  #返回：字符串
&lsquo;houjy&rsquo;
```</p></blockquote></blockquote></blockquote>

<p><strong><em>6. Map, Reduce, Filter應用</em></strong><br/>
<em>A 實現5!+4!+3!+2!+1</em>
``` python</p>

<h1>!/usr/bin/env python</h1>

<h1>&ndash;<em>&ndash; coding:utf-8 &ndash;</em>&ndash;</h1>

<p>def add_factorial(n):</p>

<pre><code>empty_list=[]           #聲明一個空列表，存各個階乘的結果，方便這些結果相加
for i in map(lambda x:x+1,range(n)):    #用傳進來的變量(n)來生成一个列表，用map讓列表都+1，eg：range(5) =&gt; [1,2,3,4,5]
    a=reduce(lambda x,y:x*y,map(lambda x:x+1,range(i)))   #生成階乘，用map去掉列表中的0
    empty_list.append(a)            #把階乘結果append到空的列表中
return empty_list
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>import sys
</code></pre>

<h1>2選1</h1>

<h1>(一)</h1>

<pre><code>try:
    n = input("Enter a Number(int) : ")
    result=add_factorial(n)   #傳入變量
    print reduce(lambda x,y:x+y,result)      #階乘結果相加
except (NameError,TypeError):
    print "That's not a Number!"
</code></pre>

<h1>(二)</h1>

<h1>result = add_factorial(int(sys.argv[1]))   #傳入變量</h1>

<h1>print reduce(lambda x,y:x+y,result)      #階乘結果相加</h1>

<p>```</p>

<p><em>B 將100-200以內的質數挑選出來</em><br/>
``` python</p>

<h1>!/usr/bin/env python</h1>

<h1>&ndash;<em>&ndash; coding:utf-8 &ndash;</em>&ndash;</h1>

<p>def is_prime(start,stop):</p>

<pre><code>stop  = stop+1     #包含列表右边的值
prime = filter(lambda x : not [x%i for i in range(2,x) if x%i == 0],range(start,stop))   #取出質數,x从range(start,stop) 取的數
print prime
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>try :
    start = input("Enter a start Number :")
except :
    start = 2   #开始值默认2
try :
    stop  = input("Enter a stop  Number :")
except :
    stop  = 0   #停止數，默认0，即不返回任何值
is_prime(start,stop)
</code></pre>

<p>```<br/>
<a href="http://www.cnblogs.com/zhoujinyi/archive/2013/06/07/3121976.html">Origin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes of Python 02]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/03/06/notes-of-python-02/"/>
    <updated>2014-03-06T17:07:25+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/03/06/notes-of-python-02</id>
    <content type="html"><![CDATA[<ol>
<li><p>不同算法實現Fibonacci數列<br/>
1) 遞歸：<br/>
<code>python
fib=lambda n:1 if n&lt;=2 else fib(n-1)+fib(n-2)
</code><br/>
2) 迭代：<br/>
<code>python
def fib(n):
x,y=0,1
while(n):
x,y,n=y,x+y,n-1
return x
</code><br/>
3) 尾遞歸(SICP)：<br/>
<code>python
def fib(n):
def fib_iter(n,x,y):
if n==0 : return x
else : return fib_iter(n-1,y,x+y)
return fib_iter(n,0,1)
</code><br/>
<a href="http://www.cnblogs.com/figure9/archive/2010/08/30/1812927.html">Origin</a><!--more--></p></li>
<li><p>九九乘法表<br/>
<code>python
for i in range(1,10):
　　for j in range(1,i+1):
　　　　print(" %d*%d=%d" % (j,i,i*j)),
　　print '\n'
</code></p></li>
<li><p>求素數<br/>
<code>python
lis = []
for obj in range(1,10):
 if obj&gt;2:
     for x in range(2,obj):
         if obj % x == 0:
             lis.append(obj)
lis = list(set(lis))
sushu = [obj for obj in range(1,10) if obj not in lis]
print sushu
</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python實現排序算法]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/03/06/pythonshi-xian-pai-xu-suan-fa/"/>
    <updated>2014-03-06T15:53:21+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/03/06/pythonshi-xian-pai-xu-suan-fa</id>
    <content type="html"><![CDATA[<ol>
<li>冒泡排序<br/>
<code>python   
def bubble(x,n):  
\冒泡排序，x是列表，n是列表長度  
for i in range(n):  
for j in range(n-1):  
if x[j]&gt;x[j+1]:  
t = x[j]  
x[j] = x[j+1]  
x[j+1] = t  
return x                  
print bubble([1,10,2,5,41,25,3,48], 8)    
</code><br/>
</br><!--more--></li>
<li>插入排序<br/>
<code>python  
def insert(x,n):
  i = 1
  while i&lt;n-1:
      key = x[i]
      j = i-1
      while j&gt;=0 and key&lt;x[j]:
          x[j+1]= x[j]
          j -= 1
      x[j+1] = key
      i += 1
  return x
print insert([1,10,2,5,41,25,3,48],8)
</code><br/>
</br></li>
<li>選擇排序<br/>
<code>python
def select(x,n):
 for i in range(n-1):
     key = i
     for j in range(i+1,n):
         if x[j] &lt; x[key]:
              key = j
     if key!=i:
         t = x[i]
         x[i] = x[key]
         x[key] = t
 return x
print select([1,10,2,5,41,25,3,48],8)
</code><br/>
</br></li>
<li>快速排序
<code>python
def partition(x,low,high):
 key = x[low]
 while low&lt;high:
     while low&lt;high and x[high]&gt;=key:
         high -= 1
     if low &lt; high:
         x[low]= x[high]
         low += 1
     while low &lt;high and x[low]&lt;=key:
         low += 1
     if low &lt; high:
         x[high] = x[low]
         high -= 1
 x[low] = key
 return low
def quick(x,low,high):
 if low &lt; high:
    p = partition(x,low,high)
    quick(x,low,p-1)
    quick(x,p+1,high)
 return x
</code><br/>
</br></li>
<li>利用函數排序<br/>
1) cmp()<br/>
Compare the two objects x and y and return an integer according to the outcome. The return value is negative if x &lt; y, zero if x == y and strictly positive if x > y.<br/>
2) reversed()<br/>
3) sort()<br/>
4) sorted()</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平衡點問題和支配點問題之Python求解(轉)]]></title>
    <link href="http://www.aprilzephyr.com/blog/2014/02/18/ping-heng-dian-wen-ti-he-zhi-pei-dian-wen-ti-zhi-pythonqiu-jie-zhuan/"/>
    <updated>2014-02-18T21:46:13+08:00</updated>
    <id>http://www.aprilzephyr.com/blog/2014/02/18/ping-heng-dian-wen-ti-he-zhi-pei-dian-wen-ti-zhi-pythonqiu-jie-zhuan</id>
    <content type="html"><![CDATA[<ol>
<li><p>平衡點問題<br/>
平衡點：比如int[] numbers = {1,3,5,7,8,25,4,20}; 25前面的總和爲24，25後面的總和也是24，25這個點就是平衡點；假如一個數組中的元素，其前面的部分等於後面的部分，那麼這個點的位序就是平衡點。 <br/>
要求：返回任何一個平衡點<br/>
使用sum函数累加所有的数。
使用一个变量fore来累加序列的前部。直到满足条件fore&lt;(total-number)/2;
``` python<br/>
numbers = [1,3,5,7,8,2,4,20]</p>

<h1>find total</h1>

total=sum(numbers)

<h1>find num</h1>

fore=0<br/>
for number in numbers:<br/>
if fore&lt;(total-number)/2 :<br/>
   fore+=number<br/>
else:<br/>
   break

<h1>print answer</h1>

<p>if fore == (total-number)/2 :<br/>
print number<br/>
else :<br/>
print r'not found'<br/>
```<br/>
算法簡單，而且是O(n)的。<br/>
<strong>PS</strong> 上述解題思路爲題目只考慮序列只包括正數的情況(有唯一平衡點)，當序列中有負數的時候，平衡點不一定唯一。<!--more--></p></li>
<li><p>支配點問題<br/>
支配數：數組中某個元素出現的次數大於數組總數的一半時就成爲支配數，其所在位序成為支配點；比如int[] a = {3,3,1,2,3};3爲支配數，0，1，4分别爲支配點。<br/>
要求：返回任何一個支配點<br/>
《編程之美》中有答案，就是尋找水王那篇。<br/>
具體方法是：將序列排序，取中位數——注意，如果一個數出現次數大於整體的一半，那麼排序之後支配數一定在中間，然後驗證是否正確。<br/>
``` python<br/>
numbers = [1,3,4,3,3]</p>

<h1>calculate</h1>

numbers.sort()<br/>
lens=len(numbers)<br/>
candidate=numbers[lens/2]

<h1>validate</h1>

N=0<br/>
for number in numbers:<br/>
 if number==candidate:<br/>
    N+=1

<h1>print answer</h1>

<p>if (N>=lens/2):<br/>
  print numbers[lens/2]<br/>
else :<br/>
print &lsquo;not found'<br/>
```<br/>
<a href="http://hi.baidu.com/ruclin/item/f2706f26b1d2db140975086b">Origin</a>
<a href="http://www.iteye.com/topic/600079">Reference</a></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
